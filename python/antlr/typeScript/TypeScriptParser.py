# Generated from typeScript/TypeScriptParser.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if __name__ is not None and "." in __name__:
    from .TypeScriptParserBase import TypeScriptParserBase
else:
    from TypeScriptParserBase import TypeScriptParserBase


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0087")
        buf.write("\u0690\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\3\2\3")
        buf.write("\2\3\2\3\3\3\3\5\3\u0128\n\3\3\4\3\4\5\4\u012c\n\4\3\4")
        buf.write("\3\4\3\5\3\5\3\5\7\5\u0133\n\5\f\5\16\5\u0136\13\5\3\6")
        buf.write("\3\6\5\6\u013a\n\6\3\6\5\6\u013d\n\6\3\7\3\7\3\7\3\b\3")
        buf.write("\b\5\b\u0144\n\b\3\b\3\b\3\t\3\t\3\t\7\t\u014b\n\t\f\t")
        buf.write("\16\t\u014e\13\t\3\n\3\n\3\13\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u0157\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u0162")
        buf.write("\n\f\f\f\16\f\u0165\13\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0179\n")
        buf.write("\r\3\r\3\r\3\r\3\r\7\r\u017f\n\r\f\r\16\r\u0182\13\r\3")
        buf.write("\16\3\16\3\17\3\17\5\17\u0188\n\17\3\20\3\20\5\20\u018c")
        buf.write("\n\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\5\22\u019b\n\22\3\23\3\23\5\23\u019f\n")
        buf.write("\23\3\24\3\24\5\24\u01a3\n\24\3\24\3\24\3\25\3\25\5\25")
        buf.write("\u01a9\n\25\3\26\3\26\3\26\7\26\u01ae\n\26\f\26\16\26")
        buf.write("\u01b1\13\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u01ba")
        buf.write("\n\27\5\27\u01bc\n\27\3\30\3\30\3\30\3\30\3\30\3\31\3")
        buf.write("\31\3\31\3\31\3\32\3\32\3\32\7\32\u01ca\n\32\f\32\16\32")
        buf.write("\u01cd\13\32\3\33\5\33\u01d0\n\33\3\33\3\33\5\33\u01d4")
        buf.write("\n\33\3\33\3\33\3\33\3\33\3\34\3\34\5\34\u01dc\n\34\3")
        buf.write("\34\3\34\5\34\u01e0\n\34\3\34\3\34\3\34\3\34\3\35\3\35")
        buf.write("\3\35\3\36\3\36\3\36\3\36\6\36\u01ed\n\36\r\36\16\36\u01ee")
        buf.write("\3\36\3\36\5\36\u01f3\n\36\3\37\5\37\u01f6\n\37\3\37\3")
        buf.write("\37\5\37\u01fa\n\37\3\37\5\37\u01fd\n\37\3\37\3\37\5\37")
        buf.write("\u0201\n\37\3 \3 \3 \3!\5!\u0207\n!\3!\3!\5!\u020b\n!")
        buf.write("\3!\3!\5!\u020f\n!\3\"\3\"\3\"\3\"\7\"\u0215\n\"\f\"\16")
        buf.write("\"\u0218\13\"\3\"\3\"\5\"\u021c\n\"\5\"\u021e\n\"\3#\3")
        buf.write("#\3#\7#\u0223\n#\f#\16#\u0226\13#\3$\3$\5$\u022a\n$\3")
        buf.write("%\5%\u022d\n%\3%\5%\u0230\n%\3%\3%\3%\5%\u0235\n%\3%\5")
        buf.write("%\u0238\n%\3%\5%\u023b\n%\3&\3&\3&\5&\u0240\n&\3\'\5\'")
        buf.write("\u0243\n\'\3\'\5\'\u0246\n\'\3\'\3\'\5\'\u024a\n\'\3(")
        buf.write("\3(\3)\3)\5)\u0250\n)\3*\3*\5*\u0254\n*\3*\3*\5*\u0258")
        buf.write("\n*\3*\3*\5*\u025c\n*\3+\3+\3+\3+\3+\3+\3+\3,\3,\5,\u0267")
        buf.write("\n,\3,\3,\3-\3-\3-\5-\u026e\n-\3-\3-\3-\3-\3.\5.\u0275")
        buf.write("\n.\3.\3.\3.\5.\u027a\n.\3.\3.\3.\3.\3.\3.\5.\u0282\n")
        buf.write(".\3/\5/\u0285\n/\3/\5/\u0288\n/\3/\3/\3/\5/\u028d\n/\3")
        buf.write("/\5/\u0290\n/\3/\3/\5/\u0294\n/\3\60\3\60\3\60\3\61\3")
        buf.write("\61\3\61\7\61\u029c\n\61\f\61\16\61\u029f\13\61\3\62\5")
        buf.write("\62\u02a2\n\62\3\62\3\62\3\62\3\62\5\62\u02a8\n\62\3\62")
        buf.write("\3\62\3\63\3\63\5\63\u02ae\n\63\3\64\3\64\3\64\7\64\u02b3")
        buf.write("\n\64\f\64\16\64\u02b6\13\64\3\65\3\65\3\65\5\65\u02bb")
        buf.write("\n\65\3\66\3\66\3\66\3\66\5\66\u02c1\n\66\3\66\3\66\3")
        buf.write("\67\3\67\6\67\u02c7\n\67\r\67\16\67\u02c8\3\67\7\67\u02cc")
        buf.write("\n\67\f\67\16\67\u02cf\13\67\38\38\38\38\38\39\69\u02d7")
        buf.write("\n9\r9\169\u02d8\3:\3:\3:\5:\u02de\n:\3;\3;\3;\3;\3;\3")
        buf.write(";\5;\u02e6\n;\3;\3;\3;\7;\u02eb\n;\f;\16;\u02ee\13;\3")
        buf.write("<\3<\3<\3=\5=\u02f4\n=\3=\3=\3>\5>\u02f9\n>\3>\3>\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u031b\n?\3@\3@\5@\u031f")
        buf.write("\n@\3@\3@\3A\6A\u0324\nA\rA\16A\u0325\3B\3B\3B\3B\5B\u032c")
        buf.write("\nB\3B\3B\3C\3C\3C\5C\u0333\nC\3D\3D\5D\u0337\nD\3D\3")
        buf.write("D\5D\u033b\nD\3D\3D\3D\3D\3E\3E\3E\5E\u0344\nE\3E\3E\3")
        buf.write("E\3E\7E\u034a\nE\fE\16E\u034d\13E\3E\3E\3F\3F\5F\u0353")
        buf.write("\nF\3F\3F\5F\u0357\nF\3G\3G\5G\u035b\nG\3G\3G\5G\u035f")
        buf.write("\nG\3G\5G\u0362\nG\3G\5G\u0365\nG\3G\5G\u0368\nG\3G\3")
        buf.write("G\5G\u036c\nG\3G\3G\5G\u0370\nG\3G\3G\5G\u0374\nG\5G\u0376")
        buf.write("\nG\3H\3H\3H\7H\u037b\nH\fH\16H\u037e\13H\3I\3I\3I\5I")
        buf.write("\u0383\nI\3I\5I\u0386\nI\3I\5I\u0389\nI\3I\3I\5I\u038d")
        buf.write("\nI\3I\5I\u0390\nI\3J\3J\3K\3K\3K\5K\u0397\nK\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\5L\u03a0\nL\3M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\5M\u03b3\nM\3M\3M\5M\u03b7\nM\3")
        buf.write("M\3M\5M\u03bb\nM\3M\3M\3M\3M\3M\3M\3M\3M\5M\u03c5\nM\3")
        buf.write("M\3M\5M\u03c9\nM\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u03d4\n")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u03e1\nM\3M\3M\3")
        buf.write("M\3M\5M\u03e7\nM\3N\3N\3O\3O\3O\5O\u03ee\nO\3O\3O\3P\3")
        buf.write("P\3P\5P\u03f5\nP\3P\3P\3Q\3Q\3Q\5Q\u03fc\nQ\3Q\3Q\3R\3")
        buf.write("R\3R\5R\u0403\nR\3R\3R\3S\3S\3S\3S\3S\3S\3T\3T\3T\3T\3")
        buf.write("T\3T\3U\3U\5U\u0415\nU\3U\3U\5U\u0419\nU\5U\u041b\nU\3")
        buf.write("U\3U\3V\6V\u0420\nV\rV\16V\u0421\3W\3W\3W\3W\5W\u0428")
        buf.write("\nW\3X\3X\3X\5X\u042d\nX\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3")
        buf.write("[\3[\3[\3[\5[\u043c\n[\3[\5[\u043f\n[\3\\\3\\\3\\\3\\")
        buf.write("\3\\\3\\\3]\3]\3]\3^\3^\3^\3_\3_\3_\3_\3_\3_\3_\3_\5_")
        buf.write("\u0455\n_\3`\5`\u0458\n`\3`\3`\3`\5`\u045d\n`\3`\3`\3")
        buf.write("`\3a\5a\u0463\na\3a\5a\u0466\na\3b\3b\7b\u046a\nb\fb\16")
        buf.write("b\u046d\13b\3b\3b\3c\3c\3c\3d\3d\3d\3e\3e\5e\u0479\ne")
        buf.write("\3e\3e\3e\5e\u047e\ne\3f\3f\3f\5f\u0483\nf\3f\5f\u0486")
        buf.write("\nf\3f\5f\u0489\nf\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u0495")
        buf.write("\nf\3f\3f\3f\5f\u049a\nf\3f\5f\u049d\nf\3g\5g\u04a0\n")
        buf.write("g\3g\5g\u04a3\ng\3g\5g\u04a6\ng\3g\5g\u04a9\ng\3h\3h\3")
        buf.write("h\3i\5i\u04af\ni\3i\3i\3i\5i\u04b4\ni\3i\3i\3i\3i\3i\3")
        buf.write("j\3j\3j\5j\u04be\nj\3j\3j\5j\u04c2\nj\3j\3j\3j\3j\3j\3")
        buf.write("k\3k\3k\3k\7k\u04cd\nk\fk\16k\u04d0\13k\3k\5k\u04d3\n")
        buf.write("k\3k\3k\3l\3l\3l\3m\3m\3m\3m\7m\u04de\nm\fm\16m\u04e1")
        buf.write("\13m\3m\5m\u04e4\nm\3m\3m\3n\3n\3n\3n\3n\5n\u04ed\nn\3")
        buf.write("n\3n\3n\3n\3n\3o\3o\3o\7o\u04f7\no\fo\16o\u04fa\13o\3")
        buf.write("o\3o\5o\u04fe\no\3o\3o\3o\3o\3o\5o\u0505\no\5o\u0507\n")
        buf.write("o\3p\5p\u050a\np\3p\5p\u050d\np\3p\3p\5p\u0511\np\3p\5")
        buf.write("p\u0514\np\3p\3p\5p\u0518\np\3q\3q\3q\3r\5r\u051e\nr\3")
        buf.write("s\6s\u0521\ns\rs\16s\u0522\3t\3t\5t\u0527\nt\3t\3t\3u")
        buf.write("\3u\6u\u052d\nu\ru\16u\u052e\3u\7u\u0532\nu\fu\16u\u0535")
        buf.write("\13u\3v\5v\u0538\nv\3v\3v\5v\u053c\nv\3v\5v\u053f\nv\3")
        buf.write("w\3w\3w\3w\7w\u0545\nw\fw\16w\u0548\13w\5w\u054a\nw\3")
        buf.write("w\5w\u054d\nw\3w\3w\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3")
        buf.write("x\3x\3x\3x\5x\u0560\nx\3y\3y\3y\3y\5y\u0566\ny\3y\3y\3")
        buf.write("y\3y\3z\3z\3z\3z\5z\u0570\nz\3z\5z\u0573\nz\3z\3z\3z\3")
        buf.write("z\3z\3{\3{\3{\5{\u057d\n{\3|\3|\3|\5|\u0582\n|\5|\u0584")
        buf.write("\n|\3|\3|\3}\3}\3}\7}\u058b\n}\f}\16}\u058e\13}\3~\5~")
        buf.write("\u0591\n~\3~\3~\5~\u0595\n~\3\177\3\177\3\177\7\177\u059a")
        buf.write("\n\177\f\177\16\177\u059d\13\177\3\u0080\3\u0080\5\u0080")
        buf.write("\u05a1\n\u0080\3\u0080\3\u0080\5\u0080\u05a5\n\u0080\3")
        buf.write("\u0080\3\u0080\5\u0080\u05a9\n\u0080\3\u0080\3\u0080\3")
        buf.write("\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\5\u0081\u05b4\n\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\5\u0081\u05ba\n\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\5\u0081\u05c1\n\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\5\u0081\u05dc\n\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\5\u0081\u05e8\n\u0081\5\u0081\u05ea\n\u0081\3\u0081\3")
        buf.write("\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\5\u0081\u0626\n\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\7\u0081\u0635\n\u0081\f\u0081")
        buf.write("\16\u0081\u0638\13\u0081\3\u0082\3\u0082\3\u0082\5\u0082")
        buf.write("\u063d\n\u0082\3\u0082\5\u0082\u0640\n\u0082\3\u0083\5")
        buf.write("\u0083\u0643\n\u0083\3\u0083\3\u0083\5\u0083\u0647\n\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\5\u0084")
        buf.write("\u064f\n\u0084\3\u0084\5\u0084\u0652\n\u0084\3\u0085\3")
        buf.write("\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0659\n\u0085\3")
        buf.write("\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\5\u0087\u0663\n\u0087\3\u0088\3\u0088\7\u0088")
        buf.write("\u0667\n\u0088\f\u0088\16\u0088\u066a\13\u0088\3\u0088")
        buf.write("\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089")
        buf.write("\u0673\n\u0089\3\u008a\3\u008a\3\u008b\3\u008b\5\u008b")
        buf.write("\u0679\n\u008b\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d")
        buf.write("\5\u008d\u0680\n\u008d\3\u008e\3\u008e\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\5\u0091\u068e\n\u0091\3\u0091\2\6\26\30t\u0100")
        buf.write("\u0092\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,")
        buf.write(".\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8")
        buf.write("\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da")
        buf.write("\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec")
        buf.write("\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe")
        buf.write("\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110")
        buf.write("\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\2\21")
        buf.write("\4\2KKnr\3\2\r\16\4\2ghkk\4\2ooqq\5\2GGbbff\4\2\17\17")
        buf.write("\21\21\3\2\32\34\3\2\26\27\3\2\35\37\3\2 #\3\2$\'\3\2")
        buf.write("-\67\3\2;?\5\2ssxx~~\7\2@Y[mqqsuxx\2\u073d\2\u0122\3\2")
        buf.write("\2\2\4\u0127\3\2\2\2\6\u0129\3\2\2\2\b\u012f\3\2\2\2\n")
        buf.write("\u013c\3\2\2\2\f\u013e\3\2\2\2\16\u0141\3\2\2\2\20\u0147")
        buf.write("\3\2\2\2\22\u014f\3\2\2\2\24\u0156\3\2\2\2\26\u0158\3")
        buf.write("\2\2\2\30\u0178\3\2\2\2\32\u0183\3\2\2\2\34\u0185\3\2")
        buf.write("\2\2\36\u018b\3\2\2\2 \u018d\3\2\2\2\"\u0191\3\2\2\2$")
        buf.write("\u019e\3\2\2\2&\u01a0\3\2\2\2(\u01a6\3\2\2\2*\u01aa\3")
        buf.write("\2\2\2,\u01bb\3\2\2\2.\u01bd\3\2\2\2\60\u01c2\3\2\2\2")
        buf.write("\62\u01c6\3\2\2\2\64\u01cf\3\2\2\2\66\u01d9\3\2\2\28\u01e5")
        buf.write("\3\2\2\2:\u01f2\3\2\2\2<\u01f5\3\2\2\2>\u0202\3\2\2\2")
        buf.write("@\u0206\3\2\2\2B\u021d\3\2\2\2D\u021f\3\2\2\2F\u0229\3")
        buf.write("\2\2\2H\u022c\3\2\2\2J\u023c\3\2\2\2L\u0242\3\2\2\2N\u024b")
        buf.write("\3\2\2\2P\u024f\3\2\2\2R\u0251\3\2\2\2T\u025d\3\2\2\2")
        buf.write("V\u0264\3\2\2\2X\u026a\3\2\2\2Z\u0274\3\2\2\2\\\u0284")
        buf.write("\3\2\2\2^\u0295\3\2\2\2`\u0298\3\2\2\2b\u02a1\3\2\2\2")
        buf.write("d\u02ab\3\2\2\2f\u02af\3\2\2\2h\u02b7\3\2\2\2j\u02bc\3")
        buf.write("\2\2\2l\u02c4\3\2\2\2n\u02d0\3\2\2\2p\u02d6\3\2\2\2r\u02da")
        buf.write("\3\2\2\2t\u02e5\3\2\2\2v\u02ef\3\2\2\2x\u02f3\3\2\2\2")
        buf.write("z\u02f8\3\2\2\2|\u031a\3\2\2\2~\u031c\3\2\2\2\u0080\u0323")
        buf.write("\3\2\2\2\u0082\u0327\3\2\2\2\u0084\u032f\3\2\2\2\u0086")
        buf.write("\u0336\3\2\2\2\u0088\u0343\3\2\2\2\u008a\u0350\3\2\2\2")
        buf.write("\u008c\u0375\3\2\2\2\u008e\u0377\3\2\2\2\u0090\u0382\3")
        buf.write("\2\2\2\u0092\u0391\3\2\2\2\u0094\u0393\3\2\2\2\u0096\u0398")
        buf.write("\3\2\2\2\u0098\u03e6\3\2\2\2\u009a\u03e8\3\2\2\2\u009c")
        buf.write("\u03ea\3\2\2\2\u009e\u03f1\3\2\2\2\u00a0\u03f8\3\2\2\2")
        buf.write("\u00a2\u03ff\3\2\2\2\u00a4\u0406\3\2\2\2\u00a6\u040c\3")
        buf.write("\2\2\2\u00a8\u0412\3\2\2\2\u00aa\u041f\3\2\2\2\u00ac\u0423")
        buf.write("\3\2\2\2\u00ae\u0429\3\2\2\2\u00b0\u042e\3\2\2\2\u00b2")
        buf.write("\u0432\3\2\2\2\u00b4\u0437\3\2\2\2\u00b6\u0440\3\2\2\2")
        buf.write("\u00b8\u0446\3\2\2\2\u00ba\u0449\3\2\2\2\u00bc\u044c\3")
        buf.write("\2\2\2\u00be\u0457\3\2\2\2\u00c0\u0462\3\2\2\2\u00c2\u0467")
        buf.write("\3\2\2\2\u00c4\u0470\3\2\2\2\u00c6\u0473\3\2\2\2\u00c8")
        buf.write("\u047d\3\2\2\2\u00ca\u049c\3\2\2\2\u00cc\u049f\3\2\2\2")
        buf.write("\u00ce\u04aa\3\2\2\2\u00d0\u04ae\3\2\2\2\u00d2\u04ba\3")
        buf.write("\2\2\2\u00d4\u04c8\3\2\2\2\u00d6\u04d6\3\2\2\2\u00d8\u04d9")
        buf.write("\3\2\2\2\u00da\u04e7\3\2\2\2\u00dc\u0506\3\2\2\2\u00de")
        buf.write("\u0509\3\2\2\2\u00e0\u0519\3\2\2\2\u00e2\u051d\3\2\2\2")
        buf.write("\u00e4\u0520\3\2\2\2\u00e6\u0524\3\2\2\2\u00e8\u052a\3")
        buf.write("\2\2\2\u00ea\u0537\3\2\2\2\u00ec\u0540\3\2\2\2\u00ee\u055f")
        buf.write("\3\2\2\2\u00f0\u0561\3\2\2\2\u00f2\u056b\3\2\2\2\u00f4")
        buf.write("\u057c\3\2\2\2\u00f6\u057e\3\2\2\2\u00f8\u0587\3\2\2\2")
        buf.write("\u00fa\u0590\3\2\2\2\u00fc\u0596\3\2\2\2\u00fe\u059e\3")
        buf.write("\2\2\2\u0100\u05e9\3\2\2\2\u0102\u063f\3\2\2\2\u0104\u0642")
        buf.write("\3\2\2\2\u0106\u0651\3\2\2\2\u0108\u0658\3\2\2\2\u010a")
        buf.write("\u065a\3\2\2\2\u010c\u0662\3\2\2\2\u010e\u0664\3\2\2\2")
        buf.write("\u0110\u0672\3\2\2\2\u0112\u0674\3\2\2\2\u0114\u0678\3")
        buf.write("\2\2\2\u0116\u067a\3\2\2\2\u0118\u067f\3\2\2\2\u011a\u0681")
        buf.write("\3\2\2\2\u011c\u0683\3\2\2\2\u011e\u0686\3\2\2\2\u0120")
        buf.write("\u068d\3\2\2\2\u0122\u0123\7\17\2\2\u0123\u0124\5\u0100")
        buf.write("\u0081\2\u0124\3\3\2\2\2\u0125\u0128\5\u00e6t\2\u0126")
        buf.write("\u0128\5\u00ecw\2\u0127\u0125\3\2\2\2\u0127\u0126\3\2")
        buf.write("\2\2\u0128\5\3\2\2\2\u0129\u012b\7 \2\2\u012a\u012c\5")
        buf.write("\b\5\2\u012b\u012a\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d")
        buf.write("\3\2\2\2\u012d\u012e\7!\2\2\u012e\7\3\2\2\2\u012f\u0134")
        buf.write("\5\n\6\2\u0130\u0131\7\16\2\2\u0131\u0133\5\n\6\2\u0132")
        buf.write("\u0130\3\2\2\2\u0133\u0136\3\2\2\2\u0134\u0132\3\2\2\2")
        buf.write("\u0134\u0135\3\2\2\2\u0135\t\3\2\2\2\u0136\u0134\3\2\2")
        buf.write("\2\u0137\u0139\7~\2\2\u0138\u013a\5\f\7\2\u0139\u0138")
        buf.write("\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013d\3\2\2\2\u013b")
        buf.write("\u013d\5\6\4\2\u013c\u0137\3\2\2\2\u013c\u013b\3\2\2\2")
        buf.write("\u013d\13\3\2\2\2\u013e\u013f\7`\2\2\u013f\u0140\5\24")
        buf.write("\13\2\u0140\r\3\2\2\2\u0141\u0143\7 \2\2\u0142\u0144\5")
        buf.write("\20\t\2\u0143\u0142\3\2\2\2\u0143\u0144\3\2\2\2\u0144")
        buf.write("\u0145\3\2\2\2\u0145\u0146\7!\2\2\u0146\17\3\2\2\2\u0147")
        buf.write("\u014c\5\22\n\2\u0148\u0149\7\16\2\2\u0149\u014b\5\22")
        buf.write("\n\2\u014a\u0148\3\2\2\2\u014b\u014e\3\2\2\2\u014c\u014a")
        buf.write("\3\2\2\2\u014c\u014d\3\2\2\2\u014d\21\3\2\2\2\u014e\u014c")
        buf.write("\3\2\2\2\u014f\u0150\5\24\13\2\u0150\23\3\2\2\2\u0151")
        buf.write("\u0157\5\26\f\2\u0152\u0157\5\64\33\2\u0153\u0157\5\66")
        buf.write("\34\2\u0154\u0157\5 \21\2\u0155\u0157\7\177\2\2\u0156")
        buf.write("\u0151\3\2\2\2\u0156\u0152\3\2\2\2\u0156\u0153\3\2\2\2")
        buf.write("\u0156\u0154\3\2\2\2\u0156\u0155\3\2\2\2\u0157\25\3\2")
        buf.write("\2\2\u0158\u0159\b\f\1\2\u0159\u015a\5\30\r\2\u015a\u0163")
        buf.write("\3\2\2\2\u015b\u015c\f\5\2\2\u015c\u015d\7*\2\2\u015d")
        buf.write("\u0162\5\26\f\6\u015e\u015f\f\4\2\2\u015f\u0160\7(\2\2")
        buf.write("\u0160\u0162\5\26\f\5\u0161\u015b\3\2\2\2\u0161\u015e")
        buf.write("\3\2\2\2\u0162\u0165\3\2\2\2\u0163\u0161\3\2\2\2\u0163")
        buf.write("\u0164\3\2\2\2\u0164\27\3\2\2\2\u0165\u0163\3\2\2\2\u0166")
        buf.write("\u0167\b\r\1\2\u0167\u0168\7\b\2\2\u0168\u0169\5\24\13")
        buf.write("\2\u0169\u016a\7\t\2\2\u016a\u0179\3\2\2\2\u016b\u0179")
        buf.write("\5\32\16\2\u016c\u0179\5\34\17\2\u016d\u0179\5&\24\2\u016e")
        buf.write("\u016f\7\6\2\2\u016f\u0170\5\62\32\2\u0170\u0171\7\7\2")
        buf.write("\2\u0171\u0179\3\2\2\2\u0172\u0179\58\35\2\u0173\u0179")
        buf.write("\7R\2\2\u0174\u0175\5\34\17\2\u0175\u0176\7|\2\2\u0176")
        buf.write("\u0177\5\30\r\3\u0177\u0179\3\2\2\2\u0178\u0166\3\2\2")
        buf.write("\2\u0178\u016b\3\2\2\2\u0178\u016c\3\2\2\2\u0178\u016d")
        buf.write("\3\2\2\2\u0178\u016e\3\2\2\2\u0178\u0172\3\2\2\2\u0178")
        buf.write("\u0173\3\2\2\2\u0178\u0174\3\2\2\2\u0179\u0180\3\2\2\2")
        buf.write("\u017a\u017b\f\7\2\2\u017b\u017c\6\r\5\2\u017c\u017d\7")
        buf.write("\6\2\2\u017d\u017f\7\7\2\2\u017e\u017a\3\2\2\2\u017f\u0182")
        buf.write("\3\2\2\2\u0180\u017e\3\2\2\2\u0180\u0181\3\2\2\2\u0181")
        buf.write("\31\3\2\2\2\u0182\u0180\3\2\2\2\u0183\u0184\t\2\2\2\u0184")
        buf.write("\33\3\2\2\2\u0185\u0187\5$\23\2\u0186\u0188\5\36\20\2")
        buf.write("\u0187\u0186\3\2\2\2\u0187\u0188\3\2\2\2\u0188\35\3\2")
        buf.write("\2\2\u0189\u018c\5\"\22\2\u018a\u018c\5 \21\2\u018b\u0189")
        buf.write("\3\2\2\2\u018b\u018a\3\2\2\2\u018c\37\3\2\2\2\u018d\u018e")
        buf.write("\7 \2\2\u018e\u018f\5\20\t\2\u018f\u0190\7!\2\2\u0190")
        buf.write("!\3\2\2\2\u0191\u0192\7 \2\2\u0192\u0193\5\20\t\2\u0193")
        buf.write("\u0194\7 \2\2\u0194\u019a\5\20\t\2\u0195\u0196\7!\2\2")
        buf.write("\u0196\u0197\5\4\3\2\u0197\u0198\7!\2\2\u0198\u019b\3")
        buf.write("\2\2\2\u0199\u019b\7\35\2\2\u019a\u0195\3\2\2\2\u019a")
        buf.write("\u0199\3\2\2\2\u019b#\3\2\2\2\u019c\u019f\7~\2\2\u019d")
        buf.write("\u019f\5l\67\2\u019e\u019c\3\2\2\2\u019e\u019d\3\2\2\2")
        buf.write("\u019f%\3\2\2\2\u01a0\u01a2\7\n\2\2\u01a1\u01a3\5(\25")
        buf.write("\2\u01a2\u01a1\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a4")
        buf.write("\3\2\2\2\u01a4\u01a5\7\f\2\2\u01a5\'\3\2\2\2\u01a6\u01a8")
        buf.write("\5*\26\2\u01a7\u01a9\t\3\2\2\u01a8\u01a7\3\2\2\2\u01a8")
        buf.write("\u01a9\3\2\2\2\u01a9)\3\2\2\2\u01aa\u01af\5,\27\2\u01ab")
        buf.write("\u01ac\t\3\2\2\u01ac\u01ae\5,\27\2\u01ad\u01ab\3\2\2\2")
        buf.write("\u01ae\u01b1\3\2\2\2\u01af\u01ad\3\2\2\2\u01af\u01b0\3")
        buf.write("\2\2\2\u01b0+\3\2\2\2\u01b1\u01af\3\2\2\2\u01b2\u01bc")
        buf.write("\5<\37\2\u01b3\u01bc\5@!\2\u01b4\u01bc\5R*\2\u01b5\u01bc")
        buf.write("\5T+\2\u01b6\u01b9\5V,\2\u01b7\u01b8\78\2\2\u01b8\u01ba")
        buf.write("\5\24\13\2\u01b9\u01b7\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba")
        buf.write("\u01bc\3\2\2\2\u01bb\u01b2\3\2\2\2\u01bb\u01b3\3\2\2\2")
        buf.write("\u01bb\u01b4\3\2\2\2\u01bb\u01b5\3\2\2\2\u01bb\u01b6\3")
        buf.write("\2\2\2\u01bc-\3\2\2\2\u01bd\u01be\5\30\r\2\u01be\u01bf")
        buf.write("\6\30\6\2\u01bf\u01c0\7\6\2\2\u01c0\u01c1\7\7\2\2\u01c1")
        buf.write("/\3\2\2\2\u01c2\u01c3\7\6\2\2\u01c3\u01c4\5\62\32\2\u01c4")
        buf.write("\u01c5\7\7\2\2\u01c5\61\3\2\2\2\u01c6\u01cb\5\24\13\2")
        buf.write("\u01c7\u01c8\7\16\2\2\u01c8\u01ca\5\24\13\2\u01c9\u01c7")
        buf.write("\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cb")
        buf.write("\u01cc\3\2\2\2\u01cc\63\3\2\2\2\u01cd\u01cb\3\2\2\2\u01ce")
        buf.write("\u01d0\5\6\4\2\u01cf\u01ce\3\2\2\2\u01cf\u01d0\3\2\2\2")
        buf.write("\u01d0\u01d1\3\2\2\2\u01d1\u01d3\7\b\2\2\u01d2\u01d4\5")
        buf.write("B\"\2\u01d3\u01d2\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5")
        buf.write("\3\2\2\2\u01d5\u01d6\7\t\2\2\u01d6\u01d7\78\2\2\u01d7")
        buf.write("\u01d8\5\24\13\2\u01d8\65\3\2\2\2\u01d9\u01db\7F\2\2\u01da")
        buf.write("\u01dc\5\6\4\2\u01db\u01da\3\2\2\2\u01db\u01dc\3\2\2\2")
        buf.write("\u01dc\u01dd\3\2\2\2\u01dd\u01df\7\b\2\2\u01de\u01e0\5")
        buf.write("B\"\2\u01df\u01de\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e1")
        buf.write("\3\2\2\2\u01e1\u01e2\7\t\2\2\u01e2\u01e3\78\2\2\u01e3")
        buf.write("\u01e4\5\24\13\2\u01e4\67\3\2\2\2\u01e5\u01e6\7C\2\2\u01e6")
        buf.write("\u01e7\5:\36\2\u01e79\3\2\2\2\u01e8\u01f3\7~\2\2\u01e9")
        buf.write("\u01ea\5\u0114\u008b\2\u01ea\u01eb\7\23\2\2\u01eb\u01ed")
        buf.write("\3\2\2\2\u01ec\u01e9\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee")
        buf.write("\u01ec\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0\3\2\2\2")
        buf.write("\u01f0\u01f1\5\u0114\u008b\2\u01f1\u01f3\3\2\2\2\u01f2")
        buf.write("\u01e8\3\2\2\2\u01f2\u01ec\3\2\2\2\u01f3;\3\2\2\2\u01f4")
        buf.write("\u01f6\7\\\2\2\u01f5\u01f4\3\2\2\2\u01f5\u01f6\3\2\2\2")
        buf.write("\u01f6\u01f7\3\2\2\2\u01f7\u01f9\5\u00f4{\2\u01f8\u01fa")
        buf.write("\7\20\2\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa")
        buf.write("\u01fc\3\2\2\2\u01fb\u01fd\5> \2\u01fc\u01fb\3\2\2\2\u01fc")
        buf.write("\u01fd\3\2\2\2\u01fd\u0200\3\2\2\2\u01fe\u01ff\78\2\2")
        buf.write("\u01ff\u0201\5\24\13\2\u0200\u01fe\3\2\2\2\u0200\u0201")
        buf.write("\3\2\2\2\u0201=\3\2\2\2\u0202\u0203\7\21\2\2\u0203\u0204")
        buf.write("\5\24\13\2\u0204?\3\2\2\2\u0205\u0207\5\6\4\2\u0206\u0205")
        buf.write("\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u0208\3\2\2\2\u0208")
        buf.write("\u020a\7\b\2\2\u0209\u020b\5B\"\2\u020a\u0209\3\2\2\2")
        buf.write("\u020a\u020b\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u020e\7")
        buf.write("\t\2\2\u020d\u020f\5> \2\u020e\u020d\3\2\2\2\u020e\u020f")
        buf.write("\3\2\2\2\u020fA\3\2\2\2\u0210\u021e\5J&\2\u0211\u0216")
        buf.write("\5F$\2\u0212\u0213\7\16\2\2\u0213\u0215\5F$\2\u0214\u0212")
        buf.write("\3\2\2\2\u0215\u0218\3\2\2\2\u0216\u0214\3\2\2\2\u0216")
        buf.write("\u0217\3\2\2\2\u0217\u021b\3\2\2\2\u0218\u0216\3\2\2\2")
        buf.write("\u0219\u021a\7\16\2\2\u021a\u021c\5J&\2\u021b\u0219\3")
        buf.write("\2\2\2\u021b\u021c\3\2\2\2\u021c\u021e\3\2\2\2\u021d\u0210")
        buf.write("\3\2\2\2\u021d\u0211\3\2\2\2\u021eC\3\2\2\2\u021f\u0224")
        buf.write("\5L\'\2\u0220\u0221\7\16\2\2\u0221\u0223\5L\'\2\u0222")
        buf.write("\u0220\3\2\2\2\u0223\u0226\3\2\2\2\u0224\u0222\3\2\2\2")
        buf.write("\u0224\u0225\3\2\2\2\u0225E\3\2\2\2\u0226\u0224\3\2\2")
        buf.write("\2\u0227\u022a\5L\'\2\u0228\u022a\5H%\2\u0229\u0227\3")
        buf.write("\2\2\2\u0229\u0228\3\2\2\2\u022aG\3\2\2\2\u022b\u022d")
        buf.write("\5p9\2\u022c\u022b\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022f")
        buf.write("\3\2\2\2\u022e\u0230\5N(\2\u022f\u022e\3\2\2\2\u022f\u0230")
        buf.write("\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u023a\5P)\2\u0232\u0234")
        buf.write("\7\20\2\2\u0233\u0235\5> \2\u0234\u0233\3\2\2\2\u0234")
        buf.write("\u0235\3\2\2\2\u0235\u023b\3\2\2\2\u0236\u0238\5> \2\u0237")
        buf.write("\u0236\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u0239\3\2\2\2")
        buf.write("\u0239\u023b\5\2\2\2\u023a\u0232\3\2\2\2\u023a\u0237\3")
        buf.write("\2\2\2\u023bI\3\2\2\2\u023c\u023d\7\22\2\2\u023d\u023f")
        buf.write("\5\u0100\u0081\2\u023e\u0240\5> \2\u023f\u023e\3\2\2\2")
        buf.write("\u023f\u0240\3\2\2\2\u0240K\3\2\2\2\u0241\u0243\5p9\2")
        buf.write("\u0242\u0241\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0245\3")
        buf.write("\2\2\2\u0244\u0246\5N(\2\u0245\u0244\3\2\2\2\u0245\u0246")
        buf.write("\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0249\5P)\2\u0248\u024a")
        buf.write("\5> \2\u0249\u0248\3\2\2\2\u0249\u024a\3\2\2\2\u024aM")
        buf.write("\3\2\2\2\u024b\u024c\t\4\2\2\u024cO\3\2\2\2\u024d\u0250")
        buf.write("\5\u0114\u008b\2\u024e\u0250\5\4\3\2\u024f\u024d\3\2\2")
        buf.write("\2\u024f\u024e\3\2\2\2\u0250Q\3\2\2\2\u0251\u0253\7F\2")
        buf.write("\2\u0252\u0254\5\6\4\2\u0253\u0252\3\2\2\2\u0253\u0254")
        buf.write("\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0257\7\b\2\2\u0256")
        buf.write("\u0258\5B\"\2\u0257\u0256\3\2\2\2\u0257\u0258\3\2\2\2")
        buf.write("\u0258\u0259\3\2\2\2\u0259\u025b\7\t\2\2\u025a\u025c\5")
        buf.write("> \2\u025b\u025a\3\2\2\2\u025b\u025c\3\2\2\2\u025cS\3")
        buf.write("\2\2\2\u025d\u025e\7\6\2\2\u025e\u025f\7~\2\2\u025f\u0260")
        buf.write("\7\21\2\2\u0260\u0261\t\5\2\2\u0261\u0262\7\7\2\2\u0262")
        buf.write("\u0263\5> \2\u0263U\3\2\2\2\u0264\u0266\5\u00f4{\2\u0265")
        buf.write("\u0267\7\20\2\2\u0266\u0265\3\2\2\2\u0266\u0267\3\2\2")
        buf.write("\2\u0267\u0268\3\2\2\2\u0268\u0269\5@!\2\u0269W\3\2\2")
        buf.write("\2\u026a\u026b\7s\2\2\u026b\u026d\7~\2\2\u026c\u026e\5")
        buf.write("\6\4\2\u026d\u026c\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u026f")
        buf.write("\3\2\2\2\u026f\u0270\7\17\2\2\u0270\u0271\5\24\13\2\u0271")
        buf.write("\u0272\7\r\2\2\u0272Y\3\2\2\2\u0273\u0275\5N(\2\u0274")
        buf.write("\u0273\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0276\3\2\2\2")
        buf.write("\u0276\u0277\7v\2\2\u0277\u0279\7\b\2\2\u0278\u027a\5")
        buf.write("\u00dco\2\u0279\u0278\3\2\2\2\u0279\u027a\3\2\2\2\u027a")
        buf.write("\u027b\3\2\2\2\u027b\u0281\7\t\2\2\u027c\u027d\7\n\2\2")
        buf.write("\u027d\u027e\5\u00e2r\2\u027e\u027f\7\f\2\2\u027f\u0282")
        buf.write("\3\2\2\2\u0280\u0282\7\r\2\2\u0281\u027c\3\2\2\2\u0281")
        buf.write("\u0280\3\2\2\2\u0281\u0282\3\2\2\2\u0282[\3\2\2\2\u0283")
        buf.write("\u0285\7c\2\2\u0284\u0283\3\2\2\2\u0284\u0285\3\2\2\2")
        buf.write("\u0285\u0287\3\2\2\2\u0286\u0288\7z\2\2\u0287\u0286\3")
        buf.write("\2\2\2\u0287\u0288\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028a")
        buf.write("\7i\2\2\u028a\u028c\7~\2\2\u028b\u028d\5\6\4\2\u028c\u028b")
        buf.write("\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028f\3\2\2\2\u028e")
        buf.write("\u0290\5^\60\2\u028f\u028e\3\2\2\2\u028f\u0290\3\2\2\2")
        buf.write("\u0290\u0291\3\2\2\2\u0291\u0293\5&\24\2\u0292\u0294\7")
        buf.write("\r\2\2\u0293\u0292\3\2\2\2\u0293\u0294\3\2\2\2\u0294]")
        buf.write("\3\2\2\2\u0295\u0296\7`\2\2\u0296\u0297\5`\61\2\u0297")
        buf.write("_\3\2\2\2\u0298\u029d\5\34\17\2\u0299\u029a\7\16\2\2\u029a")
        buf.write("\u029c\5\34\17\2\u029b\u0299\3\2\2\2\u029c\u029f\3\2\2")
        buf.write("\2\u029d\u029b\3\2\2\2\u029d\u029e\3\2\2\2\u029ea\3\2")
        buf.write("\2\2\u029f\u029d\3\2\2\2\u02a0\u02a2\7b\2\2\u02a1\u02a0")
        buf.write("\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3")
        buf.write("\u02a4\7_\2\2\u02a4\u02a5\7~\2\2\u02a5\u02a7\7\n\2\2\u02a6")
        buf.write("\u02a8\5d\63\2\u02a7\u02a6\3\2\2\2\u02a7\u02a8\3\2\2\2")
        buf.write("\u02a8\u02a9\3\2\2\2\u02a9\u02aa\7\f\2\2\u02aac\3\2\2")
        buf.write("\2\u02ab\u02ad\5f\64\2\u02ac\u02ae\7\16\2\2\u02ad\u02ac")
        buf.write("\3\2\2\2\u02ad\u02ae\3\2\2\2\u02aee\3\2\2\2\u02af\u02b4")
        buf.write("\5h\65\2\u02b0\u02b1\7\16\2\2\u02b1\u02b3\5h\65\2\u02b2")
        buf.write("\u02b0\3\2\2\2\u02b3\u02b6\3\2\2\2\u02b4\u02b2\3\2\2\2")
        buf.write("\u02b4\u02b5\3\2\2\2\u02b5g\3\2\2\2\u02b6\u02b4\3\2\2")
        buf.write("\2\u02b7\u02ba\5\u00f4{\2\u02b8\u02b9\7\17\2\2\u02b9\u02bb")
        buf.write("\5\u0100\u0081\2\u02ba\u02b8\3\2\2\2\u02ba\u02bb\3\2\2")
        buf.write("\2\u02bbi\3\2\2\2\u02bc\u02bd\7w\2\2\u02bd\u02be\5l\67")
        buf.write("\2\u02be\u02c0\7\n\2\2\u02bf\u02c1\5\u0080A\2\u02c0\u02bf")
        buf.write("\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2")
        buf.write("\u02c3\7\f\2\2\u02c3k\3\2\2\2\u02c4\u02cd\7~\2\2\u02c5")
        buf.write("\u02c7\7\23\2\2\u02c6\u02c5\3\2\2\2\u02c7\u02c8\3\2\2")
        buf.write("\2\u02c8\u02c6\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02ca")
        buf.write("\3\2\2\2\u02ca\u02cc\7~\2\2\u02cb\u02c6\3\2\2\2\u02cc")
        buf.write("\u02cf\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd\u02ce\3\2\2\2")
        buf.write("\u02cem\3\2\2\2\u02cf\u02cd\3\2\2\2\u02d0\u02d1\7~\2\2")
        buf.write("\u02d1\u02d2\7\17\2\2\u02d2\u02d3\5l\67\2\u02d3\u02d4")
        buf.write("\7\r\2\2\u02d4o\3\2\2\2\u02d5\u02d7\5r:\2\u02d6\u02d5")
        buf.write("\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d8")
        buf.write("\u02d9\3\2\2\2\u02d9q\3\2\2\2\u02da\u02dd\7}\2\2\u02db")
        buf.write("\u02de\5t;\2\u02dc\u02de\5v<\2\u02dd\u02db\3\2\2\2\u02dd")
        buf.write("\u02dc\3\2\2\2\u02des\3\2\2\2\u02df\u02e0\b;\1\2\u02e0")
        buf.write("\u02e6\7~\2\2\u02e1\u02e2\7\b\2\2\u02e2\u02e3\5\u0100")
        buf.write("\u0081\2\u02e3\u02e4\7\t\2\2\u02e4\u02e6\3\2\2\2\u02e5")
        buf.write("\u02df\3\2\2\2\u02e5\u02e1\3\2\2\2\u02e6\u02ec\3\2\2\2")
        buf.write("\u02e7\u02e8\f\4\2\2\u02e8\u02e9\7\23\2\2\u02e9\u02eb")
        buf.write("\5\u0114\u008b\2\u02ea\u02e7\3\2\2\2\u02eb\u02ee\3\2\2")
        buf.write("\2\u02ec\u02ea\3\2\2\2\u02ec\u02ed\3\2\2\2\u02edu\3\2")
        buf.write("\2\2\u02ee\u02ec\3\2\2\2\u02ef\u02f0\5t;\2\u02f0\u02f1")
        buf.write("\5\u00f6|\2\u02f1w\3\2\2\2\u02f2\u02f4\5\u00e4s\2\u02f3")
        buf.write("\u02f2\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f5\3\2\2\2")
        buf.write("\u02f5\u02f6\7\2\2\3\u02f6y\3\2\2\2\u02f7\u02f9\7c\2\2")
        buf.write("\u02f8\u02f7\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa\3")
        buf.write("\2\2\2\u02fa\u02fb\5|?\2\u02fb{\3\2\2\2\u02fc\u031b\5")
        buf.write("~@\2\u02fd\u031b\5\u0084C\2\u02fe\u031b\5\u008aF\2\u02ff")
        buf.write("\u031b\5\u0092J\2\u0300\u031b\5\u0082B\2\u0301\u031b\5")
        buf.write("p9\2\u0302\u031b\5\u00be`\2\u0303\u031b\5\\/\2\u0304\u031b")
        buf.write("\5j\66\2\u0305\u031b\5\u0096L\2\u0306\u031b\5\u0098M\2")
        buf.write("\u0307\u031b\5\u009cO\2\u0308\u031b\5\u009eP\2\u0309\u031b")
        buf.write("\5\u00a0Q\2\u030a\u031b\5\u00a2R\2\u030b\u031b\5\u00a4")
        buf.write("S\2\u030c\u031b\5\u00b0Y\2\u030d\u031b\5\u00a6T\2\u030e")
        buf.write("\u031b\5\u00b2Z\2\u030f\u031b\5\u00b4[\2\u0310\u031b\5")
        buf.write("\u00ba^\2\u0311\u031b\5\u00bc_\2\u0312\u031b\5\u0104\u0083")
        buf.write("\2\u0313\u031b\5\u00d2j\2\u0314\u031b\5\u008cG\2\u0315")
        buf.write("\u031b\5X-\2\u0316\u031b\5b\62\2\u0317\u031b\5\u0094K")
        buf.write("\2\u0318\u0319\7c\2\2\u0319\u031b\5|?\2\u031a\u02fc\3")
        buf.write("\2\2\2\u031a\u02fd\3\2\2\2\u031a\u02fe\3\2\2\2\u031a\u02ff")
        buf.write("\3\2\2\2\u031a\u0300\3\2\2\2\u031a\u0301\3\2\2\2\u031a")
        buf.write("\u0302\3\2\2\2\u031a\u0303\3\2\2\2\u031a\u0304\3\2\2\2")
        buf.write("\u031a\u0305\3\2\2\2\u031a\u0306\3\2\2\2\u031a\u0307\3")
        buf.write("\2\2\2\u031a\u0308\3\2\2\2\u031a\u0309\3\2\2\2\u031a\u030a")
        buf.write("\3\2\2\2\u031a\u030b\3\2\2\2\u031a\u030c\3\2\2\2\u031a")
        buf.write("\u030d\3\2\2\2\u031a\u030e\3\2\2\2\u031a\u030f\3\2\2\2")
        buf.write("\u031a\u0310\3\2\2\2\u031a\u0311\3\2\2\2\u031a\u0312\3")
        buf.write("\2\2\2\u031a\u0313\3\2\2\2\u031a\u0314\3\2\2\2\u031a\u0315")
        buf.write("\3\2\2\2\u031a\u0316\3\2\2\2\u031a\u0317\3\2\2\2\u031a")
        buf.write("\u0318\3\2\2\2\u031b}\3\2\2\2\u031c\u031e\7\n\2\2\u031d")
        buf.write("\u031f\5\u0080A\2\u031e\u031d\3\2\2\2\u031e\u031f\3\2")
        buf.write("\2\2\u031f\u0320\3\2\2\2\u0320\u0321\7\f\2\2\u0321\177")
        buf.write("\3\2\2\2\u0322\u0324\5|?\2\u0323\u0322\3\2\2\2\u0324\u0325")
        buf.write("\3\2\2\2\u0325\u0323\3\2\2\2\u0325\u0326\3\2\2\2\u0326")
        buf.write("\u0081\3\2\2\2\u0327\u032b\7{\2\2\u0328\u0329\7~\2\2\u0329")
        buf.write("\u032c\5@!\2\u032a\u032c\5\u008cG\2\u032b\u0328\3\2\2")
        buf.write("\2\u032b\u032a\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032e")
        buf.write("\5\u0120\u0091\2\u032e\u0083\3\2\2\2\u032f\u0332\7d\2")
        buf.write("\2\u0330\u0333\5\u0086D\2\u0331\u0333\5n8\2\u0332\u0330")
        buf.write("\3\2\2\2\u0332\u0331\3\2\2\2\u0333\u0085\3\2\2\2\u0334")
        buf.write("\u0337\7\32\2\2\u0335\u0337\5\u0088E\2\u0336\u0334\3\2")
        buf.write("\2\2\u0336\u0335\3\2\2\2\u0337\u033a\3\2\2\2\u0338\u0339")
        buf.write("\7Z\2\2\u0339\u033b\5\u0114\u008b\2\u033a\u0338\3\2\2")
        buf.write("\2\u033a\u033b\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033d")
        buf.write("\7[\2\2\u033d\u033e\7\177\2\2\u033e\u033f\5\u0120\u0091")
        buf.write("\2\u033f\u0087\3\2\2\2\u0340\u0341\5\u0114\u008b\2\u0341")
        buf.write("\u0342\7\16\2\2\u0342\u0344\3\2\2\2\u0343\u0340\3\2\2")
        buf.write("\2\u0343\u0344\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0346")
        buf.write("\7\n\2\2\u0346\u034b\5\u0114\u008b\2\u0347\u0348\7\16")
        buf.write("\2\2\u0348\u034a\5\u0114\u008b\2\u0349\u0347\3\2\2\2\u034a")
        buf.write("\u034d\3\2\2\2\u034b\u0349\3\2\2\2\u034b\u034c\3\2\2\2")
        buf.write("\u034c\u034e\3\2\2\2\u034d\u034b\3\2\2\2\u034e\u034f\7")
        buf.write("\f\2\2\u034f\u0089\3\2\2\2\u0350\u0352\7c\2\2\u0351\u0353")
        buf.write("\7T\2\2\u0352\u0351\3\2\2\2\u0352\u0353\3\2\2\2\u0353")
        buf.write("\u0356\3\2\2\2\u0354\u0357\5\u0086D\2\u0355\u0357\5|?")
        buf.write("\2\u0356\u0354\3\2\2\2\u0356\u0355\3\2\2\2\u0357\u008b")
        buf.write("\3\2\2\2\u0358\u035a\5\4\3\2\u0359\u035b\5> \2\u035a\u0359")
        buf.write("\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035c\3\2\2\2\u035c")
        buf.write("\u035e\5\2\2\2\u035d\u035f\7\r\2\2\u035e\u035d\3\2\2\2")
        buf.write("\u035e\u035f\3\2\2\2\u035f\u0376\3\2\2\2\u0360\u0362\5")
        buf.write("N(\2\u0361\u0360\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0364")
        buf.write("\3\2\2\2\u0363\u0365\5\u009aN\2\u0364\u0363\3\2\2\2\u0364")
        buf.write("\u0365\3\2\2\2\u0365\u0367\3\2\2\2\u0366\u0368\7\\\2\2")
        buf.write("\u0367\u0366\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u0369\3")
        buf.write("\2\2\2\u0369\u036b\5\u008eH\2\u036a\u036c\7\r\2\2\u036b")
        buf.write("\u036a\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u0376\3\2\2\2")
        buf.write("\u036d\u036f\7z\2\2\u036e\u0370\5\u009aN\2\u036f\u036e")
        buf.write("\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0371\3\2\2\2\u0371")
        buf.write("\u0373\5\u008eH\2\u0372\u0374\7\r\2\2\u0373\u0372\3\2")
        buf.write("\2\2\u0373\u0374\3\2\2\2\u0374\u0376\3\2\2\2\u0375\u0358")
        buf.write("\3\2\2\2\u0375\u0361\3\2\2\2\u0375\u036d\3\2\2\2\u0376")
        buf.write("\u008d\3\2\2\2\u0377\u037c\5\u0090I\2\u0378\u0379\7\16")
        buf.write("\2\2\u0379\u037b\5\u0090I\2\u037a\u0378\3\2\2\2\u037b")
        buf.write("\u037e\3\2\2\2\u037c\u037a\3\2\2\2\u037c\u037d\3\2\2\2")
        buf.write("\u037d\u008f\3\2\2\2\u037e\u037c\3\2\2\2\u037f\u0383\5")
        buf.write("\u0116\u008c\2\u0380\u0383\5\u00e6t\2\u0381\u0383\5\u00ec")
        buf.write("w\2\u0382\u037f\3\2\2\2\u0382\u0380\3\2\2\2\u0382\u0381")
        buf.write("\3\2\2\2\u0383\u0385\3\2\2\2\u0384\u0386\5> \2\u0385\u0384")
        buf.write("\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0388\3\2\2\2\u0387")
        buf.write("\u0389\5\u0100\u0081\2\u0388\u0387\3\2\2\2\u0388\u0389")
        buf.write("\3\2\2\2\u0389\u038f\3\2\2\2\u038a\u038c\7\17\2\2\u038b")
        buf.write("\u038d\5\6\4\2\u038c\u038b\3\2\2\2\u038c\u038d\3\2\2\2")
        buf.write("\u038d\u038e\3\2\2\2\u038e\u0390\5\u0100\u0081\2\u038f")
        buf.write("\u038a\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0091\3\2\2\2")
        buf.write("\u0391\u0392\7\r\2\2\u0392\u0093\3\2\2\2\u0393\u0394\6")
        buf.write("K\b\2\u0394\u0396\5\u00fc\177\2\u0395\u0397\7\r\2\2\u0396")
        buf.write("\u0395\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u0095\3\2\2\2")
        buf.write("\u0398\u0399\7U\2\2\u0399\u039a\7\b\2\2\u039a\u039b\5")
        buf.write("\u00fc\177\2\u039b\u039c\7\t\2\2\u039c\u039f\5|?\2\u039d")
        buf.write("\u039e\7E\2\2\u039e\u03a0\5|?\2\u039f\u039d\3\2\2\2\u039f")
        buf.write("\u03a0\3\2\2\2\u03a0\u0097\3\2\2\2\u03a1\u03a2\7A\2\2")
        buf.write("\u03a2\u03a3\5|?\2\u03a3\u03a4\7O\2\2\u03a4\u03a5\7\b")
        buf.write("\2\2\u03a5\u03a6\5\u00fc\177\2\u03a6\u03a7\7\t\2\2\u03a7")
        buf.write("\u03a8\5\u0120\u0091\2\u03a8\u03e7\3\2\2\2\u03a9\u03aa")
        buf.write("\7O\2\2\u03aa\u03ab\7\b\2\2\u03ab\u03ac\5\u00fc\177\2")
        buf.write("\u03ac\u03ad\7\t\2\2\u03ad\u03ae\5|?\2\u03ae\u03e7\3\2")
        buf.write("\2\2\u03af\u03b0\7M\2\2\u03b0\u03b2\7\b\2\2\u03b1\u03b3")
        buf.write("\5\u00fc\177\2\u03b2\u03b1\3\2\2\2\u03b2\u03b3\3\2\2\2")
        buf.write("\u03b3\u03b4\3\2\2\2\u03b4\u03b6\7\r\2\2\u03b5\u03b7\5")
        buf.write("\u00fc\177\2\u03b6\u03b5\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7")
        buf.write("\u03b8\3\2\2\2\u03b8\u03ba\7\r\2\2\u03b9\u03bb\5\u00fc")
        buf.write("\177\2\u03ba\u03b9\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bc")
        buf.write("\3\2\2\2\u03bc\u03bd\7\t\2\2\u03bd\u03e7\5|?\2\u03be\u03bf")
        buf.write("\7M\2\2\u03bf\u03c0\7\b\2\2\u03c0\u03c1\5\u009aN\2\u03c1")
        buf.write("\u03c2\5\u008eH\2\u03c2\u03c4\7\r\2\2\u03c3\u03c5\5\u00fc")
        buf.write("\177\2\u03c4\u03c3\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c6")
        buf.write("\3\2\2\2\u03c6\u03c8\7\r\2\2\u03c7\u03c9\5\u00fc\177\2")
        buf.write("\u03c8\u03c7\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03ca\3")
        buf.write("\2\2\2\u03ca\u03cb\7\t\2\2\u03cb\u03cc\5|?\2\u03cc\u03e7")
        buf.write("\3\2\2\2\u03cd\u03ce\7M\2\2\u03ce\u03cf\7\b\2\2\u03cf")
        buf.write("\u03d3\5\u0100\u0081\2\u03d0\u03d4\7X\2\2\u03d1\u03d2")
        buf.write("\7~\2\2\u03d2\u03d4\6M\t\2\u03d3\u03d0\3\2\2\2\u03d3\u03d1")
        buf.write("\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\5\u00fc\177\2")
        buf.write("\u03d6\u03d7\7\t\2\2\u03d7\u03d8\5|?\2\u03d8\u03e7\3\2")
        buf.write("\2\2\u03d9\u03da\7M\2\2\u03da\u03db\7\b\2\2\u03db\u03dc")
        buf.write("\5\u009aN\2\u03dc\u03e0\5\u0090I\2\u03dd\u03e1\7X\2\2")
        buf.write("\u03de\u03df\7~\2\2\u03df\u03e1\6M\n\2\u03e0\u03dd\3\2")
        buf.write("\2\2\u03e0\u03de\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e3")
        buf.write("\5\u00fc\177\2\u03e3\u03e4\7\t\2\2\u03e4\u03e5\5|?\2\u03e5")
        buf.write("\u03e7\3\2\2\2\u03e6\u03a1\3\2\2\2\u03e6\u03a9\3\2\2\2")
        buf.write("\u03e6\u03af\3\2\2\2\u03e6\u03be\3\2\2\2\u03e6\u03cd\3")
        buf.write("\2\2\2\u03e6\u03d9\3\2\2\2\u03e7\u0099\3\2\2\2\u03e8\u03e9")
        buf.write("\t\6\2\2\u03e9\u009b\3\2\2\2\u03ea\u03ed\7L\2\2\u03eb")
        buf.write("\u03ec\6O\13\2\u03ec\u03ee\7~\2\2\u03ed\u03eb\3\2\2\2")
        buf.write("\u03ed\u03ee\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f0\5")
        buf.write("\u0120\u0091\2\u03f0\u009d\3\2\2\2\u03f1\u03f4\7@\2\2")
        buf.write("\u03f2\u03f3\6P\f\2\u03f3\u03f5\7~\2\2\u03f4\u03f2\3\2")
        buf.write("\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7")
        buf.write("\5\u0120\u0091\2\u03f7\u009f\3\2\2\2\u03f8\u03fb\7J\2")
        buf.write("\2\u03f9\u03fa\6Q\r\2\u03fa\u03fc\5\u00fc\177\2\u03fb")
        buf.write("\u03f9\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd\3\2\2\2")
        buf.write("\u03fd\u03fe\5\u0120\u0091\2\u03fe\u00a1\3\2\2\2\u03ff")
        buf.write("\u0402\7m\2\2\u0400\u0401\6R\16\2\u0401\u0403\5\u00fc")
        buf.write("\177\2\u0402\u0400\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u0404")
        buf.write("\3\2\2\2\u0404\u0405\5\u0120\u0091\2\u0405\u00a3\3\2\2")
        buf.write("\2\u0406\u0407\7S\2\2\u0407\u0408\7\b\2\2\u0408\u0409")
        buf.write("\5\u00fc\177\2\u0409\u040a\7\t\2\2\u040a\u040b\5|?\2\u040b")
        buf.write("\u00a5\3\2\2\2\u040c\u040d\7N\2\2\u040d\u040e\7\b\2\2")
        buf.write("\u040e\u040f\5\u00fc\177\2\u040f\u0410\7\t\2\2\u0410\u0411")
        buf.write("\5\u00a8U\2\u0411\u00a7\3\2\2\2\u0412\u0414\7\n\2\2\u0413")
        buf.write("\u0415\5\u00aaV\2\u0414\u0413\3\2\2\2\u0414\u0415\3\2")
        buf.write("\2\2\u0415\u041a\3\2\2\2\u0416\u0418\5\u00aeX\2\u0417")
        buf.write("\u0419\5\u00aaV\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2")
        buf.write("\2\2\u0419\u041b\3\2\2\2\u041a\u0416\3\2\2\2\u041a\u041b")
        buf.write("\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041d\7\f\2\2\u041d")
        buf.write("\u00a9\3\2\2\2\u041e\u0420\5\u00acW\2\u041f\u041e\3\2")
        buf.write("\2\2\u0420\u0421\3\2\2\2\u0421\u041f\3\2\2\2\u0421\u0422")
        buf.write("\3\2\2\2\u0422\u00ab\3\2\2\2\u0423\u0424\7D\2\2\u0424")
        buf.write("\u0425\5\u00fc\177\2\u0425\u0427\7\21\2\2\u0426\u0428")
        buf.write("\5\u0080A\2\u0427\u0426\3\2\2\2\u0427\u0428\3\2\2\2\u0428")
        buf.write("\u00ad\3\2\2\2\u0429\u042a\7T\2\2\u042a\u042c\7\21\2\2")
        buf.write("\u042b\u042d\5\u0080A\2\u042c\u042b\3\2\2\2\u042c\u042d")
        buf.write("\3\2\2\2\u042d\u00af\3\2\2\2\u042e\u042f\7~\2\2\u042f")
        buf.write("\u0430\7\21\2\2\u0430\u0431\5|?\2\u0431\u00b1\3\2\2\2")
        buf.write("\u0432\u0433\7V\2\2\u0433\u0434\6Z\17\2\u0434\u0435\5")
        buf.write("\u00fc\177\2\u0435\u0436\5\u0120\u0091\2\u0436\u00b3\3")
        buf.write("\2\2\2\u0437\u0438\7Y\2\2\u0438\u043e\5~@\2\u0439\u043b")
        buf.write("\5\u00b6\\\2\u043a\u043c\5\u00b8]\2\u043b\u043a\3\2\2")
        buf.write("\2\u043b\u043c\3\2\2\2\u043c\u043f\3\2\2\2\u043d\u043f")
        buf.write("\5\u00b8]\2\u043e\u0439\3\2\2\2\u043e\u043d\3\2\2\2\u043f")
        buf.write("\u00b5\3\2\2\2\u0440\u0441\7H\2\2\u0441\u0442\7\b\2\2")
        buf.write("\u0442\u0443\7~\2\2\u0443\u0444\7\t\2\2\u0444\u0445\5")
        buf.write("~@\2\u0445\u00b7\3\2\2\2\u0446\u0447\7I\2\2\u0447\u0448")
        buf.write("\5~@\2\u0448\u00b9\3\2\2\2\u0449\u044a\7P\2\2\u044a\u044b")
        buf.write("\5\u0120\u0091\2\u044b\u00bb\3\2\2\2\u044c\u044d\7Q\2")
        buf.write("\2\u044d\u044e\7~\2\2\u044e\u0454\5@!\2\u044f\u0450\7")
        buf.write("\n\2\2\u0450\u0451\5\u00e2r\2\u0451\u0452\7\f\2\2\u0452")
        buf.write("\u0455\3\2\2\2\u0453\u0455\7\r\2\2\u0454\u044f\3\2\2\2")
        buf.write("\u0454\u0453\3\2\2\2\u0455\u00bd\3\2\2\2\u0456\u0458\7")
        buf.write("{\2\2\u0457\u0456\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u0459")
        buf.write("\3\2\2\2\u0459\u045a\7^\2\2\u045a\u045c\7~\2\2\u045b\u045d")
        buf.write("\5\6\4\2\u045c\u045b\3\2\2\2\u045c\u045d\3\2\2\2\u045d")
        buf.write("\u045e\3\2\2\2\u045e\u045f\5\u00c0a\2\u045f\u0460\5\u00c2")
        buf.write("b\2\u0460\u00bf\3\2\2\2\u0461\u0463\5\u00c4c\2\u0462\u0461")
        buf.write("\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u0465\3\2\2\2\u0464")
        buf.write("\u0466\5\u00c6d\2\u0465\u0464\3\2\2\2\u0465\u0466\3\2")
        buf.write("\2\2\u0466\u00c1\3\2\2\2\u0467\u046b\7\n\2\2\u0468\u046a")
        buf.write("\5\u00c8e\2\u0469\u0468\3\2\2\2\u046a\u046d\3\2\2\2\u046b")
        buf.write("\u0469\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\3\2\2\2")
        buf.write("\u046d\u046b\3\2\2\2\u046e\u046f\7\f\2\2\u046f\u00c3\3")
        buf.write("\2\2\2\u0470\u0471\7`\2\2\u0471\u0472\5\34\17\2\u0472")
        buf.write("\u00c5\3\2\2\2\u0473\u0474\7e\2\2\u0474\u0475\5`\61\2")
        buf.write("\u0475\u00c7\3\2\2\2\u0476\u047e\5Z.\2\u0477\u0479\5p")
        buf.write("9\2\u0478\u0477\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047a")
        buf.write("\3\2\2\2\u047a\u047e\5\u00caf\2\u047b\u047e\5\u00ceh\2")
        buf.write("\u047c\u047e\5|?\2\u047d\u0476\3\2\2\2\u047d\u0478\3\2")
        buf.write("\2\2\u047d\u047b\3\2\2\2\u047d\u047c\3\2\2\2\u047e\u00c9")
        buf.write("\3\2\2\2\u047f\u0480\5\u00ccg\2\u0480\u0482\5\u00f4{\2")
        buf.write("\u0481\u0483\7\20\2\2\u0482\u0481\3\2\2\2\u0482\u0483")
        buf.write("\3\2\2\2\u0483\u0485\3\2\2\2\u0484\u0486\5> \2\u0485\u0484")
        buf.write("\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u0488\3\2\2\2\u0487")
        buf.write("\u0489\5\2\2\2\u0488\u0487\3\2\2\2\u0488\u0489\3\2\2\2")
        buf.write("\u0489\u048a\3\2\2\2\u048a\u048b\7\r\2\2\u048b\u049d\3")
        buf.write("\2\2\2\u048c\u048d\5\u00ccg\2\u048d\u048e\5\u00f4{\2\u048e")
        buf.write("\u0494\5@!\2\u048f\u0490\7\n\2\2\u0490\u0491\5\u00e2r")
        buf.write("\2\u0491\u0492\7\f\2\2\u0492\u0495\3\2\2\2\u0493\u0495")
        buf.write("\7\r\2\2\u0494\u048f\3\2\2\2\u0494\u0493\3\2\2\2\u0495")
        buf.write("\u049d\3\2\2\2\u0496\u0499\5\u00ccg\2\u0497\u049a\5\u00f0")
        buf.write("y\2\u0498\u049a\5\u00f2z\2\u0499\u0497\3\2\2\2\u0499\u0498")
        buf.write("\3\2\2\2\u049a\u049d\3\2\2\2\u049b\u049d\5\u0082B\2\u049c")
        buf.write("\u047f\3\2\2\2\u049c\u048c\3\2\2\2\u049c\u0496\3\2\2\2")
        buf.write("\u049c\u049b\3\2\2\2\u049d\u00cb\3\2\2\2\u049e\u04a0\7")
        buf.write("]\2\2\u049f\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a2")
        buf.write("\3\2\2\2\u04a1\u04a3\5N(\2\u04a2\u04a1\3\2\2\2\u04a2\u04a3")
        buf.write("\3\2\2\2\u04a3\u04a5\3\2\2\2\u04a4\u04a6\7l\2\2\u04a5")
        buf.write("\u04a4\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04a8\3\2\2\2")
        buf.write("\u04a7\u04a9\7\\\2\2\u04a8\u04a7\3\2\2\2\u04a8\u04a9\3")
        buf.write("\2\2\2\u04a9\u00cd\3\2\2\2\u04aa\u04ab\5T+\2\u04ab\u04ac")
        buf.write("\7\r\2\2\u04ac\u00cf\3\2\2\2\u04ad\u04af\7\32\2\2\u04ae")
        buf.write("\u04ad\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b0\3\2\2\2")
        buf.write("\u04b0\u04b1\7~\2\2\u04b1\u04b3\7\b\2\2\u04b2\u04b4\5")
        buf.write("\u00dco\2\u04b3\u04b2\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4")
        buf.write("\u04b5\3\2\2\2\u04b5\u04b6\7\t\2\2\u04b6\u04b7\7\n\2\2")
        buf.write("\u04b7\u04b8\5\u00e2r\2\u04b8\u04b9\7\f\2\2\u04b9\u00d1")
        buf.write("\3\2\2\2\u04ba\u04bb\7Q\2\2\u04bb\u04bd\7\32\2\2\u04bc")
        buf.write("\u04be\7~\2\2\u04bd\u04bc\3\2\2\2\u04bd\u04be\3\2\2\2")
        buf.write("\u04be\u04bf\3\2\2\2\u04bf\u04c1\7\b\2\2\u04c0\u04c2\5")
        buf.write("\u00dco\2\u04c1\u04c0\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2")
        buf.write("\u04c3\3\2\2\2\u04c3\u04c4\7\t\2\2\u04c4\u04c5\7\n\2\2")
        buf.write("\u04c5\u04c6\5\u00e2r\2\u04c6\u04c7\7\f\2\2\u04c7\u00d3")
        buf.write("\3\2\2\2\u04c8\u04c9\7\n\2\2\u04c9\u04ce\5\u00d6l\2\u04ca")
        buf.write("\u04cb\7\16\2\2\u04cb\u04cd\5\u00d6l\2\u04cc\u04ca\3\2")
        buf.write("\2\2\u04cd\u04d0\3\2\2\2\u04ce\u04cc\3\2\2\2\u04ce\u04cf")
        buf.write("\3\2\2\2\u04cf\u04d2\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d1")
        buf.write("\u04d3\7\16\2\2\u04d2\u04d1\3\2\2\2\u04d2\u04d3\3\2\2")
        buf.write("\2\u04d3\u04d4\3\2\2\2\u04d4\u04d5\7\f\2\2\u04d5\u00d5")
        buf.write("\3\2\2\2\u04d6\u04d7\7\32\2\2\u04d7\u04d8\5\u00dan\2\u04d8")
        buf.write("\u00d7\3\2\2\2\u04d9\u04da\7\n\2\2\u04da\u04df\5\u00da")
        buf.write("n\2\u04db\u04dc\7\16\2\2\u04dc\u04de\5\u00dan\2\u04dd")
        buf.write("\u04db\3\2\2\2\u04de\u04e1\3\2\2\2\u04df\u04dd\3\2\2\2")
        buf.write("\u04df\u04e0\3\2\2\2\u04e0\u04e3\3\2\2\2\u04e1\u04df\3")
        buf.write("\2\2\2\u04e2\u04e4\7\16\2\2\u04e3\u04e2\3\2\2\2\u04e3")
        buf.write("\u04e4\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e6\7\f\2\2")
        buf.write("\u04e6\u00d9\3\2\2\2\u04e7\u04e8\7\6\2\2\u04e8\u04e9\5")
        buf.write("\u0100\u0081\2\u04e9\u04ea\7\7\2\2\u04ea\u04ec\7\b\2\2")
        buf.write("\u04eb\u04ed\5\u00dco\2\u04ec\u04eb\3\2\2\2\u04ec\u04ed")
        buf.write("\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04ef\7\t\2\2\u04ef")
        buf.write("\u04f0\7\n\2\2\u04f0\u04f1\5\u00e2r\2\u04f1\u04f2\7\f")
        buf.write("\2\2\u04f2\u00db\3\2\2\2\u04f3\u04f8\5\u00dep\2\u04f4")
        buf.write("\u04f5\7\16\2\2\u04f5\u04f7\5\u00dep\2\u04f6\u04f4\3\2")
        buf.write("\2\2\u04f7\u04fa\3\2\2\2\u04f8\u04f6\3\2\2\2\u04f8\u04f9")
        buf.write("\3\2\2\2\u04f9\u04fd\3\2\2\2\u04fa\u04f8\3\2\2\2\u04fb")
        buf.write("\u04fc\7\16\2\2\u04fc\u04fe\5\u00e0q\2\u04fd\u04fb\3\2")
        buf.write("\2\2\u04fd\u04fe\3\2\2\2\u04fe\u0507\3\2\2\2\u04ff\u0507")
        buf.write("\5\u00e0q\2\u0500\u0507\5\u00e6t\2\u0501\u0504\5\u00ec")
        buf.write("w\2\u0502\u0503\7\21\2\2\u0503\u0505\5\u00dco\2\u0504")
        buf.write("\u0502\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0507\3\2\2\2")
        buf.write("\u0506\u04f3\3\2\2\2\u0506\u04ff\3\2\2\2\u0506\u0500\3")
        buf.write("\2\2\2\u0506\u0501\3\2\2\2\u0507\u00dd\3\2\2\2\u0508\u050a")
        buf.write("\5r:\2\u0509\u0508\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050c")
        buf.write("\3\2\2\2\u050b\u050d\5N(\2\u050c\u050b\3\2\2\2\u050c\u050d")
        buf.write("\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u0510\5\u0116\u008c")
        buf.write("\2\u050f\u0511\7\20\2\2\u0510\u050f\3\2\2\2\u0510\u0511")
        buf.write("\3\2\2\2\u0511\u0513\3\2\2\2\u0512\u0514\5> \2\u0513\u0512")
        buf.write("\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0517\3\2\2\2\u0515")
        buf.write("\u0516\7\17\2\2\u0516\u0518\5\u0100\u0081\2\u0517\u0515")
        buf.write("\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u00df\3\2\2\2\u0519")
        buf.write("\u051a\7\22\2\2\u051a\u051b\7~\2\2\u051b\u00e1\3\2\2\2")
        buf.write("\u051c\u051e\5\u00e4s\2\u051d\u051c\3\2\2\2\u051d\u051e")
        buf.write("\3\2\2\2\u051e\u00e3\3\2\2\2\u051f\u0521\5z>\2\u0520\u051f")
        buf.write("\3\2\2\2\u0521\u0522\3\2\2\2\u0522\u0520\3\2\2\2\u0522")
        buf.write("\u0523\3\2\2\2\u0523\u00e5\3\2\2\2\u0524\u0526\7\6\2\2")
        buf.write("\u0525\u0527\5\u00e8u\2\u0526\u0525\3\2\2\2\u0526\u0527")
        buf.write("\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u0529\7\7\2\2\u0529")
        buf.write("\u00e7\3\2\2\2\u052a\u0533\5\u00eav\2\u052b\u052d\7\16")
        buf.write("\2\2\u052c\u052b\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u052c")
        buf.write("\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u0530\3\2\2\2\u0530")
        buf.write("\u0532\5\u00eav\2\u0531\u052c\3\2\2\2\u0532\u0535\3\2")
        buf.write("\2\2\u0533\u0531\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u00e9")
        buf.write("\3\2\2\2\u0535\u0533\3\2\2\2\u0536\u0538\7\22\2\2\u0537")
        buf.write("\u0536\3\2\2\2\u0537\u0538\3\2\2\2\u0538\u053b\3\2\2\2")
        buf.write("\u0539\u053c\5\u0100\u0081\2\u053a\u053c\7~\2\2\u053b")
        buf.write("\u0539\3\2\2\2\u053b\u053a\3\2\2\2\u053c\u053e\3\2\2\2")
        buf.write("\u053d\u053f\7\16\2\2\u053e\u053d\3\2\2\2\u053e\u053f")
        buf.write("\3\2\2\2\u053f\u00eb\3\2\2\2\u0540\u0549\7\n\2\2\u0541")
        buf.write("\u0546\5\u00eex\2\u0542\u0543\7\16\2\2\u0543\u0545\5\u00ee")
        buf.write("x\2\u0544\u0542\3\2\2\2\u0545\u0548\3\2\2\2\u0546\u0544")
        buf.write("\3\2\2\2\u0546\u0547\3\2\2\2\u0547\u054a\3\2\2\2\u0548")
        buf.write("\u0546\3\2\2\2\u0549\u0541\3\2\2\2\u0549\u054a\3\2\2\2")
        buf.write("\u054a\u054c\3\2\2\2\u054b\u054d\7\16\2\2\u054c\u054b")
        buf.write("\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u054e\3\2\2\2\u054e")
        buf.write("\u054f\7\f\2\2\u054f\u00ed\3\2\2\2\u0550\u0551\5\u00f4")
        buf.write("{\2\u0551\u0552\t\7\2\2\u0552\u0553\5\u0100\u0081\2\u0553")
        buf.write("\u0560\3\2\2\2\u0554\u0555\7\6\2\2\u0555\u0556\5\u0100")
        buf.write("\u0081\2\u0556\u0557\7\7\2\2\u0557\u0558\7\21\2\2\u0558")
        buf.write("\u0559\5\u0100\u0081\2\u0559\u0560\3\2\2\2\u055a\u0560")
        buf.write("\5\u00f0y\2\u055b\u0560\5\u00f2z\2\u055c\u0560\5\u00d0")
        buf.write("i\2\u055d\u0560\5\u0116\u008c\2\u055e\u0560\5J&\2\u055f")
        buf.write("\u0550\3\2\2\2\u055f\u0554\3\2\2\2\u055f\u055a\3\2\2\2")
        buf.write("\u055f\u055b\3\2\2\2\u055f\u055c\3\2\2\2\u055f\u055d\3")
        buf.write("\2\2\2\u055f\u055e\3\2\2\2\u0560\u00ef\3\2\2\2\u0561\u0562")
        buf.write("\5\u011c\u008f\2\u0562\u0563\7\b\2\2\u0563\u0565\7\t\2")
        buf.write("\2\u0564\u0566\5> \2\u0565\u0564\3\2\2\2\u0565\u0566\3")
        buf.write("\2\2\2\u0566\u0567\3\2\2\2\u0567\u0568\7\n\2\2\u0568\u0569")
        buf.write("\5\u00e2r\2\u0569\u056a\7\f\2\2\u056a\u00f1\3\2\2\2\u056b")
        buf.write("\u056c\5\u011e\u0090\2\u056c\u056f\7\b\2\2\u056d\u0570")
        buf.write("\7~\2\2\u056e\u0570\5\4\3\2\u056f\u056d\3\2\2\2\u056f")
        buf.write("\u056e\3\2\2\2\u0570\u0572\3\2\2\2\u0571\u0573\5> \2\u0572")
        buf.write("\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0574\3\2\2\2")
        buf.write("\u0574\u0575\7\t\2\2\u0575\u0576\7\n\2\2\u0576\u0577\5")
        buf.write("\u00e2r\2\u0577\u0578\7\f\2\2\u0578\u00f3\3\2\2\2\u0579")
        buf.write("\u057d\5\u0114\u008b\2\u057a\u057d\7\177\2\2\u057b\u057d")
        buf.write("\5\u0112\u008a\2\u057c\u0579\3\2\2\2\u057c\u057a\3\2\2")
        buf.write("\2\u057c\u057b\3\2\2\2\u057d\u00f5\3\2\2\2\u057e\u0583")
        buf.write("\7\b\2\2\u057f\u0581\5\u00f8}\2\u0580\u0582\7\16\2\2\u0581")
        buf.write("\u0580\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0584\3\2\2\2")
        buf.write("\u0583\u057f\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0585\3")
        buf.write("\2\2\2\u0585\u0586\7\t\2\2\u0586\u00f7\3\2\2\2\u0587\u058c")
        buf.write("\5\u00fa~\2\u0588\u0589\7\16\2\2\u0589\u058b\5\u00fa~")
        buf.write("\2\u058a\u0588\3\2\2\2\u058b\u058e\3\2\2\2\u058c\u058a")
        buf.write("\3\2\2\2\u058c\u058d\3\2\2\2\u058d\u00f9\3\2\2\2\u058e")
        buf.write("\u058c\3\2\2\2\u058f\u0591\7\22\2\2\u0590\u058f\3\2\2")
        buf.write("\2\u0590\u0591\3\2\2\2\u0591\u0594\3\2\2\2\u0592\u0595")
        buf.write("\5\u0100\u0081\2\u0593\u0595\7~\2\2\u0594\u0592\3\2\2")
        buf.write("\2\u0594\u0593\3\2\2\2\u0595\u00fb\3\2\2\2\u0596\u059b")
        buf.write("\5\u0100\u0081\2\u0597\u0598\7\16\2\2\u0598\u059a\5\u0100")
        buf.write("\u0081\2\u0599\u0597\3\2\2\2\u059a\u059d\3\2\2\2\u059b")
        buf.write("\u0599\3\2\2\2\u059b\u059c\3\2\2\2\u059c\u00fd\3\2\2\2")
        buf.write("\u059d\u059b\3\2\2\2\u059e\u05a0\7Q\2\2\u059f\u05a1\7")
        buf.write("~\2\2\u05a0\u059f\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a2")
        buf.write("\3\2\2\2\u05a2\u05a4\7\b\2\2\u05a3\u05a5\5\u00dco\2\u05a4")
        buf.write("\u05a3\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5\u05a6\3\2\2\2")
        buf.write("\u05a6\u05a8\7\t\2\2\u05a7\u05a9\5> \2\u05a8\u05a7\3\2")
        buf.write("\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa\u05ab")
        buf.write("\7\n\2\2\u05ab\u05ac\5\u00e2r\2\u05ac\u05ad\7\f\2\2\u05ad")
        buf.write("\u00ff\3\2\2\2\u05ae\u05af\b\u0081\1\2\u05af\u05ea\5\u00fe")
        buf.write("\u0080\2\u05b0\u05ea\5\u0104\u0083\2\u05b1\u05b3\7^\2")
        buf.write("\2\u05b2\u05b4\7~\2\2\u05b3\u05b2\3\2\2\2\u05b3\u05b4")
        buf.write("\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05ea\5\u00c2b\2\u05b6")
        buf.write("\u05b7\7F\2\2\u05b7\u05b9\5\u0100\u0081\2\u05b8\u05ba")
        buf.write("\5\16\b\2\u05b9\u05b8\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba")
        buf.write("\u05bb\3\2\2\2\u05bb\u05bc\5\u00f6|\2\u05bc\u05ea\3\2")
        buf.write("\2\2\u05bd\u05be\7F\2\2\u05be\u05c0\5\u0100\u0081\2\u05bf")
        buf.write("\u05c1\5\16\b\2\u05c0\u05bf\3\2\2\2\u05c0\u05c1\3\2\2")
        buf.write("\2\u05c1\u05ea\3\2\2\2\u05c2\u05c3\7W\2\2\u05c3\u05ea")
        buf.write("\5\u0100\u0081(\u05c4\u05c5\7K\2\2\u05c5\u05ea\5\u0100")
        buf.write("\u0081\'\u05c6\u05c7\7C\2\2\u05c7\u05ea\5\u0100\u0081")
        buf.write("&\u05c8\u05c9\7\24\2\2\u05c9\u05ea\5\u0100\u0081%\u05ca")
        buf.write("\u05cb\7\25\2\2\u05cb\u05ea\5\u0100\u0081$\u05cc\u05cd")
        buf.write("\7\26\2\2\u05cd\u05ea\5\u0100\u0081#\u05ce\u05cf\7\27")
        buf.write("\2\2\u05cf\u05ea\5\u0100\u0081\"\u05d0\u05d1\7\30\2\2")
        buf.write("\u05d1\u05ea\5\u0100\u0081!\u05d2\u05d3\7\31\2\2\u05d3")
        buf.write("\u05ea\5\u0100\u0081 \u05d4\u05ea\5\u00d8m\2\u05d5\u05ea")
        buf.write("\5\u00d4k\2\u05d6\u05ea\5\u00d2j\2\u05d7\u05ea\5\u00a2")
        buf.write("R\2\u05d8\u05ea\7R\2\2\u05d9\u05db\5\u0114\u008b\2\u05da")
        buf.write("\u05dc\5\u0100\u0081\2\u05db\u05da\3\2\2\2\u05db\u05dc")
        buf.write("\3\2\2\2\u05dc\u05ea\3\2\2\2\u05dd\u05ea\7a\2\2\u05de")
        buf.write("\u05ea\5\u010c\u0087\2\u05df\u05ea\5\u00e6t\2\u05e0\u05ea")
        buf.write("\5\u00ecw\2\u05e1\u05e2\7\b\2\2\u05e2\u05e3\5\u00fc\177")
        buf.write("\2\u05e3\u05e4\7\t\2\2\u05e4\u05ea\3\2\2\2\u05e5\u05e7")
        buf.write("\5\16\b\2\u05e6\u05e8\5\u00fc\177\2\u05e7\u05e6\3\2\2")
        buf.write("\2\u05e7\u05e8\3\2\2\2\u05e8\u05ea\3\2\2\2\u05e9\u05ae")
        buf.write("\3\2\2\2\u05e9\u05b0\3\2\2\2\u05e9\u05b1\3\2\2\2\u05e9")
        buf.write("\u05b6\3\2\2\2\u05e9\u05bd\3\2\2\2\u05e9\u05c2\3\2\2\2")
        buf.write("\u05e9\u05c4\3\2\2\2\u05e9\u05c6\3\2\2\2\u05e9\u05c8\3")
        buf.write("\2\2\2\u05e9\u05ca\3\2\2\2\u05e9\u05cc\3\2\2\2\u05e9\u05ce")
        buf.write("\3\2\2\2\u05e9\u05d0\3\2\2\2\u05e9\u05d2\3\2\2\2\u05e9")
        buf.write("\u05d4\3\2\2\2\u05e9\u05d5\3\2\2\2\u05e9\u05d6\3\2\2\2")
        buf.write("\u05e9\u05d7\3\2\2\2\u05e9\u05d8\3\2\2\2\u05e9\u05d9\3")
        buf.write("\2\2\2\u05e9\u05dd\3\2\2\2\u05e9\u05de\3\2\2\2\u05e9\u05df")
        buf.write("\3\2\2\2\u05e9\u05e0\3\2\2\2\u05e9\u05e1\3\2\2\2\u05e9")
        buf.write("\u05e5\3\2\2\2\u05ea\u0636\3\2\2\2\u05eb\u05ec\f\37\2")
        buf.write("\2\u05ec\u05ed\t\b\2\2\u05ed\u0635\5\u0100\u0081 \u05ee")
        buf.write("\u05ef\f\36\2\2\u05ef\u05f0\t\t\2\2\u05f0\u0635\5\u0100")
        buf.write("\u0081\37\u05f1\u05f2\f\35\2\2\u05f2\u05f3\t\n\2\2\u05f3")
        buf.write("\u0635\5\u0100\u0081\36\u05f4\u05f5\f\34\2\2\u05f5\u05f6")
        buf.write("\t\13\2\2\u05f6\u0635\5\u0100\u0081\35\u05f7\u05f8\f\33")
        buf.write("\2\2\u05f8\u05f9\7B\2\2\u05f9\u0635\5\u0100\u0081\34\u05fa")
        buf.write("\u05fb\f\32\2\2\u05fb\u05fc\7X\2\2\u05fc\u0635\5\u0100")
        buf.write("\u0081\33\u05fd\u05fe\f\31\2\2\u05fe\u05ff\t\f\2\2\u05ff")
        buf.write("\u0635\5\u0100\u0081\32\u0600\u0601\f\30\2\2\u0601\u0602")
        buf.write("\7(\2\2\u0602\u0635\5\u0100\u0081\31\u0603\u0604\f\27")
        buf.write("\2\2\u0604\u0605\7)\2\2\u0605\u0635\5\u0100\u0081\30\u0606")
        buf.write("\u0607\f\26\2\2\u0607\u0608\7*\2\2\u0608\u0635\5\u0100")
        buf.write("\u0081\27\u0609\u060a\f\25\2\2\u060a\u060b\7+\2\2\u060b")
        buf.write("\u0635\5\u0100\u0081\26\u060c\u060d\f\24\2\2\u060d\u060e")
        buf.write("\7,\2\2\u060e\u0635\5\u0100\u0081\25\u060f\u0610\f\23")
        buf.write("\2\2\u0610\u0611\7\20\2\2\u0611\u0612\5\u0100\u0081\2")
        buf.write("\u0612\u0613\7\21\2\2\u0613\u0614\5\u0100\u0081\24\u0614")
        buf.write("\u0635\3\2\2\2\u0615\u0616\f\22\2\2\u0616\u0617\7\17\2")
        buf.write("\2\u0617\u0635\5\u0100\u0081\23\u0618\u0619\f\21\2\2\u0619")
        buf.write("\u061a\5\u010a\u0086\2\u061a\u061b\5\u0100\u0081\22\u061b")
        buf.write("\u0635\3\2\2\2\u061c\u061d\f/\2\2\u061d\u061e\7\6\2\2")
        buf.write("\u061e\u061f\5\u00fc\177\2\u061f\u0620\7\7\2\2\u0620\u0635")
        buf.write("\3\2\2\2\u0621\u0622\f.\2\2\u0622\u0623\7\23\2\2\u0623")
        buf.write("\u0625\5\u0114\u008b\2\u0624\u0626\5\36\20\2\u0625\u0624")
        buf.write("\3\2\2\2\u0625\u0626\3\2\2\2\u0626\u0635\3\2\2\2\u0627")
        buf.write("\u0628\f+\2\2\u0628\u0635\5\u00f6|\2\u0629\u062a\f*\2")
        buf.write("\2\u062a\u062b\6\u0081#\2\u062b\u0635\7\24\2\2\u062c\u062d")
        buf.write("\f)\2\2\u062d\u062e\6\u0081%\2\u062e\u0635\7\25\2\2\u062f")
        buf.write("\u0630\f\20\2\2\u0630\u0635\5\u010e\u0088\2\u0631\u0632")
        buf.write("\f\3\2\2\u0632\u0633\7Z\2\2\u0633\u0635\5\u0102\u0082")
        buf.write("\2\u0634\u05eb\3\2\2\2\u0634\u05ee\3\2\2\2\u0634\u05f1")
        buf.write("\3\2\2\2\u0634\u05f4\3\2\2\2\u0634\u05f7\3\2\2\2\u0634")
        buf.write("\u05fa\3\2\2\2\u0634\u05fd\3\2\2\2\u0634\u0600\3\2\2\2")
        buf.write("\u0634\u0603\3\2\2\2\u0634\u0606\3\2\2\2\u0634\u0609\3")
        buf.write("\2\2\2\u0634\u060c\3\2\2\2\u0634\u060f\3\2\2\2\u0634\u0615")
        buf.write("\3\2\2\2\u0634\u0618\3\2\2\2\u0634\u061c\3\2\2\2\u0634")
        buf.write("\u0621\3\2\2\2\u0634\u0627\3\2\2\2\u0634\u0629\3\2\2\2")
        buf.write("\u0634\u062c\3\2\2\2\u0634\u062f\3\2\2\2\u0634\u0631\3")
        buf.write("\2\2\2\u0635\u0638\3\2\2\2\u0636\u0634\3\2\2\2\u0636\u0637")
        buf.write("\3\2\2\2\u0637\u0101\3\2\2\2\u0638\u0636\3\2\2\2\u0639")
        buf.write("\u063c\5\32\16\2\u063a\u063b\7\6\2\2\u063b\u063d\7\7\2")
        buf.write("\2\u063c\u063a\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u0640")
        buf.write("\3\2\2\2\u063e\u0640\5\u0100\u0081\2\u063f\u0639\3\2\2")
        buf.write("\2\u063f\u063e\3\2\2\2\u0640\u0103\3\2\2\2\u0641\u0643")
        buf.write("\7]\2\2\u0642\u0641\3\2\2\2\u0642\u0643\3\2\2\2\u0643")
        buf.write("\u0644\3\2\2\2\u0644\u0646\5\u0106\u0084\2\u0645\u0647")
        buf.write("\5> \2\u0646\u0645\3\2\2\2\u0646\u0647\3\2\2\2\u0647\u0648")
        buf.write("\3\2\2\2\u0648\u0649\78\2\2\u0649\u064a\5\u0108\u0085")
        buf.write("\2\u064a\u0105\3\2\2\2\u064b\u0652\7~\2\2\u064c\u064e")
        buf.write("\7\b\2\2\u064d\u064f\5\u00dco\2\u064e\u064d\3\2\2\2\u064e")
        buf.write("\u064f\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0652\7\t\2\2")
        buf.write("\u0651\u064b\3\2\2\2\u0651\u064c\3\2\2\2\u0652\u0107\3")
        buf.write("\2\2\2\u0653\u0659\5\u0100\u0081\2\u0654\u0655\7\n\2\2")
        buf.write("\u0655\u0656\5\u00e2r\2\u0656\u0657\7\f\2\2\u0657\u0659")
        buf.write("\3\2\2\2\u0658\u0653\3\2\2\2\u0658\u0654\3\2\2\2\u0659")
        buf.write("\u0109\3\2\2\2\u065a\u065b\t\r\2\2\u065b\u010b\3\2\2\2")
        buf.write("\u065c\u0663\79\2\2\u065d\u0663\7:\2\2\u065e\u0663\7\177")
        buf.write("\2\2\u065f\u0663\5\u010e\u0088\2\u0660\u0663\7\5\2\2\u0661")
        buf.write("\u0663\5\u0112\u008a\2\u0662\u065c\3\2\2\2\u0662\u065d")
        buf.write("\3\2\2\2\u0662\u065e\3\2\2\2\u0662\u065f\3\2\2\2\u0662")
        buf.write("\u0660\3\2\2\2\u0662\u0661\3\2\2\2\u0663\u010d\3\2\2\2")
        buf.write("\u0664\u0668\7\u0080\2\2\u0665\u0667\5\u0110\u0089\2\u0666")
        buf.write("\u0665\3\2\2\2\u0667\u066a\3\2\2\2\u0668\u0666\3\2\2\2")
        buf.write("\u0668\u0669\3\2\2\2\u0669\u066b\3\2\2\2\u066a\u0668\3")
        buf.write("\2\2\2\u066b\u066c\7\u0080\2\2\u066c\u010f\3\2\2\2\u066d")
        buf.write("\u0673\7\u0087\2\2\u066e\u066f\7\u0086\2\2\u066f\u0670")
        buf.write("\5\u0100\u0081\2\u0670\u0671\7\13\2\2\u0671\u0673\3\2")
        buf.write("\2\2\u0672\u066d\3\2\2\2\u0672\u066e\3\2\2\2\u0673\u0111")
        buf.write("\3\2\2\2\u0674\u0675\t\16\2\2\u0675\u0113\3\2\2\2\u0676")
        buf.write("\u0679\7~\2\2\u0677\u0679\5\u0118\u008d\2\u0678\u0676")
        buf.write("\3\2\2\2\u0678\u0677\3\2\2\2\u0679\u0115\3\2\2\2\u067a")
        buf.write("\u067b\t\17\2\2\u067b\u0117\3\2\2\2\u067c\u0680\5\u011a")
        buf.write("\u008e\2\u067d\u0680\79\2\2\u067e\u0680\7:\2\2\u067f\u067c")
        buf.write("\3\2\2\2\u067f\u067d\3\2\2\2\u067f\u067e\3\2\2\2\u0680")
        buf.write("\u0119\3\2\2\2\u0681\u0682\t\20\2\2\u0682\u011b\3\2\2")
        buf.write("\2\u0683\u0684\7t\2\2\u0684\u0685\5\u00f4{\2\u0685\u011d")
        buf.write("\3\2\2\2\u0686\u0687\7u\2\2\u0687\u0688\5\u00f4{\2\u0688")
        buf.write("\u011f\3\2\2\2\u0689\u068e\7\r\2\2\u068a\u068e\7\2\2\3")
        buf.write("\u068b\u068e\6\u0091(\2\u068c\u068e\6\u0091)\2\u068d\u0689")
        buf.write("\3\2\2\2\u068d\u068a\3\2\2\2\u068d\u068b\3\2\2\2\u068d")
        buf.write("\u068c\3\2\2\2\u068e\u0121\3\2\2\2\u00d3\u0127\u012b\u0134")
        buf.write("\u0139\u013c\u0143\u014c\u0156\u0161\u0163\u0178\u0180")
        buf.write("\u0187\u018b\u019a\u019e\u01a2\u01a8\u01af\u01b9\u01bb")
        buf.write("\u01cb\u01cf\u01d3\u01db\u01df\u01ee\u01f2\u01f5\u01f9")
        buf.write("\u01fc\u0200\u0206\u020a\u020e\u0216\u021b\u021d\u0224")
        buf.write("\u0229\u022c\u022f\u0234\u0237\u023a\u023f\u0242\u0245")
        buf.write("\u0249\u024f\u0253\u0257\u025b\u0266\u026d\u0274\u0279")
        buf.write("\u0281\u0284\u0287\u028c\u028f\u0293\u029d\u02a1\u02a7")
        buf.write("\u02ad\u02b4\u02ba\u02c0\u02c8\u02cd\u02d8\u02dd\u02e5")
        buf.write("\u02ec\u02f3\u02f8\u031a\u031e\u0325\u032b\u0332\u0336")
        buf.write("\u033a\u0343\u034b\u0352\u0356\u035a\u035e\u0361\u0364")
        buf.write("\u0367\u036b\u036f\u0373\u0375\u037c\u0382\u0385\u0388")
        buf.write("\u038c\u038f\u0396\u039f\u03b2\u03b6\u03ba\u03c4\u03c8")
        buf.write("\u03d3\u03e0\u03e6\u03ed\u03f4\u03fb\u0402\u0414\u0418")
        buf.write("\u041a\u0421\u0427\u042c\u043b\u043e\u0454\u0457\u045c")
        buf.write("\u0462\u0465\u046b\u0478\u047d\u0482\u0485\u0488\u0494")
        buf.write("\u0499\u049c\u049f\u04a2\u04a5\u04a8\u04ae\u04b3\u04bd")
        buf.write("\u04c1\u04ce\u04d2\u04df\u04e3\u04ec\u04f8\u04fd\u0504")
        buf.write("\u0506\u0509\u050c\u0510\u0513\u0517\u051d\u0522\u0526")
        buf.write("\u052e\u0533\u0537\u053b\u053e\u0546\u0549\u054c\u055f")
        buf.write("\u0565\u056f\u0572\u057c\u0581\u0583\u058c\u0590\u0594")
        buf.write("\u059b\u05a0\u05a4\u05a8\u05b3\u05b9\u05c0\u05db\u05e7")
        buf.write("\u05e9\u0625\u0634\u0636\u063c\u063f\u0642\u0646\u064e")
        buf.write("\u0651\u0658\u0662\u0668\u0672\u0678\u067f\u068d")
        return buf.getvalue()


class TypeScriptParser ( TypeScriptParserBase ):

    grammarFileName = "TypeScriptParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'['", "']'", "'('", "')'", "'{'", "<INVALID>", "'}'", 
                     "';'", "','", "'='", "'?'", "':'", "'...'", "'.'", 
                     "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", 
                     "'/'", "'%'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", 
                     "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", 
                     "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", 
                     "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", 
                     "'^='", "'|='", "'=>'", "'null'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'break'", "'do'", "'instanceof'", "'typeof'", "'case'", 
                     "'else'", "'new'", "'var'", "'catch'", "'finally'", 
                     "'return'", "'void'", "'continue'", "'for'", "'switch'", 
                     "'while'", "'debugger'", "'function'", "'this'", "'with'", 
                     "'default'", "'if'", "'throw'", "'delete'", "'in'", 
                     "'try'", "'as'", "'from'", "'readonly'", "'async'", 
                     "'class'", "'enum'", "'extends'", "'super'", "'const'", 
                     "'export'", "'import'", "'implements'", "'let'", "'private'", 
                     "'public'", "'interface'", "'package'", "'protected'", 
                     "'static'", "'yield'", "'any'", "'number'", "'boolean'", 
                     "'string'", "'symbol'", "'type'", "'get'", "'set'", 
                     "'constructor'", "'namespace'", "'require'", "'module'", 
                     "'declare'", "'abstract'", "'is'", "'@'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'${'" ]

    symbolicNames = [ "<INVALID>", "MultiLineComment", "SingleLineComment", 
                      "RegularExpressionLiteral", "OpenBracket", "CloseBracket", 
                      "OpenParen", "CloseParen", "OpenBrace", "TemplateCloseBrace", 
                      "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", 
                      "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", 
                      "Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", 
                      "Modulus", "RightShiftArithmetic", "LeftShiftArithmetic", 
                      "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", 
                      "GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", 
                      "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", 
                      "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
                      "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
                      "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                      "BitAndAssign", "BitXorAssign", "BitOrAssign", "ARROW", 
                      "NullLiteral", "BooleanLiteral", "DecimalLiteral", 
                      "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", 
                      "BinaryIntegerLiteral", "Break", "Do", "Instanceof", 
                      "Typeof", "Case", "Else", "New", "Var", "Catch", "Finally", 
                      "Return", "Void", "Continue", "For", "Switch", "While", 
                      "Debugger", "Function_", "This", "With", "Default", 
                      "If", "Throw", "Delete", "In", "Try", "As", "From", 
                      "ReadOnly", "Async", "Class", "Enum", "Extends", "Super", 
                      "Const", "Export", "Import", "Implements", "Let", 
                      "Private", "Public", "Interface", "Package", "Protected", 
                      "Static", "Yield", "Any", "Number", "Boolean", "String", 
                      "Symbol", "TypeAlias", "Get", "Set", "Constructor", 
                      "Namespace", "Require", "Module", "Declare", "Abstract", 
                      "Is", "At", "Identifier", "StringLiteral", "BackTick", 
                      "WhiteSpaces", "LineTerminator", "HtmlComment", "CDataComment", 
                      "UnexpectedCharacter", "TemplateStringStartExpression", 
                      "TemplateStringAtom" ]

    RULE_initializer = 0
    RULE_bindingPattern = 1
    RULE_typeParameters = 2
    RULE_typeParameterList = 3
    RULE_typeParameter = 4
    RULE_constraint = 5
    RULE_typeArguments = 6
    RULE_typeArgumentList = 7
    RULE_typeArgument = 8
    RULE_type_ = 9
    RULE_unionOrIntersectionOrPrimaryType = 10
    RULE_primaryType = 11
    RULE_predefinedType = 12
    RULE_typeReference = 13
    RULE_nestedTypeGeneric = 14
    RULE_typeGeneric = 15
    RULE_typeIncludeGeneric = 16
    RULE_typeName = 17
    RULE_objectType = 18
    RULE_typeBody = 19
    RULE_typeMemberList = 20
    RULE_typeMember = 21
    RULE_arrayType = 22
    RULE_tupleType = 23
    RULE_tupleElementTypes = 24
    RULE_functionType = 25
    RULE_constructorType = 26
    RULE_typeQuery = 27
    RULE_typeQueryExpression = 28
    RULE_propertySignatur = 29
    RULE_typeAnnotation = 30
    RULE_callSignature = 31
    RULE_parameterList = 32
    RULE_requiredParameterList = 33
    RULE_parameter = 34
    RULE_optionalParameter = 35
    RULE_restParameter = 36
    RULE_requiredParameter = 37
    RULE_accessibilityModifier = 38
    RULE_identifierOrPattern = 39
    RULE_constructSignature = 40
    RULE_indexSignature = 41
    RULE_methodSignature = 42
    RULE_typeAliasDeclaration = 43
    RULE_constructorDeclaration = 44
    RULE_interfaceDeclaration = 45
    RULE_interfaceExtendsClause = 46
    RULE_classOrInterfaceTypeList = 47
    RULE_enumDeclaration = 48
    RULE_enumBody = 49
    RULE_enumMemberList = 50
    RULE_enumMember = 51
    RULE_namespaceDeclaration = 52
    RULE_namespaceName = 53
    RULE_importAliasDeclaration = 54
    RULE_decoratorList = 55
    RULE_decorator = 56
    RULE_decoratorMemberExpression = 57
    RULE_decoratorCallExpression = 58
    RULE_program = 59
    RULE_sourceElement = 60
    RULE_statement = 61
    RULE_block = 62
    RULE_statementList = 63
    RULE_abstractDeclaration = 64
    RULE_importStatement = 65
    RULE_fromBlock = 66
    RULE_multipleImportStatement = 67
    RULE_exportStatement = 68
    RULE_variableStatement = 69
    RULE_variableDeclarationList = 70
    RULE_variableDeclaration = 71
    RULE_emptyStatement = 72
    RULE_expressionStatement = 73
    RULE_ifStatement = 74
    RULE_iterationStatement = 75
    RULE_varModifier = 76
    RULE_continueStatement = 77
    RULE_breakStatement = 78
    RULE_returnStatement = 79
    RULE_yieldStatement = 80
    RULE_withStatement = 81
    RULE_switchStatement = 82
    RULE_caseBlock = 83
    RULE_caseClauses = 84
    RULE_caseClause = 85
    RULE_defaultClause = 86
    RULE_labelledStatement = 87
    RULE_throwStatement = 88
    RULE_tryStatement = 89
    RULE_catchProduction = 90
    RULE_finallyProduction = 91
    RULE_debuggerStatement = 92
    RULE_functionDeclaration = 93
    RULE_classDeclaration = 94
    RULE_classHeritage = 95
    RULE_classTail = 96
    RULE_classExtendsClause = 97
    RULE_implementsClause = 98
    RULE_classElement = 99
    RULE_propertyMemberDeclaration = 100
    RULE_propertyMemberBase = 101
    RULE_indexMemberDeclaration = 102
    RULE_generatorMethod = 103
    RULE_generatorFunctionDeclaration = 104
    RULE_generatorBlock = 105
    RULE_generatorDefinition = 106
    RULE_iteratorBlock = 107
    RULE_iteratorDefinition = 108
    RULE_formalParameterList = 109
    RULE_formalParameterArg = 110
    RULE_lastFormalParameterArg = 111
    RULE_functionBody = 112
    RULE_sourceElements = 113
    RULE_arrayLiteral = 114
    RULE_elementList = 115
    RULE_arrayElement = 116
    RULE_objectLiteral = 117
    RULE_propertyAssignment = 118
    RULE_getAccessor = 119
    RULE_setAccessor = 120
    RULE_propertyName = 121
    RULE_arguments = 122
    RULE_argumentList = 123
    RULE_argument = 124
    RULE_expressionSequence = 125
    RULE_functionExpressionDeclaration = 126
    RULE_singleExpression = 127
    RULE_asExpression = 128
    RULE_arrowFunctionDeclaration = 129
    RULE_arrowFunctionParameters = 130
    RULE_arrowFunctionBody = 131
    RULE_assignmentOperator = 132
    RULE_literal = 133
    RULE_templateStringLiteral = 134
    RULE_templateStringAtom = 135
    RULE_numericLiteral = 136
    RULE_identifierName = 137
    RULE_identifierOrKeyWord = 138
    RULE_reservedWord = 139
    RULE_keyword = 140
    RULE_getter = 141
    RULE_setter = 142
    RULE_eos = 143

    ruleNames =  [ "initializer", "bindingPattern", "typeParameters", "typeParameterList", 
                   "typeParameter", "constraint", "typeArguments", "typeArgumentList", 
                   "typeArgument", "type_", "unionOrIntersectionOrPrimaryType", 
                   "primaryType", "predefinedType", "typeReference", "nestedTypeGeneric", 
                   "typeGeneric", "typeIncludeGeneric", "typeName", "objectType", 
                   "typeBody", "typeMemberList", "typeMember", "arrayType", 
                   "tupleType", "tupleElementTypes", "functionType", "constructorType", 
                   "typeQuery", "typeQueryExpression", "propertySignatur", 
                   "typeAnnotation", "callSignature", "parameterList", "requiredParameterList", 
                   "parameter", "optionalParameter", "restParameter", "requiredParameter", 
                   "accessibilityModifier", "identifierOrPattern", "constructSignature", 
                   "indexSignature", "methodSignature", "typeAliasDeclaration", 
                   "constructorDeclaration", "interfaceDeclaration", "interfaceExtendsClause", 
                   "classOrInterfaceTypeList", "enumDeclaration", "enumBody", 
                   "enumMemberList", "enumMember", "namespaceDeclaration", 
                   "namespaceName", "importAliasDeclaration", "decoratorList", 
                   "decorator", "decoratorMemberExpression", "decoratorCallExpression", 
                   "program", "sourceElement", "statement", "block", "statementList", 
                   "abstractDeclaration", "importStatement", "fromBlock", 
                   "multipleImportStatement", "exportStatement", "variableStatement", 
                   "variableDeclarationList", "variableDeclaration", "emptyStatement", 
                   "expressionStatement", "ifStatement", "iterationStatement", 
                   "varModifier", "continueStatement", "breakStatement", 
                   "returnStatement", "yieldStatement", "withStatement", 
                   "switchStatement", "caseBlock", "caseClauses", "caseClause", 
                   "defaultClause", "labelledStatement", "throwStatement", 
                   "tryStatement", "catchProduction", "finallyProduction", 
                   "debuggerStatement", "functionDeclaration", "classDeclaration", 
                   "classHeritage", "classTail", "classExtendsClause", "implementsClause", 
                   "classElement", "propertyMemberDeclaration", "propertyMemberBase", 
                   "indexMemberDeclaration", "generatorMethod", "generatorFunctionDeclaration", 
                   "generatorBlock", "generatorDefinition", "iteratorBlock", 
                   "iteratorDefinition", "formalParameterList", "formalParameterArg", 
                   "lastFormalParameterArg", "functionBody", "sourceElements", 
                   "arrayLiteral", "elementList", "arrayElement", "objectLiteral", 
                   "propertyAssignment", "getAccessor", "setAccessor", "propertyName", 
                   "arguments", "argumentList", "argument", "expressionSequence", 
                   "functionExpressionDeclaration", "singleExpression", 
                   "asExpression", "arrowFunctionDeclaration", "arrowFunctionParameters", 
                   "arrowFunctionBody", "assignmentOperator", "literal", 
                   "templateStringLiteral", "templateStringAtom", "numericLiteral", 
                   "identifierName", "identifierOrKeyWord", "reservedWord", 
                   "keyword", "getter", "setter", "eos" ]

    EOF = Token.EOF
    MultiLineComment=1
    SingleLineComment=2
    RegularExpressionLiteral=3
    OpenBracket=4
    CloseBracket=5
    OpenParen=6
    CloseParen=7
    OpenBrace=8
    TemplateCloseBrace=9
    CloseBrace=10
    SemiColon=11
    Comma=12
    Assign=13
    QuestionMark=14
    Colon=15
    Ellipsis=16
    Dot=17
    PlusPlus=18
    MinusMinus=19
    Plus=20
    Minus=21
    BitNot=22
    Not=23
    Multiply=24
    Divide=25
    Modulus=26
    RightShiftArithmetic=27
    LeftShiftArithmetic=28
    RightShiftLogical=29
    LessThan=30
    MoreThan=31
    LessThanEquals=32
    GreaterThanEquals=33
    Equals_=34
    NotEquals=35
    IdentityEquals=36
    IdentityNotEquals=37
    BitAnd=38
    BitXOr=39
    BitOr=40
    And=41
    Or=42
    MultiplyAssign=43
    DivideAssign=44
    ModulusAssign=45
    PlusAssign=46
    MinusAssign=47
    LeftShiftArithmeticAssign=48
    RightShiftArithmeticAssign=49
    RightShiftLogicalAssign=50
    BitAndAssign=51
    BitXorAssign=52
    BitOrAssign=53
    ARROW=54
    NullLiteral=55
    BooleanLiteral=56
    DecimalLiteral=57
    HexIntegerLiteral=58
    OctalIntegerLiteral=59
    OctalIntegerLiteral2=60
    BinaryIntegerLiteral=61
    Break=62
    Do=63
    Instanceof=64
    Typeof=65
    Case=66
    Else=67
    New=68
    Var=69
    Catch=70
    Finally=71
    Return=72
    Void=73
    Continue=74
    For=75
    Switch=76
    While=77
    Debugger=78
    Function_=79
    This=80
    With=81
    Default=82
    If=83
    Throw=84
    Delete=85
    In=86
    Try=87
    As=88
    From=89
    ReadOnly=90
    Async=91
    Class=92
    Enum=93
    Extends=94
    Super=95
    Const=96
    Export=97
    Import=98
    Implements=99
    Let=100
    Private=101
    Public=102
    Interface=103
    Package=104
    Protected=105
    Static=106
    Yield=107
    Any=108
    Number=109
    Boolean=110
    String=111
    Symbol=112
    TypeAlias=113
    Get=114
    Set=115
    Constructor=116
    Namespace=117
    Require=118
    Module=119
    Declare=120
    Abstract=121
    Is=122
    At=123
    Identifier=124
    StringLiteral=125
    BackTick=126
    WhiteSpaces=127
    LineTerminator=128
    HtmlComment=129
    CDataComment=130
    UnexpectedCharacter=131
    TemplateStringStartExpression=132
    TemplateStringAtom=133

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(TypeScriptParser.Assign, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = TypeScriptParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.match(TypeScriptParser.Assign)
            self.state = 289
            self.singleExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(TypeScriptParser.ArrayLiteralContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(TypeScriptParser.ObjectLiteralContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_bindingPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingPattern" ):
                listener.enterBindingPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingPattern" ):
                listener.exitBindingPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBindingPattern" ):
                return visitor.visitBindingPattern(self)
            else:
                return visitor.visitChildren(self)




    def bindingPattern(self):

        localctx = TypeScriptParser.BindingPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_bindingPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.OpenBracket]:
                self.state = 291
                self.arrayLiteral()
                pass
            elif token in [TypeScriptParser.OpenBrace]:
                self.state = 292
                self.objectLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LessThan(self):
            return self.getToken(TypeScriptParser.LessThan, 0)

        def MoreThan(self):
            return self.getToken(TypeScriptParser.MoreThan, 0)

        def typeParameterList(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeParameterListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameters" ):
                return visitor.visitTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def typeParameters(self):

        localctx = TypeScriptParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.match(TypeScriptParser.LessThan)
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.LessThan or _la==TypeScriptParser.Identifier:
                self.state = 296
                self.typeParameterList()


            self.state = 299
            self.match(TypeScriptParser.MoreThan)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.TypeParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterList" ):
                listener.enterTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterList" ):
                listener.exitTypeParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameterList" ):
                return visitor.visitTypeParameterList(self)
            else:
                return visitor.visitChildren(self)




    def typeParameterList(self):

        localctx = TypeScriptParser.TypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.typeParameter()
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TypeScriptParser.Comma:
                self.state = 302
                self.match(TypeScriptParser.Comma)
                self.state = 303
                self.typeParameter()
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def constraint(self):
            return self.getTypedRuleContext(TypeScriptParser.ConstraintContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = TypeScriptParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.state = 314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 309
                self.match(TypeScriptParser.Identifier)
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.Extends:
                    self.state = 310
                    self.constraint()


                pass
            elif token in [TypeScriptParser.LessThan]:
                self.enterOuterAlt(localctx, 2)
                self.state = 313
                self.typeParameters()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extends(self):
            return self.getToken(TypeScriptParser.Extends, 0)

        def type_(self):
            return self.getTypedRuleContext(TypeScriptParser.Type_Context,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint" ):
                listener.enterConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint" ):
                listener.exitConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint" ):
                return visitor.visitConstraint(self)
            else:
                return visitor.visitChildren(self)




    def constraint(self):

        localctx = TypeScriptParser.ConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.match(TypeScriptParser.Extends)
            self.state = 317
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LessThan(self):
            return self.getToken(TypeScriptParser.LessThan, 0)

        def MoreThan(self):
            return self.getToken(TypeScriptParser.MoreThan, 0)

        def typeArgumentList(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeArgumentListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArguments" ):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def typeArguments(self):

        localctx = TypeScriptParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(TypeScriptParser.LessThan)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenParen) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.LessThan))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (TypeScriptParser.Typeof - 65)) | (1 << (TypeScriptParser.New - 65)) | (1 << (TypeScriptParser.Void - 65)) | (1 << (TypeScriptParser.This - 65)) | (1 << (TypeScriptParser.Any - 65)) | (1 << (TypeScriptParser.Number - 65)) | (1 << (TypeScriptParser.Boolean - 65)) | (1 << (TypeScriptParser.String - 65)) | (1 << (TypeScriptParser.Symbol - 65)) | (1 << (TypeScriptParser.Identifier - 65)) | (1 << (TypeScriptParser.StringLiteral - 65)))) != 0):
                self.state = 320
                self.typeArgumentList()


            self.state = 323
            self.match(TypeScriptParser.MoreThan)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.TypeArgumentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentList" ):
                listener.enterTypeArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentList" ):
                listener.exitTypeArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgumentList" ):
                return visitor.visitTypeArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def typeArgumentList(self):

        localctx = TypeScriptParser.TypeArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_typeArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.typeArgument()
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TypeScriptParser.Comma:
                self.state = 326
                self.match(TypeScriptParser.Comma)
                self.state = 327
                self.typeArgument()
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(TypeScriptParser.Type_Context,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgument" ):
                return visitor.visitTypeArgument(self)
            else:
                return visitor.visitChildren(self)




    def typeArgument(self):

        localctx = TypeScriptParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typeArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unionOrIntersectionOrPrimaryType(self):
            return self.getTypedRuleContext(TypeScriptParser.UnionOrIntersectionOrPrimaryTypeContext,0)


        def functionType(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionTypeContext,0)


        def constructorType(self):
            return self.getTypedRuleContext(TypeScriptParser.ConstructorTypeContext,0)


        def typeGeneric(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeGenericContext,0)


        def StringLiteral(self):
            return self.getToken(TypeScriptParser.StringLiteral, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_" ):
                return visitor.visitType_(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = TypeScriptParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_type_)
        try:
            self.state = 340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                self.unionOrIntersectionOrPrimaryType(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 336
                self.functionType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 337
                self.constructorType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 338
                self.typeGeneric()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 339
                self.match(TypeScriptParser.StringLiteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionOrIntersectionOrPrimaryTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TypeScriptParser.RULE_unionOrIntersectionOrPrimaryType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IntersectionContext(UnionOrIntersectionOrPrimaryTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.UnionOrIntersectionOrPrimaryTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unionOrIntersectionOrPrimaryType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.UnionOrIntersectionOrPrimaryTypeContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.UnionOrIntersectionOrPrimaryTypeContext,i)

        def BitAnd(self):
            return self.getToken(TypeScriptParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersection" ):
                listener.enterIntersection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersection" ):
                listener.exitIntersection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntersection" ):
                return visitor.visitIntersection(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryContext(UnionOrIntersectionOrPrimaryTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.UnionOrIntersectionOrPrimaryTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryType(self):
            return self.getTypedRuleContext(TypeScriptParser.PrimaryTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)


    class UnionContext(UnionOrIntersectionOrPrimaryTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.UnionOrIntersectionOrPrimaryTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unionOrIntersectionOrPrimaryType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.UnionOrIntersectionOrPrimaryTypeContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.UnionOrIntersectionOrPrimaryTypeContext,i)

        def BitOr(self):
            return self.getToken(TypeScriptParser.BitOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion" ):
                listener.enterUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion" ):
                listener.exitUnion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion" ):
                return visitor.visitUnion(self)
            else:
                return visitor.visitChildren(self)



    def unionOrIntersectionOrPrimaryType(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TypeScriptParser.UnionOrIntersectionOrPrimaryTypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_unionOrIntersectionOrPrimaryType, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = TypeScriptParser.PrimaryContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 343
            self.primaryType(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 351
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                    if la_ == 1:
                        localctx = TypeScriptParser.UnionContext(self, TypeScriptParser.UnionOrIntersectionOrPrimaryTypeContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_unionOrIntersectionOrPrimaryType)
                        self.state = 345
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 346
                        self.match(TypeScriptParser.BitOr)
                        self.state = 347
                        self.unionOrIntersectionOrPrimaryType(4)
                        pass

                    elif la_ == 2:
                        localctx = TypeScriptParser.IntersectionContext(self, TypeScriptParser.UnionOrIntersectionOrPrimaryTypeContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_unionOrIntersectionOrPrimaryType)
                        self.state = 348
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 349
                        self.match(TypeScriptParser.BitAnd)
                        self.state = 350
                        self.unionOrIntersectionOrPrimaryType(3)
                        pass

             
                self.state = 355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TypeScriptParser.RULE_primaryType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RedefinitionOfTypeContext(PrimaryTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PrimaryTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeReference(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeReferenceContext,0)

        def Is(self):
            return self.getToken(TypeScriptParser.Is, 0)
        def primaryType(self):
            return self.getTypedRuleContext(TypeScriptParser.PrimaryTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedefinitionOfType" ):
                listener.enterRedefinitionOfType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedefinitionOfType" ):
                listener.exitRedefinitionOfType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRedefinitionOfType" ):
                return visitor.visitRedefinitionOfType(self)
            else:
                return visitor.visitChildren(self)


    class PredefinedPrimTypeContext(PrimaryTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PrimaryTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predefinedType(self):
            return self.getTypedRuleContext(TypeScriptParser.PredefinedTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefinedPrimType" ):
                listener.enterPredefinedPrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefinedPrimType" ):
                listener.exitPredefinedPrimType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredefinedPrimType" ):
                return visitor.visitPredefinedPrimType(self)
            else:
                return visitor.visitChildren(self)


    class ArrayPrimTypeContext(PrimaryTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PrimaryTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryType(self):
            return self.getTypedRuleContext(TypeScriptParser.PrimaryTypeContext,0)

        def OpenBracket(self):
            return self.getToken(TypeScriptParser.OpenBracket, 0)
        def CloseBracket(self):
            return self.getToken(TypeScriptParser.CloseBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayPrimType" ):
                listener.enterArrayPrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayPrimType" ):
                listener.exitArrayPrimType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayPrimType" ):
                return visitor.visitArrayPrimType(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedPrimTypeContext(PrimaryTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PrimaryTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)
        def type_(self):
            return self.getTypedRuleContext(TypeScriptParser.Type_Context,0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedPrimType" ):
                listener.enterParenthesizedPrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedPrimType" ):
                listener.exitParenthesizedPrimType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedPrimType" ):
                return visitor.visitParenthesizedPrimType(self)
            else:
                return visitor.visitChildren(self)


    class ThisPrimTypeContext(PrimaryTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PrimaryTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def This(self):
            return self.getToken(TypeScriptParser.This, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisPrimType" ):
                listener.enterThisPrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisPrimType" ):
                listener.exitThisPrimType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThisPrimType" ):
                return visitor.visitThisPrimType(self)
            else:
                return visitor.visitChildren(self)


    class TuplePrimTypeContext(PrimaryTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PrimaryTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenBracket(self):
            return self.getToken(TypeScriptParser.OpenBracket, 0)
        def tupleElementTypes(self):
            return self.getTypedRuleContext(TypeScriptParser.TupleElementTypesContext,0)

        def CloseBracket(self):
            return self.getToken(TypeScriptParser.CloseBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuplePrimType" ):
                listener.enterTuplePrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuplePrimType" ):
                listener.exitTuplePrimType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuplePrimType" ):
                return visitor.visitTuplePrimType(self)
            else:
                return visitor.visitChildren(self)


    class ObjectPrimTypeContext(PrimaryTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PrimaryTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def objectType(self):
            return self.getTypedRuleContext(TypeScriptParser.ObjectTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectPrimType" ):
                listener.enterObjectPrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectPrimType" ):
                listener.exitObjectPrimType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectPrimType" ):
                return visitor.visitObjectPrimType(self)
            else:
                return visitor.visitChildren(self)


    class ReferencePrimTypeContext(PrimaryTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PrimaryTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeReference(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeReferenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencePrimType" ):
                listener.enterReferencePrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencePrimType" ):
                listener.exitReferencePrimType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferencePrimType" ):
                return visitor.visitReferencePrimType(self)
            else:
                return visitor.visitChildren(self)


    class QueryPrimTypeContext(PrimaryTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PrimaryTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeQuery(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeQueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimType" ):
                listener.enterQueryPrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimType" ):
                listener.exitQueryPrimType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimType" ):
                return visitor.visitQueryPrimType(self)
            else:
                return visitor.visitChildren(self)



    def primaryType(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TypeScriptParser.PrimaryTypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_primaryType, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                localctx = TypeScriptParser.ParenthesizedPrimTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 357
                self.match(TypeScriptParser.OpenParen)
                self.state = 358
                self.type_()
                self.state = 359
                self.match(TypeScriptParser.CloseParen)
                pass

            elif la_ == 2:
                localctx = TypeScriptParser.PredefinedPrimTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 361
                self.predefinedType()
                pass

            elif la_ == 3:
                localctx = TypeScriptParser.ReferencePrimTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 362
                self.typeReference()
                pass

            elif la_ == 4:
                localctx = TypeScriptParser.ObjectPrimTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 363
                self.objectType()
                pass

            elif la_ == 5:
                localctx = TypeScriptParser.TuplePrimTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 364
                self.match(TypeScriptParser.OpenBracket)
                self.state = 365
                self.tupleElementTypes()
                self.state = 366
                self.match(TypeScriptParser.CloseBracket)
                pass

            elif la_ == 6:
                localctx = TypeScriptParser.QueryPrimTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 368
                self.typeQuery()
                pass

            elif la_ == 7:
                localctx = TypeScriptParser.ThisPrimTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 369
                self.match(TypeScriptParser.This)
                pass

            elif la_ == 8:
                localctx = TypeScriptParser.RedefinitionOfTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 370
                self.typeReference()
                self.state = 371
                self.match(TypeScriptParser.Is)
                self.state = 372
                self.primaryType(1)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 382
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TypeScriptParser.ArrayPrimTypeContext(self, TypeScriptParser.PrimaryTypeContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryType)
                    self.state = 376
                    if not self.precpred(self._ctx, 5):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                    self.state = 377
                    if not notLineTerminator():
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "notLineTerminator()")
                    self.state = 378
                    self.match(TypeScriptParser.OpenBracket)
                    self.state = 379
                    self.match(TypeScriptParser.CloseBracket) 
                self.state = 384
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredefinedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Any(self):
            return self.getToken(TypeScriptParser.Any, 0)

        def Number(self):
            return self.getToken(TypeScriptParser.Number, 0)

        def Boolean(self):
            return self.getToken(TypeScriptParser.Boolean, 0)

        def String(self):
            return self.getToken(TypeScriptParser.String, 0)

        def Symbol(self):
            return self.getToken(TypeScriptParser.Symbol, 0)

        def Void(self):
            return self.getToken(TypeScriptParser.Void, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_predefinedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefinedType" ):
                listener.enterPredefinedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefinedType" ):
                listener.exitPredefinedType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredefinedType" ):
                return visitor.visitPredefinedType(self)
            else:
                return visitor.visitChildren(self)




    def predefinedType(self):

        localctx = TypeScriptParser.PredefinedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_predefinedType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (TypeScriptParser.Void - 73)) | (1 << (TypeScriptParser.Any - 73)) | (1 << (TypeScriptParser.Number - 73)) | (1 << (TypeScriptParser.Boolean - 73)) | (1 << (TypeScriptParser.String - 73)) | (1 << (TypeScriptParser.Symbol - 73)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeNameContext,0)


        def nestedTypeGeneric(self):
            return self.getTypedRuleContext(TypeScriptParser.NestedTypeGenericContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeReference" ):
                listener.enterTypeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeReference" ):
                listener.exitTypeReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeReference" ):
                return visitor.visitTypeReference(self)
            else:
                return visitor.visitChildren(self)




    def typeReference(self):

        localctx = TypeScriptParser.TypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_typeReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.typeName()
            self.state = 389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 388
                self.nestedTypeGeneric()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedTypeGenericContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIncludeGeneric(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeIncludeGenericContext,0)


        def typeGeneric(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeGenericContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_nestedTypeGeneric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedTypeGeneric" ):
                listener.enterNestedTypeGeneric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedTypeGeneric" ):
                listener.exitNestedTypeGeneric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedTypeGeneric" ):
                return visitor.visitNestedTypeGeneric(self)
            else:
                return visitor.visitChildren(self)




    def nestedTypeGeneric(self):

        localctx = TypeScriptParser.NestedTypeGenericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_nestedTypeGeneric)
        try:
            self.state = 393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.typeIncludeGeneric()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 392
                self.typeGeneric()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeGenericContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LessThan(self):
            return self.getToken(TypeScriptParser.LessThan, 0)

        def typeArgumentList(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeArgumentListContext,0)


        def MoreThan(self):
            return self.getToken(TypeScriptParser.MoreThan, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeGeneric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeGeneric" ):
                listener.enterTypeGeneric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeGeneric" ):
                listener.exitTypeGeneric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeGeneric" ):
                return visitor.visitTypeGeneric(self)
            else:
                return visitor.visitChildren(self)




    def typeGeneric(self):

        localctx = TypeScriptParser.TypeGenericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_typeGeneric)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(TypeScriptParser.LessThan)
            self.state = 396
            self.typeArgumentList()
            self.state = 397
            self.match(TypeScriptParser.MoreThan)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeIncludeGenericContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LessThan(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.LessThan)
            else:
                return self.getToken(TypeScriptParser.LessThan, i)

        def typeArgumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.TypeArgumentListContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.TypeArgumentListContext,i)


        def MoreThan(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.MoreThan)
            else:
                return self.getToken(TypeScriptParser.MoreThan, i)

        def bindingPattern(self):
            return self.getTypedRuleContext(TypeScriptParser.BindingPatternContext,0)


        def RightShiftArithmetic(self):
            return self.getToken(TypeScriptParser.RightShiftArithmetic, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeIncludeGeneric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIncludeGeneric" ):
                listener.enterTypeIncludeGeneric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIncludeGeneric" ):
                listener.exitTypeIncludeGeneric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeIncludeGeneric" ):
                return visitor.visitTypeIncludeGeneric(self)
            else:
                return visitor.visitChildren(self)




    def typeIncludeGeneric(self):

        localctx = TypeScriptParser.TypeIncludeGenericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeIncludeGeneric)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(TypeScriptParser.LessThan)
            self.state = 400
            self.typeArgumentList()
            self.state = 401
            self.match(TypeScriptParser.LessThan)
            self.state = 402
            self.typeArgumentList()
            self.state = 408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.MoreThan]:
                self.state = 403
                self.match(TypeScriptParser.MoreThan)
                self.state = 404
                self.bindingPattern()
                self.state = 405
                self.match(TypeScriptParser.MoreThan)
                pass
            elif token in [TypeScriptParser.RightShiftArithmetic]:
                self.state = 407
                self.match(TypeScriptParser.RightShiftArithmetic)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def namespaceName(self):
            return self.getTypedRuleContext(TypeScriptParser.NamespaceNameContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = TypeScriptParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeName)
        try:
            self.state = 412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 410
                self.match(TypeScriptParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 411
                self.namespaceName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def typeBody(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeBodyContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_objectType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectType" ):
                listener.enterObjectType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectType" ):
                listener.exitObjectType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectType" ):
                return visitor.visitObjectType(self)
            else:
                return visitor.visitChildren(self)




    def objectType(self):

        localctx = TypeScriptParser.ObjectTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_objectType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(TypeScriptParser.OpenBrace)
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenParen) | (1 << TypeScriptParser.LessThan) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.DecimalLiteral) | (1 << TypeScriptParser.HexIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral2) | (1 << TypeScriptParser.BinaryIntegerLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.Identifier - 64)) | (1 << (TypeScriptParser.StringLiteral - 64)))) != 0):
                self.state = 415
                self.typeBody()


            self.state = 418
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeMemberList(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeMemberListContext,0)


        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)

        def Comma(self):
            return self.getToken(TypeScriptParser.Comma, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBody" ):
                listener.enterTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBody" ):
                listener.exitTypeBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeBody" ):
                return visitor.visitTypeBody(self)
            else:
                return visitor.visitChildren(self)




    def typeBody(self):

        localctx = TypeScriptParser.TypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.typeMemberList()
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.SemiColon or _la==TypeScriptParser.Comma:
                self.state = 421
                _la = self._input.LA(1)
                if not(_la==TypeScriptParser.SemiColon or _la==TypeScriptParser.Comma):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeMemberListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.TypeMemberContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.TypeMemberContext,i)


        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.SemiColon)
            else:
                return self.getToken(TypeScriptParser.SemiColon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeMemberList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeMemberList" ):
                listener.enterTypeMemberList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeMemberList" ):
                listener.exitTypeMemberList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeMemberList" ):
                return visitor.visitTypeMemberList(self)
            else:
                return visitor.visitChildren(self)




    def typeMemberList(self):

        localctx = TypeScriptParser.TypeMemberListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typeMemberList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.typeMember()
            self.state = 429
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 425
                    _la = self._input.LA(1)
                    if not(_la==TypeScriptParser.SemiColon or _la==TypeScriptParser.Comma):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 426
                    self.typeMember() 
                self.state = 431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertySignatur(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertySignaturContext,0)


        def callSignature(self):
            return self.getTypedRuleContext(TypeScriptParser.CallSignatureContext,0)


        def constructSignature(self):
            return self.getTypedRuleContext(TypeScriptParser.ConstructSignatureContext,0)


        def indexSignature(self):
            return self.getTypedRuleContext(TypeScriptParser.IndexSignatureContext,0)


        def methodSignature(self):
            return self.getTypedRuleContext(TypeScriptParser.MethodSignatureContext,0)


        def ARROW(self):
            return self.getToken(TypeScriptParser.ARROW, 0)

        def type_(self):
            return self.getTypedRuleContext(TypeScriptParser.Type_Context,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeMember" ):
                listener.enterTypeMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeMember" ):
                listener.exitTypeMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeMember" ):
                return visitor.visitTypeMember(self)
            else:
                return visitor.visitChildren(self)




    def typeMember(self):

        localctx = TypeScriptParser.TypeMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeMember)
        self._la = 0 # Token type
        try:
            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                self.propertySignatur()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.callSignature()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 434
                self.constructSignature()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 435
                self.indexSignature()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 436
                self.methodSignature()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.ARROW:
                    self.state = 437
                    self.match(TypeScriptParser.ARROW)
                    self.state = 438
                    self.type_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryType(self):
            return self.getTypedRuleContext(TypeScriptParser.PrimaryTypeContext,0)


        def OpenBracket(self):
            return self.getToken(TypeScriptParser.OpenBracket, 0)

        def CloseBracket(self):
            return self.getToken(TypeScriptParser.CloseBracket, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = TypeScriptParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.primaryType(0)
            self.state = 444
            if not notLineTerminator():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "notLineTerminator()")
            self.state = 445
            self.match(TypeScriptParser.OpenBracket)
            self.state = 446
            self.match(TypeScriptParser.CloseBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBracket(self):
            return self.getToken(TypeScriptParser.OpenBracket, 0)

        def tupleElementTypes(self):
            return self.getTypedRuleContext(TypeScriptParser.TupleElementTypesContext,0)


        def CloseBracket(self):
            return self.getToken(TypeScriptParser.CloseBracket, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_tupleType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleType" ):
                listener.enterTupleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleType" ):
                listener.exitTupleType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleType" ):
                return visitor.visitTupleType(self)
            else:
                return visitor.visitChildren(self)




    def tupleType(self):

        localctx = TypeScriptParser.TupleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_tupleType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.match(TypeScriptParser.OpenBracket)
            self.state = 449
            self.tupleElementTypes()
            self.state = 450
            self.match(TypeScriptParser.CloseBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleElementTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.Type_Context)
            else:
                return self.getTypedRuleContext(TypeScriptParser.Type_Context,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_tupleElementTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleElementTypes" ):
                listener.enterTupleElementTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleElementTypes" ):
                listener.exitTupleElementTypes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleElementTypes" ):
                return visitor.visitTupleElementTypes(self)
            else:
                return visitor.visitChildren(self)




    def tupleElementTypes(self):

        localctx = TypeScriptParser.TupleElementTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_tupleElementTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.type_()
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TypeScriptParser.Comma:
                self.state = 453
                self.match(TypeScriptParser.Comma)
                self.state = 454
                self.type_()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def ARROW(self):
            return self.getToken(TypeScriptParser.ARROW, 0)

        def type_(self):
            return self.getTypedRuleContext(TypeScriptParser.Type_Context,0)


        def typeParameters(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeParametersContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(TypeScriptParser.ParameterListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionType" ):
                return visitor.visitFunctionType(self)
            else:
                return visitor.visitChildren(self)




    def functionType(self):

        localctx = TypeScriptParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_functionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.LessThan:
                self.state = 460
                self.typeParameters()


            self.state = 463
            self.match(TypeScriptParser.OpenParen)
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.Ellipsis) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.At - 64)) | (1 << (TypeScriptParser.Identifier - 64)))) != 0):
                self.state = 464
                self.parameterList()


            self.state = 467
            self.match(TypeScriptParser.CloseParen)
            self.state = 468
            self.match(TypeScriptParser.ARROW)
            self.state = 469
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(TypeScriptParser.New, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def ARROW(self):
            return self.getToken(TypeScriptParser.ARROW, 0)

        def type_(self):
            return self.getTypedRuleContext(TypeScriptParser.Type_Context,0)


        def typeParameters(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeParametersContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(TypeScriptParser.ParameterListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_constructorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorType" ):
                listener.enterConstructorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorType" ):
                listener.exitConstructorType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorType" ):
                return visitor.visitConstructorType(self)
            else:
                return visitor.visitChildren(self)




    def constructorType(self):

        localctx = TypeScriptParser.ConstructorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constructorType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(TypeScriptParser.New)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.LessThan:
                self.state = 472
                self.typeParameters()


            self.state = 475
            self.match(TypeScriptParser.OpenParen)
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.Ellipsis) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.At - 64)) | (1 << (TypeScriptParser.Identifier - 64)))) != 0):
                self.state = 476
                self.parameterList()


            self.state = 479
            self.match(TypeScriptParser.CloseParen)
            self.state = 480
            self.match(TypeScriptParser.ARROW)
            self.state = 481
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typeof(self):
            return self.getToken(TypeScriptParser.Typeof, 0)

        def typeQueryExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeQueryExpressionContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQuery" ):
                listener.enterTypeQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQuery" ):
                listener.exitTypeQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeQuery" ):
                return visitor.visitTypeQuery(self)
            else:
                return visitor.visitChildren(self)




    def typeQuery(self):

        localctx = TypeScriptParser.TypeQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_typeQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(TypeScriptParser.Typeof)
            self.state = 484
            self.typeQueryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def identifierName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.IdentifierNameContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.IdentifierNameContext,i)


        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Dot)
            else:
                return self.getToken(TypeScriptParser.Dot, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeQueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQueryExpression" ):
                listener.enterTypeQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQueryExpression" ):
                listener.exitTypeQueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeQueryExpression" ):
                return visitor.visitTypeQueryExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeQueryExpression(self):

        localctx = TypeScriptParser.TypeQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_typeQueryExpression)
        try:
            self.state = 496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.match(TypeScriptParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 490 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 487
                        self.identifierName()
                        self.state = 488
                        self.match(TypeScriptParser.Dot)

                    else:
                        raise NoViableAltException(self)
                    self.state = 492 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                self.state = 494
                self.identifierName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertySignaturContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyName(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertyNameContext,0)


        def ReadOnly(self):
            return self.getToken(TypeScriptParser.ReadOnly, 0)

        def QuestionMark(self):
            return self.getToken(TypeScriptParser.QuestionMark, 0)

        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def ARROW(self):
            return self.getToken(TypeScriptParser.ARROW, 0)

        def type_(self):
            return self.getTypedRuleContext(TypeScriptParser.Type_Context,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_propertySignatur

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySignatur" ):
                listener.enterPropertySignatur(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySignatur" ):
                listener.exitPropertySignatur(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertySignatur" ):
                return visitor.visitPropertySignatur(self)
            else:
                return visitor.visitChildren(self)




    def propertySignatur(self):

        localctx = TypeScriptParser.PropertySignaturContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_propertySignatur)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 498
                self.match(TypeScriptParser.ReadOnly)


            self.state = 501
            self.propertyName()
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.QuestionMark:
                self.state = 502
                self.match(TypeScriptParser.QuestionMark)


            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Colon:
                self.state = 505
                self.typeAnnotation()


            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.ARROW:
                self.state = 508
                self.match(TypeScriptParser.ARROW)
                self.state = 509
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(TypeScriptParser.Colon, 0)

        def type_(self):
            return self.getTypedRuleContext(TypeScriptParser.Type_Context,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAnnotation" ):
                listener.enterTypeAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAnnotation" ):
                listener.exitTypeAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAnnotation" ):
                return visitor.visitTypeAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def typeAnnotation(self):

        localctx = TypeScriptParser.TypeAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_typeAnnotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(TypeScriptParser.Colon)
            self.state = 513
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeParametersContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(TypeScriptParser.ParameterListContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_callSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallSignature" ):
                listener.enterCallSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallSignature" ):
                listener.exitCallSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallSignature" ):
                return visitor.visitCallSignature(self)
            else:
                return visitor.visitChildren(self)




    def callSignature(self):

        localctx = TypeScriptParser.CallSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_callSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.LessThan:
                self.state = 515
                self.typeParameters()


            self.state = 518
            self.match(TypeScriptParser.OpenParen)
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.Ellipsis) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.At - 64)) | (1 << (TypeScriptParser.Identifier - 64)))) != 0):
                self.state = 519
                self.parameterList()


            self.state = 522
            self.match(TypeScriptParser.CloseParen)
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 523
                self.typeAnnotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def restParameter(self):
            return self.getTypedRuleContext(TypeScriptParser.RestParameterContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.ParameterContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.ParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = TypeScriptParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.state = 539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.Ellipsis]:
                self.enterOuterAlt(localctx, 1)
                self.state = 526
                self.restParameter()
                pass
            elif token in [TypeScriptParser.OpenBracket, TypeScriptParser.OpenBrace, TypeScriptParser.NullLiteral, TypeScriptParser.BooleanLiteral, TypeScriptParser.Break, TypeScriptParser.Do, TypeScriptParser.Instanceof, TypeScriptParser.Typeof, TypeScriptParser.Case, TypeScriptParser.Else, TypeScriptParser.New, TypeScriptParser.Var, TypeScriptParser.Catch, TypeScriptParser.Finally, TypeScriptParser.Return, TypeScriptParser.Void, TypeScriptParser.Continue, TypeScriptParser.For, TypeScriptParser.Switch, TypeScriptParser.While, TypeScriptParser.Debugger, TypeScriptParser.Function_, TypeScriptParser.This, TypeScriptParser.With, TypeScriptParser.Default, TypeScriptParser.If, TypeScriptParser.Throw, TypeScriptParser.Delete, TypeScriptParser.In, TypeScriptParser.Try, TypeScriptParser.From, TypeScriptParser.ReadOnly, TypeScriptParser.Async, TypeScriptParser.Class, TypeScriptParser.Enum, TypeScriptParser.Extends, TypeScriptParser.Super, TypeScriptParser.Const, TypeScriptParser.Export, TypeScriptParser.Import, TypeScriptParser.Implements, TypeScriptParser.Let, TypeScriptParser.Private, TypeScriptParser.Public, TypeScriptParser.Interface, TypeScriptParser.Package, TypeScriptParser.Protected, TypeScriptParser.Static, TypeScriptParser.Yield, TypeScriptParser.String, TypeScriptParser.TypeAlias, TypeScriptParser.Get, TypeScriptParser.Set, TypeScriptParser.Require, TypeScriptParser.At, TypeScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 527
                self.parameter()
                self.state = 532
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 528
                        self.match(TypeScriptParser.Comma)
                        self.state = 529
                        self.parameter() 
                    self.state = 534
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.Comma:
                    self.state = 535
                    self.match(TypeScriptParser.Comma)
                    self.state = 536
                    self.restParameter()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiredParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requiredParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.RequiredParameterContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.RequiredParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_requiredParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiredParameterList" ):
                listener.enterRequiredParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiredParameterList" ):
                listener.exitRequiredParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequiredParameterList" ):
                return visitor.visitRequiredParameterList(self)
            else:
                return visitor.visitChildren(self)




    def requiredParameterList(self):

        localctx = TypeScriptParser.RequiredParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_requiredParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.requiredParameter()
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TypeScriptParser.Comma:
                self.state = 542
                self.match(TypeScriptParser.Comma)
                self.state = 543
                self.requiredParameter()
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requiredParameter(self):
            return self.getTypedRuleContext(TypeScriptParser.RequiredParameterContext,0)


        def optionalParameter(self):
            return self.getTypedRuleContext(TypeScriptParser.OptionalParameterContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = TypeScriptParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_parameter)
        try:
            self.state = 551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 549
                self.requiredParameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 550
                self.optionalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrPattern(self):
            return self.getTypedRuleContext(TypeScriptParser.IdentifierOrPatternContext,0)


        def decoratorList(self):
            return self.getTypedRuleContext(TypeScriptParser.DecoratorListContext,0)


        def QuestionMark(self):
            return self.getToken(TypeScriptParser.QuestionMark, 0)

        def initializer(self):
            return self.getTypedRuleContext(TypeScriptParser.InitializerContext,0)


        def accessibilityModifier(self):
            return self.getTypedRuleContext(TypeScriptParser.AccessibilityModifierContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_optionalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalParameter" ):
                listener.enterOptionalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalParameter" ):
                listener.exitOptionalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalParameter" ):
                return visitor.visitOptionalParameter(self)
            else:
                return visitor.visitChildren(self)




    def optionalParameter(self):

        localctx = TypeScriptParser.OptionalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_optionalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.At:
                self.state = 553
                self.decoratorList()


            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 556
                self.accessibilityModifier()


            self.state = 559
            self.identifierOrPattern()
            self.state = 568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.QuestionMark]:
                self.state = 560
                self.match(TypeScriptParser.QuestionMark)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.Colon:
                    self.state = 561
                    self.typeAnnotation()


                pass
            elif token in [TypeScriptParser.Assign, TypeScriptParser.Colon]:
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.Colon:
                    self.state = 564
                    self.typeAnnotation()


                self.state = 567
                self.initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ellipsis(self):
            return self.getToken(TypeScriptParser.Ellipsis, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_restParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestParameter" ):
                listener.enterRestParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestParameter" ):
                listener.exitRestParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestParameter" ):
                return visitor.visitRestParameter(self)
            else:
                return visitor.visitChildren(self)




    def restParameter(self):

        localctx = TypeScriptParser.RestParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_restParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(TypeScriptParser.Ellipsis)
            self.state = 571
            self.singleExpression(0)
            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Colon:
                self.state = 572
                self.typeAnnotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiredParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrPattern(self):
            return self.getTypedRuleContext(TypeScriptParser.IdentifierOrPatternContext,0)


        def decoratorList(self):
            return self.getTypedRuleContext(TypeScriptParser.DecoratorListContext,0)


        def accessibilityModifier(self):
            return self.getTypedRuleContext(TypeScriptParser.AccessibilityModifierContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_requiredParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiredParameter" ):
                listener.enterRequiredParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiredParameter" ):
                listener.exitRequiredParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequiredParameter" ):
                return visitor.visitRequiredParameter(self)
            else:
                return visitor.visitChildren(self)




    def requiredParameter(self):

        localctx = TypeScriptParser.RequiredParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_requiredParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.At:
                self.state = 575
                self.decoratorList()


            self.state = 579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 578
                self.accessibilityModifier()


            self.state = 581
            self.identifierOrPattern()
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Colon:
                self.state = 582
                self.typeAnnotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessibilityModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Public(self):
            return self.getToken(TypeScriptParser.Public, 0)

        def Private(self):
            return self.getToken(TypeScriptParser.Private, 0)

        def Protected(self):
            return self.getToken(TypeScriptParser.Protected, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_accessibilityModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessibilityModifier" ):
                listener.enterAccessibilityModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessibilityModifier" ):
                listener.exitAccessibilityModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessibilityModifier" ):
                return visitor.visitAccessibilityModifier(self)
            else:
                return visitor.visitChildren(self)




    def accessibilityModifier(self):

        localctx = TypeScriptParser.AccessibilityModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_accessibilityModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (TypeScriptParser.Private - 101)) | (1 << (TypeScriptParser.Public - 101)) | (1 << (TypeScriptParser.Protected - 101)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierName(self):
            return self.getTypedRuleContext(TypeScriptParser.IdentifierNameContext,0)


        def bindingPattern(self):
            return self.getTypedRuleContext(TypeScriptParser.BindingPatternContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_identifierOrPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrPattern" ):
                listener.enterIdentifierOrPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrPattern" ):
                listener.exitIdentifierOrPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrPattern" ):
                return visitor.visitIdentifierOrPattern(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrPattern(self):

        localctx = TypeScriptParser.IdentifierOrPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_identifierOrPattern)
        try:
            self.state = 589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.NullLiteral, TypeScriptParser.BooleanLiteral, TypeScriptParser.Break, TypeScriptParser.Do, TypeScriptParser.Instanceof, TypeScriptParser.Typeof, TypeScriptParser.Case, TypeScriptParser.Else, TypeScriptParser.New, TypeScriptParser.Var, TypeScriptParser.Catch, TypeScriptParser.Finally, TypeScriptParser.Return, TypeScriptParser.Void, TypeScriptParser.Continue, TypeScriptParser.For, TypeScriptParser.Switch, TypeScriptParser.While, TypeScriptParser.Debugger, TypeScriptParser.Function_, TypeScriptParser.This, TypeScriptParser.With, TypeScriptParser.Default, TypeScriptParser.If, TypeScriptParser.Throw, TypeScriptParser.Delete, TypeScriptParser.In, TypeScriptParser.Try, TypeScriptParser.From, TypeScriptParser.ReadOnly, TypeScriptParser.Async, TypeScriptParser.Class, TypeScriptParser.Enum, TypeScriptParser.Extends, TypeScriptParser.Super, TypeScriptParser.Const, TypeScriptParser.Export, TypeScriptParser.Import, TypeScriptParser.Implements, TypeScriptParser.Let, TypeScriptParser.Private, TypeScriptParser.Public, TypeScriptParser.Interface, TypeScriptParser.Package, TypeScriptParser.Protected, TypeScriptParser.Static, TypeScriptParser.Yield, TypeScriptParser.String, TypeScriptParser.TypeAlias, TypeScriptParser.Get, TypeScriptParser.Set, TypeScriptParser.Require, TypeScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 587
                self.identifierName()
                pass
            elif token in [TypeScriptParser.OpenBracket, TypeScriptParser.OpenBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 588
                self.bindingPattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(TypeScriptParser.New, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeParametersContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(TypeScriptParser.ParameterListContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_constructSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructSignature" ):
                listener.enterConstructSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructSignature" ):
                listener.exitConstructSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructSignature" ):
                return visitor.visitConstructSignature(self)
            else:
                return visitor.visitChildren(self)




    def constructSignature(self):

        localctx = TypeScriptParser.ConstructSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_constructSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(TypeScriptParser.New)
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.LessThan:
                self.state = 592
                self.typeParameters()


            self.state = 595
            self.match(TypeScriptParser.OpenParen)
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.Ellipsis) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.At - 64)) | (1 << (TypeScriptParser.Identifier - 64)))) != 0):
                self.state = 596
                self.parameterList()


            self.state = 599
            self.match(TypeScriptParser.CloseParen)
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Colon:
                self.state = 600
                self.typeAnnotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBracket(self):
            return self.getToken(TypeScriptParser.OpenBracket, 0)

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def Colon(self):
            return self.getToken(TypeScriptParser.Colon, 0)

        def CloseBracket(self):
            return self.getToken(TypeScriptParser.CloseBracket, 0)

        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def Number(self):
            return self.getToken(TypeScriptParser.Number, 0)

        def String(self):
            return self.getToken(TypeScriptParser.String, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_indexSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexSignature" ):
                listener.enterIndexSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexSignature" ):
                listener.exitIndexSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexSignature" ):
                return visitor.visitIndexSignature(self)
            else:
                return visitor.visitChildren(self)




    def indexSignature(self):

        localctx = TypeScriptParser.IndexSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_indexSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(TypeScriptParser.OpenBracket)
            self.state = 604
            self.match(TypeScriptParser.Identifier)
            self.state = 605
            self.match(TypeScriptParser.Colon)
            self.state = 606
            _la = self._input.LA(1)
            if not(_la==TypeScriptParser.Number or _la==TypeScriptParser.String):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 607
            self.match(TypeScriptParser.CloseBracket)
            self.state = 608
            self.typeAnnotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyName(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertyNameContext,0)


        def callSignature(self):
            return self.getTypedRuleContext(TypeScriptParser.CallSignatureContext,0)


        def QuestionMark(self):
            return self.getToken(TypeScriptParser.QuestionMark, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_methodSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodSignature" ):
                listener.enterMethodSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodSignature" ):
                listener.exitMethodSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodSignature" ):
                return visitor.visitMethodSignature(self)
            else:
                return visitor.visitChildren(self)




    def methodSignature(self):

        localctx = TypeScriptParser.MethodSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_methodSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.propertyName()
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.QuestionMark:
                self.state = 611
                self.match(TypeScriptParser.QuestionMark)


            self.state = 614
            self.callSignature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TypeAlias(self):
            return self.getToken(TypeScriptParser.TypeAlias, 0)

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def Assign(self):
            return self.getToken(TypeScriptParser.Assign, 0)

        def type_(self):
            return self.getTypedRuleContext(TypeScriptParser.Type_Context,0)


        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_typeAliasDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAliasDeclaration" ):
                listener.enterTypeAliasDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAliasDeclaration" ):
                listener.exitTypeAliasDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAliasDeclaration" ):
                return visitor.visitTypeAliasDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def typeAliasDeclaration(self):

        localctx = TypeScriptParser.TypeAliasDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typeAliasDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(TypeScriptParser.TypeAlias)
            self.state = 617
            self.match(TypeScriptParser.Identifier)
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.LessThan:
                self.state = 618
                self.typeParameters()


            self.state = 621
            self.match(TypeScriptParser.Assign)
            self.state = 622
            self.type_()
            self.state = 623
            self.match(TypeScriptParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Constructor(self):
            return self.getToken(TypeScriptParser.Constructor, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def accessibilityModifier(self):
            return self.getTypedRuleContext(TypeScriptParser.AccessibilityModifierContext,0)


        def formalParameterList(self):
            return self.getTypedRuleContext(TypeScriptParser.FormalParameterListContext,0)


        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def functionBody(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionBodyContext,0)


        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDeclaration" ):
                return visitor.visitConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constructorDeclaration(self):

        localctx = TypeScriptParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (TypeScriptParser.Private - 101)) | (1 << (TypeScriptParser.Public - 101)) | (1 << (TypeScriptParser.Protected - 101)))) != 0):
                self.state = 625
                self.accessibilityModifier()


            self.state = 628
            self.match(TypeScriptParser.Constructor)
            self.state = 629
            self.match(TypeScriptParser.OpenParen)
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.Ellipsis))) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (TypeScriptParser.Private - 101)) | (1 << (TypeScriptParser.Public - 101)) | (1 << (TypeScriptParser.Protected - 101)) | (1 << (TypeScriptParser.TypeAlias - 101)) | (1 << (TypeScriptParser.Require - 101)) | (1 << (TypeScriptParser.At - 101)) | (1 << (TypeScriptParser.Identifier - 101)))) != 0):
                self.state = 630
                self.formalParameterList()


            self.state = 633
            self.match(TypeScriptParser.CloseParen)
            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 634
                self.match(TypeScriptParser.OpenBrace)
                self.state = 635
                self.functionBody()
                self.state = 636
                self.match(TypeScriptParser.CloseBrace)

            elif la_ == 2:
                self.state = 638
                self.match(TypeScriptParser.SemiColon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Interface(self):
            return self.getToken(TypeScriptParser.Interface, 0)

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def objectType(self):
            return self.getTypedRuleContext(TypeScriptParser.ObjectTypeContext,0)


        def Export(self):
            return self.getToken(TypeScriptParser.Export, 0)

        def Declare(self):
            return self.getToken(TypeScriptParser.Declare, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeParametersContext,0)


        def interfaceExtendsClause(self):
            return self.getTypedRuleContext(TypeScriptParser.InterfaceExtendsClauseContext,0)


        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDeclaration" ):
                return visitor.visitInterfaceDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDeclaration(self):

        localctx = TypeScriptParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Export:
                self.state = 641
                self.match(TypeScriptParser.Export)


            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Declare:
                self.state = 644
                self.match(TypeScriptParser.Declare)


            self.state = 647
            self.match(TypeScriptParser.Interface)
            self.state = 648
            self.match(TypeScriptParser.Identifier)
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.LessThan:
                self.state = 649
                self.typeParameters()


            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Extends:
                self.state = 652
                self.interfaceExtendsClause()


            self.state = 655
            self.objectType()
            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 656
                self.match(TypeScriptParser.SemiColon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceExtendsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extends(self):
            return self.getToken(TypeScriptParser.Extends, 0)

        def classOrInterfaceTypeList(self):
            return self.getTypedRuleContext(TypeScriptParser.ClassOrInterfaceTypeListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_interfaceExtendsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceExtendsClause" ):
                listener.enterInterfaceExtendsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceExtendsClause" ):
                listener.exitInterfaceExtendsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceExtendsClause" ):
                return visitor.visitInterfaceExtendsClause(self)
            else:
                return visitor.visitChildren(self)




    def interfaceExtendsClause(self):

        localctx = TypeScriptParser.InterfaceExtendsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_interfaceExtendsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(TypeScriptParser.Extends)
            self.state = 660
            self.classOrInterfaceTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.TypeReferenceContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.TypeReferenceContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_classOrInterfaceTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceTypeList" ):
                listener.enterClassOrInterfaceTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceTypeList" ):
                listener.exitClassOrInterfaceTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassOrInterfaceTypeList" ):
                return visitor.visitClassOrInterfaceTypeList(self)
            else:
                return visitor.visitChildren(self)




    def classOrInterfaceTypeList(self):

        localctx = TypeScriptParser.ClassOrInterfaceTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_classOrInterfaceTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.typeReference()
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TypeScriptParser.Comma:
                self.state = 663
                self.match(TypeScriptParser.Comma)
                self.state = 664
                self.typeReference()
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(TypeScriptParser.Enum, 0)

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def Const(self):
            return self.getToken(TypeScriptParser.Const, 0)

        def enumBody(self):
            return self.getTypedRuleContext(TypeScriptParser.EnumBodyContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDeclaration" ):
                return visitor.visitEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def enumDeclaration(self):

        localctx = TypeScriptParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Const:
                self.state = 670
                self.match(TypeScriptParser.Const)


            self.state = 673
            self.match(TypeScriptParser.Enum)
            self.state = 674
            self.match(TypeScriptParser.Identifier)
            self.state = 675
            self.match(TypeScriptParser.OpenBrace)
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.DecimalLiteral) | (1 << TypeScriptParser.HexIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral2) | (1 << TypeScriptParser.BinaryIntegerLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.Identifier - 64)) | (1 << (TypeScriptParser.StringLiteral - 64)))) != 0):
                self.state = 676
                self.enumBody()


            self.state = 679
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumMemberList(self):
            return self.getTypedRuleContext(TypeScriptParser.EnumMemberListContext,0)


        def Comma(self):
            return self.getToken(TypeScriptParser.Comma, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_enumBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBody" ):
                listener.enterEnumBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBody" ):
                listener.exitEnumBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumBody" ):
                return visitor.visitEnumBody(self)
            else:
                return visitor.visitChildren(self)




    def enumBody(self):

        localctx = TypeScriptParser.EnumBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_enumBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.enumMemberList()
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Comma:
                self.state = 682
                self.match(TypeScriptParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumMemberListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.EnumMemberContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.EnumMemberContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_enumMemberList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumMemberList" ):
                listener.enterEnumMemberList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumMemberList" ):
                listener.exitEnumMemberList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumMemberList" ):
                return visitor.visitEnumMemberList(self)
            else:
                return visitor.visitChildren(self)




    def enumMemberList(self):

        localctx = TypeScriptParser.EnumMemberListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_enumMemberList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.enumMember()
            self.state = 690
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 686
                    self.match(TypeScriptParser.Comma)
                    self.state = 687
                    self.enumMember() 
                self.state = 692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyName(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertyNameContext,0)


        def Assign(self):
            return self.getToken(TypeScriptParser.Assign, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_enumMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumMember" ):
                listener.enterEnumMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumMember" ):
                listener.exitEnumMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumMember" ):
                return visitor.visitEnumMember(self)
            else:
                return visitor.visitChildren(self)




    def enumMember(self):

        localctx = TypeScriptParser.EnumMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_enumMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.propertyName()
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Assign:
                self.state = 694
                self.match(TypeScriptParser.Assign)
                self.state = 695
                self.singleExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(TypeScriptParser.Namespace, 0)

        def namespaceName(self):
            return self.getTypedRuleContext(TypeScriptParser.NamespaceNameContext,0)


        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def statementList(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_namespaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceDeclaration" ):
                listener.enterNamespaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceDeclaration" ):
                listener.exitNamespaceDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespaceDeclaration" ):
                return visitor.visitNamespaceDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def namespaceDeclaration(self):

        localctx = TypeScriptParser.NamespaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_namespaceDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(TypeScriptParser.Namespace)
            self.state = 699
            self.namespaceName()
            self.state = 700
            self.match(TypeScriptParser.OpenBrace)
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 701
                self.statementList()


            self.state = 704
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Identifier)
            else:
                return self.getToken(TypeScriptParser.Identifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Dot)
            else:
                return self.getToken(TypeScriptParser.Dot, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_namespaceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceName" ):
                listener.enterNamespaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceName" ):
                listener.exitNamespaceName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespaceName" ):
                return visitor.visitNamespaceName(self)
            else:
                return visitor.visitChildren(self)




    def namespaceName(self):

        localctx = TypeScriptParser.NamespaceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_namespaceName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(TypeScriptParser.Identifier)
            self.state = 715
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 708 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 707
                        self.match(TypeScriptParser.Dot)
                        self.state = 710 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==TypeScriptParser.Dot):
                            break

                    self.state = 712
                    self.match(TypeScriptParser.Identifier) 
                self.state = 717
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportAliasDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def Assign(self):
            return self.getToken(TypeScriptParser.Assign, 0)

        def namespaceName(self):
            return self.getTypedRuleContext(TypeScriptParser.NamespaceNameContext,0)


        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_importAliasDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportAliasDeclaration" ):
                listener.enterImportAliasDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportAliasDeclaration" ):
                listener.exitImportAliasDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportAliasDeclaration" ):
                return visitor.visitImportAliasDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importAliasDeclaration(self):

        localctx = TypeScriptParser.ImportAliasDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_importAliasDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(TypeScriptParser.Identifier)
            self.state = 719
            self.match(TypeScriptParser.Assign)
            self.state = 720
            self.namespaceName()
            self.state = 721
            self.match(TypeScriptParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.DecoratorContext,i)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_decoratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecoratorList" ):
                listener.enterDecoratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecoratorList" ):
                listener.exitDecoratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecoratorList" ):
                return visitor.visitDecoratorList(self)
            else:
                return visitor.visitChildren(self)




    def decoratorList(self):

        localctx = TypeScriptParser.DecoratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_decoratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 723
                    self.decorator()

                else:
                    raise NoViableAltException(self)
                self.state = 726 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def At(self):
            return self.getToken(TypeScriptParser.At, 0)

        def decoratorMemberExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.DecoratorMemberExpressionContext,0)


        def decoratorCallExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.DecoratorCallExpressionContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = TypeScriptParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_decorator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(TypeScriptParser.At)
            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 729
                self.decoratorMemberExpression(0)
                pass

            elif la_ == 2:
                self.state = 730
                self.decoratorCallExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorMemberExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def decoratorMemberExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.DecoratorMemberExpressionContext,0)


        def Dot(self):
            return self.getToken(TypeScriptParser.Dot, 0)

        def identifierName(self):
            return self.getTypedRuleContext(TypeScriptParser.IdentifierNameContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_decoratorMemberExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecoratorMemberExpression" ):
                listener.enterDecoratorMemberExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecoratorMemberExpression" ):
                listener.exitDecoratorMemberExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecoratorMemberExpression" ):
                return visitor.visitDecoratorMemberExpression(self)
            else:
                return visitor.visitChildren(self)



    def decoratorMemberExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TypeScriptParser.DecoratorMemberExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 114
        self.enterRecursionRule(localctx, 114, self.RULE_decoratorMemberExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.Identifier]:
                self.state = 734
                self.match(TypeScriptParser.Identifier)
                pass
            elif token in [TypeScriptParser.OpenParen]:
                self.state = 735
                self.match(TypeScriptParser.OpenParen)
                self.state = 736
                self.singleExpression(0)
                self.state = 737
                self.match(TypeScriptParser.CloseParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 746
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TypeScriptParser.DecoratorMemberExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_decoratorMemberExpression)
                    self.state = 741
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 742
                    self.match(TypeScriptParser.Dot)
                    self.state = 743
                    self.identifierName() 
                self.state = 748
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DecoratorCallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decoratorMemberExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.DecoratorMemberExpressionContext,0)


        def arguments(self):
            return self.getTypedRuleContext(TypeScriptParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_decoratorCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecoratorCallExpression" ):
                listener.enterDecoratorCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecoratorCallExpression" ):
                listener.exitDecoratorCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecoratorCallExpression" ):
                return visitor.visitDecoratorCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def decoratorCallExpression(self):

        localctx = TypeScriptParser.DecoratorCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_decoratorCallExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.decoratorMemberExpression(0)
            self.state = 750
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(TypeScriptParser.EOF, 0)

        def sourceElements(self):
            return self.getTypedRuleContext(TypeScriptParser.SourceElementsContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = TypeScriptParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_program)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 752
                self.sourceElements()


            self.state = 755
            self.match(TypeScriptParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementContext,0)


        def Export(self):
            return self.getToken(TypeScriptParser.Export, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_sourceElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceElement" ):
                listener.enterSourceElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceElement" ):
                listener.exitSourceElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceElement" ):
                return visitor.visitSourceElement(self)
            else:
                return visitor.visitChildren(self)




    def sourceElement(self):

        localctx = TypeScriptParser.SourceElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_sourceElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 757
                self.match(TypeScriptParser.Export)


            self.state = 760
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(TypeScriptParser.BlockContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.ImportStatementContext,0)


        def exportStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.ExportStatementContext,0)


        def emptyStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.EmptyStatementContext,0)


        def abstractDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.AbstractDeclarationContext,0)


        def decoratorList(self):
            return self.getTypedRuleContext(TypeScriptParser.DecoratorListContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.InterfaceDeclarationContext,0)


        def namespaceDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.NamespaceDeclarationContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.IfStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.IterationStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.ReturnStatementContext,0)


        def yieldStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.YieldStatementContext,0)


        def withStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.WithStatementContext,0)


        def labelledStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.LabelledStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.SwitchStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.ThrowStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.TryStatementContext,0)


        def debuggerStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.DebuggerStatementContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionDeclarationContext,0)


        def arrowFunctionDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.ArrowFunctionDeclarationContext,0)


        def generatorFunctionDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.GeneratorFunctionDeclarationContext,0)


        def variableStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.VariableStatementContext,0)


        def typeAliasDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAliasDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.EnumDeclarationContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionStatementContext,0)


        def Export(self):
            return self.getToken(TypeScriptParser.Export, 0)

        def statement(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = TypeScriptParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_statement)
        try:
            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self.importStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 764
                self.exportStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 765
                self.emptyStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 766
                self.abstractDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 767
                self.decoratorList()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 768
                self.classDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 769
                self.interfaceDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 770
                self.namespaceDeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 771
                self.ifStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 772
                self.iterationStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 773
                self.continueStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 774
                self.breakStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 775
                self.returnStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 776
                self.yieldStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 777
                self.withStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 778
                self.labelledStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 779
                self.switchStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 780
                self.throwStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 781
                self.tryStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 782
                self.debuggerStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 783
                self.functionDeclaration()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 784
                self.arrowFunctionDeclaration()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 785
                self.generatorFunctionDeclaration()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 786
                self.variableStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 787
                self.typeAliasDeclaration()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 788
                self.enumDeclaration()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 789
                self.expressionStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 790
                self.match(TypeScriptParser.Export)
                self.state = 791
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def statementList(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = TypeScriptParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(TypeScriptParser.OpenBrace)
            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 795
                self.statementList()


            self.state = 798
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.StatementContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.StatementContext,i)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_statementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementList" ):
                listener.enterStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementList" ):
                listener.exitStatementList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementList" ):
                return visitor.visitStatementList(self)
            else:
                return visitor.visitChildren(self)




    def statementList(self):

        localctx = TypeScriptParser.StatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_statementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 800
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 803 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abstract(self):
            return self.getToken(TypeScriptParser.Abstract, 0)

        def eos(self):
            return self.getTypedRuleContext(TypeScriptParser.EosContext,0)


        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def callSignature(self):
            return self.getTypedRuleContext(TypeScriptParser.CallSignatureContext,0)


        def variableStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.VariableStatementContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_abstractDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclaration" ):
                listener.enterAbstractDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclaration" ):
                listener.exitAbstractDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractDeclaration" ):
                return visitor.visitAbstractDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def abstractDeclaration(self):

        localctx = TypeScriptParser.AbstractDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_abstractDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(TypeScriptParser.Abstract)
            self.state = 809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 806
                self.match(TypeScriptParser.Identifier)
                self.state = 807
                self.callSignature()
                pass

            elif la_ == 2:
                self.state = 808
                self.variableStatement()
                pass


            self.state = 811
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Import(self):
            return self.getToken(TypeScriptParser.Import, 0)

        def fromBlock(self):
            return self.getTypedRuleContext(TypeScriptParser.FromBlockContext,0)


        def importAliasDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.ImportAliasDeclarationContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportStatement" ):
                return visitor.visitImportStatement(self)
            else:
                return visitor.visitChildren(self)




    def importStatement(self):

        localctx = TypeScriptParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_importStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(TypeScriptParser.Import)
            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 814
                self.fromBlock()
                pass

            elif la_ == 2:
                self.state = 815
                self.importAliasDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def From(self):
            return self.getToken(TypeScriptParser.From, 0)

        def StringLiteral(self):
            return self.getToken(TypeScriptParser.StringLiteral, 0)

        def eos(self):
            return self.getTypedRuleContext(TypeScriptParser.EosContext,0)


        def Multiply(self):
            return self.getToken(TypeScriptParser.Multiply, 0)

        def multipleImportStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.MultipleImportStatementContext,0)


        def As(self):
            return self.getToken(TypeScriptParser.As, 0)

        def identifierName(self):
            return self.getTypedRuleContext(TypeScriptParser.IdentifierNameContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_fromBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromBlock" ):
                listener.enterFromBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromBlock" ):
                listener.exitFromBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromBlock" ):
                return visitor.visitFromBlock(self)
            else:
                return visitor.visitChildren(self)




    def fromBlock(self):

        localctx = TypeScriptParser.FromBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_fromBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.Multiply]:
                self.state = 818
                self.match(TypeScriptParser.Multiply)
                pass
            elif token in [TypeScriptParser.OpenBrace, TypeScriptParser.NullLiteral, TypeScriptParser.BooleanLiteral, TypeScriptParser.Break, TypeScriptParser.Do, TypeScriptParser.Instanceof, TypeScriptParser.Typeof, TypeScriptParser.Case, TypeScriptParser.Else, TypeScriptParser.New, TypeScriptParser.Var, TypeScriptParser.Catch, TypeScriptParser.Finally, TypeScriptParser.Return, TypeScriptParser.Void, TypeScriptParser.Continue, TypeScriptParser.For, TypeScriptParser.Switch, TypeScriptParser.While, TypeScriptParser.Debugger, TypeScriptParser.Function_, TypeScriptParser.This, TypeScriptParser.With, TypeScriptParser.Default, TypeScriptParser.If, TypeScriptParser.Throw, TypeScriptParser.Delete, TypeScriptParser.In, TypeScriptParser.Try, TypeScriptParser.From, TypeScriptParser.ReadOnly, TypeScriptParser.Async, TypeScriptParser.Class, TypeScriptParser.Enum, TypeScriptParser.Extends, TypeScriptParser.Super, TypeScriptParser.Const, TypeScriptParser.Export, TypeScriptParser.Import, TypeScriptParser.Implements, TypeScriptParser.Let, TypeScriptParser.Private, TypeScriptParser.Public, TypeScriptParser.Interface, TypeScriptParser.Package, TypeScriptParser.Protected, TypeScriptParser.Static, TypeScriptParser.Yield, TypeScriptParser.String, TypeScriptParser.TypeAlias, TypeScriptParser.Get, TypeScriptParser.Set, TypeScriptParser.Require, TypeScriptParser.Identifier]:
                self.state = 819
                self.multipleImportStatement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.As:
                self.state = 822
                self.match(TypeScriptParser.As)
                self.state = 823
                self.identifierName()


            self.state = 826
            self.match(TypeScriptParser.From)
            self.state = 827
            self.match(TypeScriptParser.StringLiteral)
            self.state = 828
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleImportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def identifierName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.IdentifierNameContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.IdentifierNameContext,i)


        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_multipleImportStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleImportStatement" ):
                listener.enterMultipleImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleImportStatement" ):
                listener.exitMultipleImportStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleImportStatement" ):
                return visitor.visitMultipleImportStatement(self)
            else:
                return visitor.visitChildren(self)




    def multipleImportStatement(self):

        localctx = TypeScriptParser.MultipleImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_multipleImportStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.Identifier - 64)))) != 0):
                self.state = 830
                self.identifierName()
                self.state = 831
                self.match(TypeScriptParser.Comma)


            self.state = 835
            self.match(TypeScriptParser.OpenBrace)
            self.state = 836
            self.identifierName()
            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TypeScriptParser.Comma:
                self.state = 837
                self.match(TypeScriptParser.Comma)
                self.state = 838
                self.identifierName()
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 844
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Export(self):
            return self.getToken(TypeScriptParser.Export, 0)

        def fromBlock(self):
            return self.getTypedRuleContext(TypeScriptParser.FromBlockContext,0)


        def statement(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementContext,0)


        def Default(self):
            return self.getToken(TypeScriptParser.Default, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_exportStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportStatement" ):
                listener.enterExportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportStatement" ):
                listener.exitExportStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExportStatement" ):
                return visitor.visitExportStatement(self)
            else:
                return visitor.visitChildren(self)




    def exportStatement(self):

        localctx = TypeScriptParser.ExportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_exportStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(TypeScriptParser.Export)
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 847
                self.match(TypeScriptParser.Default)


            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 850
                self.fromBlock()
                pass

            elif la_ == 2:
                self.state = 851
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingPattern(self):
            return self.getTypedRuleContext(TypeScriptParser.BindingPatternContext,0)


        def initializer(self):
            return self.getTypedRuleContext(TypeScriptParser.InitializerContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(TypeScriptParser.VariableDeclarationListContext,0)


        def accessibilityModifier(self):
            return self.getTypedRuleContext(TypeScriptParser.AccessibilityModifierContext,0)


        def varModifier(self):
            return self.getTypedRuleContext(TypeScriptParser.VarModifierContext,0)


        def ReadOnly(self):
            return self.getToken(TypeScriptParser.ReadOnly, 0)

        def Declare(self):
            return self.getToken(TypeScriptParser.Declare, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_variableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableStatement" ):
                listener.enterVariableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableStatement" ):
                listener.exitVariableStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableStatement" ):
                return visitor.visitVariableStatement(self)
            else:
                return visitor.visitChildren(self)




    def variableStatement(self):

        localctx = TypeScriptParser.VariableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_variableStatement)
        self._la = 0 # Token type
        try:
            self.state = 883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.bindingPattern()
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.Colon:
                    self.state = 855
                    self.typeAnnotation()


                self.state = 858
                self.initializer()
                self.state = 860
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 859
                    self.match(TypeScriptParser.SemiColon)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (TypeScriptParser.Private - 101)) | (1 << (TypeScriptParser.Public - 101)) | (1 << (TypeScriptParser.Protected - 101)))) != 0):
                    self.state = 862
                    self.accessibilityModifier()


                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (TypeScriptParser.Var - 69)) | (1 << (TypeScriptParser.Const - 69)) | (1 << (TypeScriptParser.Let - 69)))) != 0):
                    self.state = 865
                    self.varModifier()


                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.ReadOnly:
                    self.state = 868
                    self.match(TypeScriptParser.ReadOnly)


                self.state = 871
                self.variableDeclarationList()
                self.state = 873
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 872
                    self.match(TypeScriptParser.SemiColon)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 875
                self.match(TypeScriptParser.Declare)
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (TypeScriptParser.Var - 69)) | (1 << (TypeScriptParser.Const - 69)) | (1 << (TypeScriptParser.Let - 69)))) != 0):
                    self.state = 876
                    self.varModifier()


                self.state = 879
                self.variableDeclarationList()
                self.state = 881
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 880
                    self.match(TypeScriptParser.SemiColon)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.VariableDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = TypeScriptParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_variableDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.variableDeclaration()
            self.state = 890
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 886
                    self.match(TypeScriptParser.Comma)
                    self.state = 887
                    self.variableDeclaration() 
                self.state = 892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrKeyWord(self):
            return self.getTypedRuleContext(TypeScriptParser.IdentifierOrKeyWordContext,0)


        def arrayLiteral(self):
            return self.getTypedRuleContext(TypeScriptParser.ArrayLiteralContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(TypeScriptParser.ObjectLiteralContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)


        def Assign(self):
            return self.getToken(TypeScriptParser.Assign, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = TypeScriptParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.TypeAlias, TypeScriptParser.Require, TypeScriptParser.Identifier]:
                self.state = 893
                self.identifierOrKeyWord()
                pass
            elif token in [TypeScriptParser.OpenBracket]:
                self.state = 894
                self.arrayLiteral()
                pass
            elif token in [TypeScriptParser.OpenBrace]:
                self.state = 895
                self.objectLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 898
                self.typeAnnotation()


            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 901
                self.singleExpression(0)


            self.state = 909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 904
                self.match(TypeScriptParser.Assign)
                self.state = 906
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 905
                    self.typeParameters()


                self.state = 908
                self.singleExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = TypeScriptParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(TypeScriptParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)


        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = TypeScriptParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            if not this.notOpenBraceAndNotFunction():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.notOpenBraceAndNotFunction()")
            self.state = 914
            self.expressionSequence()
            self.state = 916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 915
                self.match(TypeScriptParser.SemiColon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(TypeScriptParser.If, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)


        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.StatementContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.StatementContext,i)


        def Else(self):
            return self.getToken(TypeScriptParser.Else, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = TypeScriptParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(TypeScriptParser.If)
            self.state = 919
            self.match(TypeScriptParser.OpenParen)
            self.state = 920
            self.expressionSequence()
            self.state = 921
            self.match(TypeScriptParser.CloseParen)
            self.state = 922
            self.statement()
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 923
                self.match(TypeScriptParser.Else)
                self.state = 924
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TypeScriptParser.RULE_iterationStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DoStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Do(self):
            return self.getToken(TypeScriptParser.Do, 0)
        def statement(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementContext,0)

        def While(self):
            return self.getToken(TypeScriptParser.While, 0)
        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)
        def eos(self):
            return self.getTypedRuleContext(TypeScriptParser.EosContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoStatement" ):
                return visitor.visitDoStatement(self)
            else:
                return visitor.visitChildren(self)


    class ForVarStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(TypeScriptParser.For, 0)
        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)
        def varModifier(self):
            return self.getTypedRuleContext(TypeScriptParser.VarModifierContext,0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(TypeScriptParser.VariableDeclarationListContext,0)

        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.SemiColon)
            else:
                return self.getToken(TypeScriptParser.SemiColon, i)
        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementContext,0)

        def expressionSequence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.ExpressionSequenceContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForVarStatement" ):
                listener.enterForVarStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForVarStatement" ):
                listener.exitForVarStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForVarStatement" ):
                return visitor.visitForVarStatement(self)
            else:
                return visitor.visitChildren(self)


    class ForVarInStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(TypeScriptParser.For, 0)
        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)
        def varModifier(self):
            return self.getTypedRuleContext(TypeScriptParser.VarModifierContext,0)

        def variableDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.VariableDeclarationContext,0)

        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementContext,0)

        def In(self):
            return self.getToken(TypeScriptParser.In, 0)
        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForVarInStatement" ):
                listener.enterForVarInStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForVarInStatement" ):
                listener.exitForVarInStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForVarInStatement" ):
                return visitor.visitForVarInStatement(self)
            else:
                return visitor.visitChildren(self)


    class WhileStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def While(self):
            return self.getToken(TypeScriptParser.While, 0)
        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)


    class ForStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(TypeScriptParser.For, 0)
        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)
        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.SemiColon)
            else:
                return self.getToken(TypeScriptParser.SemiColon, i)
        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementContext,0)

        def expressionSequence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.ExpressionSequenceContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)


    class ForInStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(TypeScriptParser.For, 0)
        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)

        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementContext,0)

        def In(self):
            return self.getToken(TypeScriptParser.In, 0)
        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInStatement" ):
                listener.enterForInStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInStatement" ):
                listener.exitForInStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInStatement" ):
                return visitor.visitForInStatement(self)
            else:
                return visitor.visitChildren(self)



    def iterationStatement(self):

        localctx = TypeScriptParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_iterationStatement)
        self._la = 0 # Token type
        try:
            self.state = 996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                localctx = TypeScriptParser.DoStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self.match(TypeScriptParser.Do)
                self.state = 928
                self.statement()
                self.state = 929
                self.match(TypeScriptParser.While)
                self.state = 930
                self.match(TypeScriptParser.OpenParen)
                self.state = 931
                self.expressionSequence()
                self.state = 932
                self.match(TypeScriptParser.CloseParen)
                self.state = 933
                self.eos()
                pass

            elif la_ == 2:
                localctx = TypeScriptParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 935
                self.match(TypeScriptParser.While)
                self.state = 936
                self.match(TypeScriptParser.OpenParen)
                self.state = 937
                self.expressionSequence()
                self.state = 938
                self.match(TypeScriptParser.CloseParen)
                self.state = 939
                self.statement()
                pass

            elif la_ == 3:
                localctx = TypeScriptParser.ForStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 941
                self.match(TypeScriptParser.For)
                self.state = 942
                self.match(TypeScriptParser.OpenParen)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.RegularExpressionLiteral) | (1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenParen) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.PlusPlus) | (1 << TypeScriptParser.MinusMinus) | (1 << TypeScriptParser.Plus) | (1 << TypeScriptParser.Minus) | (1 << TypeScriptParser.BitNot) | (1 << TypeScriptParser.Not) | (1 << TypeScriptParser.LessThan) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.DecimalLiteral) | (1 << TypeScriptParser.HexIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral2) | (1 << TypeScriptParser.BinaryIntegerLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.Identifier - 64)) | (1 << (TypeScriptParser.StringLiteral - 64)) | (1 << (TypeScriptParser.BackTick - 64)))) != 0):
                    self.state = 943
                    self.expressionSequence()


                self.state = 946
                self.match(TypeScriptParser.SemiColon)
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.RegularExpressionLiteral) | (1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenParen) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.PlusPlus) | (1 << TypeScriptParser.MinusMinus) | (1 << TypeScriptParser.Plus) | (1 << TypeScriptParser.Minus) | (1 << TypeScriptParser.BitNot) | (1 << TypeScriptParser.Not) | (1 << TypeScriptParser.LessThan) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.DecimalLiteral) | (1 << TypeScriptParser.HexIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral2) | (1 << TypeScriptParser.BinaryIntegerLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.Identifier - 64)) | (1 << (TypeScriptParser.StringLiteral - 64)) | (1 << (TypeScriptParser.BackTick - 64)))) != 0):
                    self.state = 947
                    self.expressionSequence()


                self.state = 950
                self.match(TypeScriptParser.SemiColon)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.RegularExpressionLiteral) | (1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenParen) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.PlusPlus) | (1 << TypeScriptParser.MinusMinus) | (1 << TypeScriptParser.Plus) | (1 << TypeScriptParser.Minus) | (1 << TypeScriptParser.BitNot) | (1 << TypeScriptParser.Not) | (1 << TypeScriptParser.LessThan) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.DecimalLiteral) | (1 << TypeScriptParser.HexIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral2) | (1 << TypeScriptParser.BinaryIntegerLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.Identifier - 64)) | (1 << (TypeScriptParser.StringLiteral - 64)) | (1 << (TypeScriptParser.BackTick - 64)))) != 0):
                    self.state = 951
                    self.expressionSequence()


                self.state = 954
                self.match(TypeScriptParser.CloseParen)
                self.state = 955
                self.statement()
                pass

            elif la_ == 4:
                localctx = TypeScriptParser.ForVarStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 956
                self.match(TypeScriptParser.For)
                self.state = 957
                self.match(TypeScriptParser.OpenParen)
                self.state = 958
                self.varModifier()
                self.state = 959
                self.variableDeclarationList()
                self.state = 960
                self.match(TypeScriptParser.SemiColon)
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.RegularExpressionLiteral) | (1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenParen) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.PlusPlus) | (1 << TypeScriptParser.MinusMinus) | (1 << TypeScriptParser.Plus) | (1 << TypeScriptParser.Minus) | (1 << TypeScriptParser.BitNot) | (1 << TypeScriptParser.Not) | (1 << TypeScriptParser.LessThan) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.DecimalLiteral) | (1 << TypeScriptParser.HexIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral2) | (1 << TypeScriptParser.BinaryIntegerLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.Identifier - 64)) | (1 << (TypeScriptParser.StringLiteral - 64)) | (1 << (TypeScriptParser.BackTick - 64)))) != 0):
                    self.state = 961
                    self.expressionSequence()


                self.state = 964
                self.match(TypeScriptParser.SemiColon)
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.RegularExpressionLiteral) | (1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenParen) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.PlusPlus) | (1 << TypeScriptParser.MinusMinus) | (1 << TypeScriptParser.Plus) | (1 << TypeScriptParser.Minus) | (1 << TypeScriptParser.BitNot) | (1 << TypeScriptParser.Not) | (1 << TypeScriptParser.LessThan) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.DecimalLiteral) | (1 << TypeScriptParser.HexIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral2) | (1 << TypeScriptParser.BinaryIntegerLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.Identifier - 64)) | (1 << (TypeScriptParser.StringLiteral - 64)) | (1 << (TypeScriptParser.BackTick - 64)))) != 0):
                    self.state = 965
                    self.expressionSequence()


                self.state = 968
                self.match(TypeScriptParser.CloseParen)
                self.state = 969
                self.statement()
                pass

            elif la_ == 5:
                localctx = TypeScriptParser.ForInStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 971
                self.match(TypeScriptParser.For)
                self.state = 972
                self.match(TypeScriptParser.OpenParen)
                self.state = 973
                self.singleExpression(0)
                self.state = 977
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TypeScriptParser.In]:
                    self.state = 974
                    self.match(TypeScriptParser.In)
                    pass
                elif token in [TypeScriptParser.Identifier]:
                    self.state = 975
                    self.match(TypeScriptParser.Identifier)
                    self.state = 976
                    if not this.p("of"):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "this.p(\"of\")")
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 979
                self.expressionSequence()
                self.state = 980
                self.match(TypeScriptParser.CloseParen)
                self.state = 981
                self.statement()
                pass

            elif la_ == 6:
                localctx = TypeScriptParser.ForVarInStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 983
                self.match(TypeScriptParser.For)
                self.state = 984
                self.match(TypeScriptParser.OpenParen)
                self.state = 985
                self.varModifier()
                self.state = 986
                self.variableDeclaration()
                self.state = 990
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TypeScriptParser.In]:
                    self.state = 987
                    self.match(TypeScriptParser.In)
                    pass
                elif token in [TypeScriptParser.Identifier]:
                    self.state = 988
                    self.match(TypeScriptParser.Identifier)
                    self.state = 989
                    if not this.p("of"):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "this.p(\"of\")")
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 992
                self.expressionSequence()
                self.state = 993
                self.match(TypeScriptParser.CloseParen)
                self.state = 994
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Var(self):
            return self.getToken(TypeScriptParser.Var, 0)

        def Let(self):
            return self.getToken(TypeScriptParser.Let, 0)

        def Const(self):
            return self.getToken(TypeScriptParser.Const, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_varModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarModifier" ):
                listener.enterVarModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarModifier" ):
                listener.exitVarModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarModifier" ):
                return visitor.visitVarModifier(self)
            else:
                return visitor.visitChildren(self)




    def varModifier(self):

        localctx = TypeScriptParser.VarModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_varModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            _la = self._input.LA(1)
            if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (TypeScriptParser.Var - 69)) | (1 << (TypeScriptParser.Const - 69)) | (1 << (TypeScriptParser.Let - 69)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Continue(self):
            return self.getToken(TypeScriptParser.Continue, 0)

        def eos(self):
            return self.getTypedRuleContext(TypeScriptParser.EosContext,0)


        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = TypeScriptParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(TypeScriptParser.Continue)
            self.state = 1003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1001
                if not this.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.notLineTerminator()")
                self.state = 1002
                self.match(TypeScriptParser.Identifier)


            self.state = 1005
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(TypeScriptParser.Break, 0)

        def eos(self):
            return self.getTypedRuleContext(TypeScriptParser.EosContext,0)


        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = TypeScriptParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(TypeScriptParser.Break)
            self.state = 1010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 1008
                if not this.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.notLineTerminator()")
                self.state = 1009
                self.match(TypeScriptParser.Identifier)


            self.state = 1012
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Return(self):
            return self.getToken(TypeScriptParser.Return, 0)

        def eos(self):
            return self.getTypedRuleContext(TypeScriptParser.EosContext,0)


        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = TypeScriptParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.match(TypeScriptParser.Return)
            self.state = 1017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1015
                if not this.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.notLineTerminator()")
                self.state = 1016
                self.expressionSequence()


            self.state = 1019
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Yield(self):
            return self.getToken(TypeScriptParser.Yield, 0)

        def eos(self):
            return self.getTypedRuleContext(TypeScriptParser.EosContext,0)


        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_yieldStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStatement" ):
                listener.enterYieldStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStatement" ):
                listener.exitYieldStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYieldStatement" ):
                return visitor.visitYieldStatement(self)
            else:
                return visitor.visitChildren(self)




    def yieldStatement(self):

        localctx = TypeScriptParser.YieldStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_yieldStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(TypeScriptParser.Yield)
            self.state = 1024
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1022
                if not this.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.notLineTerminator()")
                self.state = 1023
                self.expressionSequence()


            self.state = 1026
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def With(self):
            return self.getToken(TypeScriptParser.With, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)


        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def statement(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_withStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStatement" ):
                listener.enterWithStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStatement" ):
                listener.exitWithStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithStatement" ):
                return visitor.visitWithStatement(self)
            else:
                return visitor.visitChildren(self)




    def withStatement(self):

        localctx = TypeScriptParser.WithStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_withStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(TypeScriptParser.With)
            self.state = 1029
            self.match(TypeScriptParser.OpenParen)
            self.state = 1030
            self.expressionSequence()
            self.state = 1031
            self.match(TypeScriptParser.CloseParen)
            self.state = 1032
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(TypeScriptParser.Switch, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)


        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def caseBlock(self):
            return self.getTypedRuleContext(TypeScriptParser.CaseBlockContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatement" ):
                return visitor.visitSwitchStatement(self)
            else:
                return visitor.visitChildren(self)




    def switchStatement(self):

        localctx = TypeScriptParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_switchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(TypeScriptParser.Switch)
            self.state = 1035
            self.match(TypeScriptParser.OpenParen)
            self.state = 1036
            self.expressionSequence()
            self.state = 1037
            self.match(TypeScriptParser.CloseParen)
            self.state = 1038
            self.caseBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def caseClauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.CaseClausesContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.CaseClausesContext,i)


        def defaultClause(self):
            return self.getTypedRuleContext(TypeScriptParser.DefaultClauseContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_caseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseBlock" ):
                listener.enterCaseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseBlock" ):
                listener.exitCaseBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseBlock" ):
                return visitor.visitCaseBlock(self)
            else:
                return visitor.visitChildren(self)




    def caseBlock(self):

        localctx = TypeScriptParser.CaseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_caseBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(TypeScriptParser.OpenBrace)
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Case:
                self.state = 1041
                self.caseClauses()


            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Default:
                self.state = 1044
                self.defaultClause()
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.Case:
                    self.state = 1045
                    self.caseClauses()




            self.state = 1050
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.CaseClauseContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.CaseClauseContext,i)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_caseClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClauses" ):
                listener.enterCaseClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClauses" ):
                listener.exitCaseClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseClauses" ):
                return visitor.visitCaseClauses(self)
            else:
                return visitor.visitChildren(self)




    def caseClauses(self):

        localctx = TypeScriptParser.CaseClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_caseClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1052
                self.caseClause()
                self.state = 1055 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==TypeScriptParser.Case):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(TypeScriptParser.Case, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)


        def Colon(self):
            return self.getToken(TypeScriptParser.Colon, 0)

        def statementList(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_caseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClause" ):
                listener.enterCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClause" ):
                listener.exitCaseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseClause" ):
                return visitor.visitCaseClause(self)
            else:
                return visitor.visitChildren(self)




    def caseClause(self):

        localctx = TypeScriptParser.CaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_caseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(TypeScriptParser.Case)
            self.state = 1058
            self.expressionSequence()
            self.state = 1059
            self.match(TypeScriptParser.Colon)
            self.state = 1061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1060
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Default(self):
            return self.getToken(TypeScriptParser.Default, 0)

        def Colon(self):
            return self.getToken(TypeScriptParser.Colon, 0)

        def statementList(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_defaultClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultClause" ):
                listener.enterDefaultClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultClause" ):
                listener.exitDefaultClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultClause" ):
                return visitor.visitDefaultClause(self)
            else:
                return visitor.visitChildren(self)




    def defaultClause(self):

        localctx = TypeScriptParser.DefaultClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_defaultClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(TypeScriptParser.Default)
            self.state = 1064
            self.match(TypeScriptParser.Colon)
            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1065
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def Colon(self):
            return self.getToken(TypeScriptParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_labelledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelledStatement" ):
                listener.enterLabelledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelledStatement" ):
                listener.exitLabelledStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelledStatement" ):
                return visitor.visitLabelledStatement(self)
            else:
                return visitor.visitChildren(self)




    def labelledStatement(self):

        localctx = TypeScriptParser.LabelledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_labelledStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(TypeScriptParser.Identifier)
            self.state = 1069
            self.match(TypeScriptParser.Colon)
            self.state = 1070
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(TypeScriptParser.Throw, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)


        def eos(self):
            return self.getTypedRuleContext(TypeScriptParser.EosContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStatement" ):
                return visitor.visitThrowStatement(self)
            else:
                return visitor.visitChildren(self)




    def throwStatement(self):

        localctx = TypeScriptParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(TypeScriptParser.Throw)
            self.state = 1073
            if not this.notLineTerminator():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.notLineTerminator()")
            self.state = 1074
            self.expressionSequence()
            self.state = 1075
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(TypeScriptParser.Try, 0)

        def block(self):
            return self.getTypedRuleContext(TypeScriptParser.BlockContext,0)


        def catchProduction(self):
            return self.getTypedRuleContext(TypeScriptParser.CatchProductionContext,0)


        def finallyProduction(self):
            return self.getTypedRuleContext(TypeScriptParser.FinallyProductionContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = TypeScriptParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_tryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.match(TypeScriptParser.Try)
            self.state = 1078
            self.block()
            self.state = 1084
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.Catch]:
                self.state = 1079
                self.catchProduction()
                self.state = 1081
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 1080
                    self.finallyProduction()


                pass
            elif token in [TypeScriptParser.Finally]:
                self.state = 1083
                self.finallyProduction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchProductionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(TypeScriptParser.Catch, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def block(self):
            return self.getTypedRuleContext(TypeScriptParser.BlockContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_catchProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchProduction" ):
                listener.enterCatchProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchProduction" ):
                listener.exitCatchProduction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchProduction" ):
                return visitor.visitCatchProduction(self)
            else:
                return visitor.visitChildren(self)




    def catchProduction(self):

        localctx = TypeScriptParser.CatchProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_catchProduction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.match(TypeScriptParser.Catch)
            self.state = 1087
            self.match(TypeScriptParser.OpenParen)
            self.state = 1088
            self.match(TypeScriptParser.Identifier)
            self.state = 1089
            self.match(TypeScriptParser.CloseParen)
            self.state = 1090
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyProductionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Finally(self):
            return self.getToken(TypeScriptParser.Finally, 0)

        def block(self):
            return self.getTypedRuleContext(TypeScriptParser.BlockContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_finallyProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyProduction" ):
                listener.enterFinallyProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyProduction" ):
                listener.exitFinallyProduction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinallyProduction" ):
                return visitor.visitFinallyProduction(self)
            else:
                return visitor.visitChildren(self)




    def finallyProduction(self):

        localctx = TypeScriptParser.FinallyProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_finallyProduction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(TypeScriptParser.Finally)
            self.state = 1093
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DebuggerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Debugger(self):
            return self.getToken(TypeScriptParser.Debugger, 0)

        def eos(self):
            return self.getTypedRuleContext(TypeScriptParser.EosContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_debuggerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebuggerStatement" ):
                listener.enterDebuggerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebuggerStatement" ):
                listener.exitDebuggerStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDebuggerStatement" ):
                return visitor.visitDebuggerStatement(self)
            else:
                return visitor.visitChildren(self)




    def debuggerStatement(self):

        localctx = TypeScriptParser.DebuggerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_debuggerStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(TypeScriptParser.Debugger)
            self.state = 1096
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Function_(self):
            return self.getToken(TypeScriptParser.Function_, 0)

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def callSignature(self):
            return self.getTypedRuleContext(TypeScriptParser.CallSignatureContext,0)


        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def functionBody(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionBodyContext,0)


        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclaration" ):
                return visitor.visitFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclaration(self):

        localctx = TypeScriptParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_functionDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(TypeScriptParser.Function_)
            self.state = 1099
            self.match(TypeScriptParser.Identifier)
            self.state = 1100
            self.callSignature()
            self.state = 1106
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.OpenBrace]:
                self.state = 1101
                self.match(TypeScriptParser.OpenBrace)
                self.state = 1102
                self.functionBody()
                self.state = 1103
                self.match(TypeScriptParser.CloseBrace)
                pass
            elif token in [TypeScriptParser.SemiColon]:
                self.state = 1105
                self.match(TypeScriptParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(TypeScriptParser.Class, 0)

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def classHeritage(self):
            return self.getTypedRuleContext(TypeScriptParser.ClassHeritageContext,0)


        def classTail(self):
            return self.getTypedRuleContext(TypeScriptParser.ClassTailContext,0)


        def Abstract(self):
            return self.getToken(TypeScriptParser.Abstract, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclaration" ):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classDeclaration(self):

        localctx = TypeScriptParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Abstract:
                self.state = 1108
                self.match(TypeScriptParser.Abstract)


            self.state = 1111
            self.match(TypeScriptParser.Class)
            self.state = 1112
            self.match(TypeScriptParser.Identifier)
            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.LessThan:
                self.state = 1113
                self.typeParameters()


            self.state = 1116
            self.classHeritage()
            self.state = 1117
            self.classTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassHeritageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classExtendsClause(self):
            return self.getTypedRuleContext(TypeScriptParser.ClassExtendsClauseContext,0)


        def implementsClause(self):
            return self.getTypedRuleContext(TypeScriptParser.ImplementsClauseContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_classHeritage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassHeritage" ):
                listener.enterClassHeritage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassHeritage" ):
                listener.exitClassHeritage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassHeritage" ):
                return visitor.visitClassHeritage(self)
            else:
                return visitor.visitChildren(self)




    def classHeritage(self):

        localctx = TypeScriptParser.ClassHeritageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_classHeritage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Extends:
                self.state = 1119
                self.classExtendsClause()


            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Implements:
                self.state = 1122
                self.implementsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def classElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.ClassElementContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.ClassElementContext,i)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_classTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTail" ):
                listener.enterClassTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTail" ):
                listener.exitClassTail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTail" ):
                return visitor.visitClassTail(self)
            else:
                return visitor.visitChildren(self)




    def classTail(self):

        localctx = TypeScriptParser.ClassTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_classTail)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(TypeScriptParser.OpenBrace)
            self.state = 1129
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1126
                    self.classElement() 
                self.state = 1131
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

            self.state = 1132
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExtendsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extends(self):
            return self.getToken(TypeScriptParser.Extends, 0)

        def typeReference(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeReferenceContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_classExtendsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExtendsClause" ):
                listener.enterClassExtendsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExtendsClause" ):
                listener.exitClassExtendsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExtendsClause" ):
                return visitor.visitClassExtendsClause(self)
            else:
                return visitor.visitChildren(self)




    def classExtendsClause(self):

        localctx = TypeScriptParser.ClassExtendsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_classExtendsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(TypeScriptParser.Extends)
            self.state = 1135
            self.typeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Implements(self):
            return self.getToken(TypeScriptParser.Implements, 0)

        def classOrInterfaceTypeList(self):
            return self.getTypedRuleContext(TypeScriptParser.ClassOrInterfaceTypeListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_implementsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementsClause" ):
                listener.enterImplementsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementsClause" ):
                listener.exitImplementsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementsClause" ):
                return visitor.visitImplementsClause(self)
            else:
                return visitor.visitChildren(self)




    def implementsClause(self):

        localctx = TypeScriptParser.ImplementsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_implementsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(TypeScriptParser.Implements)
            self.state = 1138
            self.classOrInterfaceTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.ConstructorDeclarationContext,0)


        def propertyMemberDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertyMemberDeclarationContext,0)


        def decoratorList(self):
            return self.getTypedRuleContext(TypeScriptParser.DecoratorListContext,0)


        def indexMemberDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.IndexMemberDeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(TypeScriptParser.StatementContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_classElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassElement" ):
                listener.enterClassElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassElement" ):
                listener.exitClassElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassElement" ):
                return visitor.visitClassElement(self)
            else:
                return visitor.visitChildren(self)




    def classElement(self):

        localctx = TypeScriptParser.ClassElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_classElement)
        self._la = 0 # Token type
        try:
            self.state = 1147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1140
                self.constructorDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.At:
                    self.state = 1141
                    self.decoratorList()


                self.state = 1144
                self.propertyMemberDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1145
                self.indexMemberDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1146
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TypeScriptParser.RULE_propertyMemberDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PropertyDeclarationExpressionContext(PropertyMemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PropertyMemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyMemberBase(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertyMemberBaseContext,0)

        def propertyName(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertyNameContext,0)

        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)
        def QuestionMark(self):
            return self.getToken(TypeScriptParser.QuestionMark, 0)
        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)

        def initializer(self):
            return self.getTypedRuleContext(TypeScriptParser.InitializerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclarationExpression" ):
                listener.enterPropertyDeclarationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclarationExpression" ):
                listener.exitPropertyDeclarationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyDeclarationExpression" ):
                return visitor.visitPropertyDeclarationExpression(self)
            else:
                return visitor.visitChildren(self)


    class MethodDeclarationExpressionContext(PropertyMemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PropertyMemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyMemberBase(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertyMemberBaseContext,0)

        def propertyName(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertyNameContext,0)

        def callSignature(self):
            return self.getTypedRuleContext(TypeScriptParser.CallSignatureContext,0)

        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)
        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)
        def functionBody(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionBodyContext,0)

        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclarationExpression" ):
                listener.enterMethodDeclarationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclarationExpression" ):
                listener.exitMethodDeclarationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDeclarationExpression" ):
                return visitor.visitMethodDeclarationExpression(self)
            else:
                return visitor.visitChildren(self)


    class GetterSetterDeclarationExpressionContext(PropertyMemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PropertyMemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyMemberBase(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertyMemberBaseContext,0)

        def getAccessor(self):
            return self.getTypedRuleContext(TypeScriptParser.GetAccessorContext,0)

        def setAccessor(self):
            return self.getTypedRuleContext(TypeScriptParser.SetAccessorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetterSetterDeclarationExpression" ):
                listener.enterGetterSetterDeclarationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetterSetterDeclarationExpression" ):
                listener.exitGetterSetterDeclarationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetterSetterDeclarationExpression" ):
                return visitor.visitGetterSetterDeclarationExpression(self)
            else:
                return visitor.visitChildren(self)


    class AbstractMemberDeclarationContext(PropertyMemberDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PropertyMemberDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def abstractDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.AbstractDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractMemberDeclaration" ):
                listener.enterAbstractMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractMemberDeclaration" ):
                listener.exitAbstractMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractMemberDeclaration" ):
                return visitor.visitAbstractMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def propertyMemberDeclaration(self):

        localctx = TypeScriptParser.PropertyMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_propertyMemberDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                localctx = TypeScriptParser.PropertyDeclarationExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1149
                self.propertyMemberBase()
                self.state = 1150
                self.propertyName()
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.QuestionMark:
                    self.state = 1151
                    self.match(TypeScriptParser.QuestionMark)


                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.Colon:
                    self.state = 1154
                    self.typeAnnotation()


                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.Assign:
                    self.state = 1157
                    self.initializer()


                self.state = 1160
                self.match(TypeScriptParser.SemiColon)
                pass

            elif la_ == 2:
                localctx = TypeScriptParser.MethodDeclarationExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1162
                self.propertyMemberBase()
                self.state = 1163
                self.propertyName()
                self.state = 1164
                self.callSignature()
                self.state = 1170
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TypeScriptParser.OpenBrace]:
                    self.state = 1165
                    self.match(TypeScriptParser.OpenBrace)
                    self.state = 1166
                    self.functionBody()
                    self.state = 1167
                    self.match(TypeScriptParser.CloseBrace)
                    pass
                elif token in [TypeScriptParser.SemiColon]:
                    self.state = 1169
                    self.match(TypeScriptParser.SemiColon)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                localctx = TypeScriptParser.GetterSetterDeclarationExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1172
                self.propertyMemberBase()
                self.state = 1175
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TypeScriptParser.Get]:
                    self.state = 1173
                    self.getAccessor()
                    pass
                elif token in [TypeScriptParser.Set]:
                    self.state = 1174
                    self.setAccessor()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = TypeScriptParser.AbstractMemberDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1177
                self.abstractDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyMemberBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Async(self):
            return self.getToken(TypeScriptParser.Async, 0)

        def accessibilityModifier(self):
            return self.getTypedRuleContext(TypeScriptParser.AccessibilityModifierContext,0)


        def Static(self):
            return self.getToken(TypeScriptParser.Static, 0)

        def ReadOnly(self):
            return self.getToken(TypeScriptParser.ReadOnly, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_propertyMemberBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyMemberBase" ):
                listener.enterPropertyMemberBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyMemberBase" ):
                listener.exitPropertyMemberBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyMemberBase" ):
                return visitor.visitPropertyMemberBase(self)
            else:
                return visitor.visitChildren(self)




    def propertyMemberBase(self):

        localctx = TypeScriptParser.PropertyMemberBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_propertyMemberBase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1180
                self.match(TypeScriptParser.Async)


            self.state = 1184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1183
                self.accessibilityModifier()


            self.state = 1187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1186
                self.match(TypeScriptParser.Static)


            self.state = 1190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1189
                self.match(TypeScriptParser.ReadOnly)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexSignature(self):
            return self.getTypedRuleContext(TypeScriptParser.IndexSignatureContext,0)


        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_indexMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexMemberDeclaration" ):
                listener.enterIndexMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexMemberDeclaration" ):
                listener.exitIndexMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexMemberDeclaration" ):
                return visitor.visitIndexMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def indexMemberDeclaration(self):

        localctx = TypeScriptParser.IndexMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_indexMemberDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.indexSignature()
            self.state = 1193
            self.match(TypeScriptParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneratorMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def functionBody(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionBodyContext,0)


        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def Multiply(self):
            return self.getToken(TypeScriptParser.Multiply, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(TypeScriptParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_generatorMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneratorMethod" ):
                listener.enterGeneratorMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneratorMethod" ):
                listener.exitGeneratorMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneratorMethod" ):
                return visitor.visitGeneratorMethod(self)
            else:
                return visitor.visitChildren(self)




    def generatorMethod(self):

        localctx = TypeScriptParser.GeneratorMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_generatorMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Multiply:
                self.state = 1195
                self.match(TypeScriptParser.Multiply)


            self.state = 1198
            self.match(TypeScriptParser.Identifier)
            self.state = 1199
            self.match(TypeScriptParser.OpenParen)
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.Ellipsis))) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (TypeScriptParser.Private - 101)) | (1 << (TypeScriptParser.Public - 101)) | (1 << (TypeScriptParser.Protected - 101)) | (1 << (TypeScriptParser.TypeAlias - 101)) | (1 << (TypeScriptParser.Require - 101)) | (1 << (TypeScriptParser.At - 101)) | (1 << (TypeScriptParser.Identifier - 101)))) != 0):
                self.state = 1200
                self.formalParameterList()


            self.state = 1203
            self.match(TypeScriptParser.CloseParen)
            self.state = 1204
            self.match(TypeScriptParser.OpenBrace)
            self.state = 1205
            self.functionBody()
            self.state = 1206
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneratorFunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Function_(self):
            return self.getToken(TypeScriptParser.Function_, 0)

        def Multiply(self):
            return self.getToken(TypeScriptParser.Multiply, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def functionBody(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionBodyContext,0)


        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(TypeScriptParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_generatorFunctionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneratorFunctionDeclaration" ):
                listener.enterGeneratorFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneratorFunctionDeclaration" ):
                listener.exitGeneratorFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneratorFunctionDeclaration" ):
                return visitor.visitGeneratorFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def generatorFunctionDeclaration(self):

        localctx = TypeScriptParser.GeneratorFunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_generatorFunctionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.match(TypeScriptParser.Function_)
            self.state = 1209
            self.match(TypeScriptParser.Multiply)
            self.state = 1211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Identifier:
                self.state = 1210
                self.match(TypeScriptParser.Identifier)


            self.state = 1213
            self.match(TypeScriptParser.OpenParen)
            self.state = 1215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.Ellipsis))) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (TypeScriptParser.Private - 101)) | (1 << (TypeScriptParser.Public - 101)) | (1 << (TypeScriptParser.Protected - 101)) | (1 << (TypeScriptParser.TypeAlias - 101)) | (1 << (TypeScriptParser.Require - 101)) | (1 << (TypeScriptParser.At - 101)) | (1 << (TypeScriptParser.Identifier - 101)))) != 0):
                self.state = 1214
                self.formalParameterList()


            self.state = 1217
            self.match(TypeScriptParser.CloseParen)
            self.state = 1218
            self.match(TypeScriptParser.OpenBrace)
            self.state = 1219
            self.functionBody()
            self.state = 1220
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneratorBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def generatorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.GeneratorDefinitionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.GeneratorDefinitionContext,i)


        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_generatorBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneratorBlock" ):
                listener.enterGeneratorBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneratorBlock" ):
                listener.exitGeneratorBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneratorBlock" ):
                return visitor.visitGeneratorBlock(self)
            else:
                return visitor.visitChildren(self)




    def generatorBlock(self):

        localctx = TypeScriptParser.GeneratorBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_generatorBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self.match(TypeScriptParser.OpenBrace)
            self.state = 1223
            self.generatorDefinition()
            self.state = 1228
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1224
                    self.match(TypeScriptParser.Comma)
                    self.state = 1225
                    self.generatorDefinition() 
                self.state = 1230
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Comma:
                self.state = 1231
                self.match(TypeScriptParser.Comma)


            self.state = 1234
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneratorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Multiply(self):
            return self.getToken(TypeScriptParser.Multiply, 0)

        def iteratorDefinition(self):
            return self.getTypedRuleContext(TypeScriptParser.IteratorDefinitionContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_generatorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneratorDefinition" ):
                listener.enterGeneratorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneratorDefinition" ):
                listener.exitGeneratorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneratorDefinition" ):
                return visitor.visitGeneratorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def generatorDefinition(self):

        localctx = TypeScriptParser.GeneratorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_generatorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.match(TypeScriptParser.Multiply)
            self.state = 1237
            self.iteratorDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def iteratorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.IteratorDefinitionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.IteratorDefinitionContext,i)


        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_iteratorBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorBlock" ):
                listener.enterIteratorBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorBlock" ):
                listener.exitIteratorBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIteratorBlock" ):
                return visitor.visitIteratorBlock(self)
            else:
                return visitor.visitChildren(self)




    def iteratorBlock(self):

        localctx = TypeScriptParser.IteratorBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_iteratorBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(TypeScriptParser.OpenBrace)
            self.state = 1240
            self.iteratorDefinition()
            self.state = 1245
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1241
                    self.match(TypeScriptParser.Comma)
                    self.state = 1242
                    self.iteratorDefinition() 
                self.state = 1247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

            self.state = 1249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Comma:
                self.state = 1248
                self.match(TypeScriptParser.Comma)


            self.state = 1251
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBracket(self):
            return self.getToken(TypeScriptParser.OpenBracket, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def CloseBracket(self):
            return self.getToken(TypeScriptParser.CloseBracket, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def functionBody(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionBodyContext,0)


        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(TypeScriptParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_iteratorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorDefinition" ):
                listener.enterIteratorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorDefinition" ):
                listener.exitIteratorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIteratorDefinition" ):
                return visitor.visitIteratorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def iteratorDefinition(self):

        localctx = TypeScriptParser.IteratorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_iteratorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.match(TypeScriptParser.OpenBracket)
            self.state = 1254
            self.singleExpression(0)
            self.state = 1255
            self.match(TypeScriptParser.CloseBracket)
            self.state = 1256
            self.match(TypeScriptParser.OpenParen)
            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.Ellipsis))) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (TypeScriptParser.Private - 101)) | (1 << (TypeScriptParser.Public - 101)) | (1 << (TypeScriptParser.Protected - 101)) | (1 << (TypeScriptParser.TypeAlias - 101)) | (1 << (TypeScriptParser.Require - 101)) | (1 << (TypeScriptParser.At - 101)) | (1 << (TypeScriptParser.Identifier - 101)))) != 0):
                self.state = 1257
                self.formalParameterList()


            self.state = 1260
            self.match(TypeScriptParser.CloseParen)
            self.state = 1261
            self.match(TypeScriptParser.OpenBrace)
            self.state = 1262
            self.functionBody()
            self.state = 1263
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameterArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.FormalParameterArgContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.FormalParameterArgContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def lastFormalParameterArg(self):
            return self.getTypedRuleContext(TypeScriptParser.LastFormalParameterArgContext,0)


        def arrayLiteral(self):
            return self.getTypedRuleContext(TypeScriptParser.ArrayLiteralContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(TypeScriptParser.ObjectLiteralContext,0)


        def Colon(self):
            return self.getToken(TypeScriptParser.Colon, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(TypeScriptParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterList" ):
                return visitor.visitFormalParameterList(self)
            else:
                return visitor.visitChildren(self)




    def formalParameterList(self):

        localctx = TypeScriptParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 1284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.Private, TypeScriptParser.Public, TypeScriptParser.Protected, TypeScriptParser.TypeAlias, TypeScriptParser.Require, TypeScriptParser.At, TypeScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1265
                self.formalParameterArg()
                self.state = 1270
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1266
                        self.match(TypeScriptParser.Comma)
                        self.state = 1267
                        self.formalParameterArg() 
                    self.state = 1272
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

                self.state = 1275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.Comma:
                    self.state = 1273
                    self.match(TypeScriptParser.Comma)
                    self.state = 1274
                    self.lastFormalParameterArg()


                pass
            elif token in [TypeScriptParser.Ellipsis]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1277
                self.lastFormalParameterArg()
                pass
            elif token in [TypeScriptParser.OpenBracket]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1278
                self.arrayLiteral()
                pass
            elif token in [TypeScriptParser.OpenBrace]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1279
                self.objectLiteral()
                self.state = 1282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.Colon:
                    self.state = 1280
                    self.match(TypeScriptParser.Colon)
                    self.state = 1281
                    self.formalParameterList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrKeyWord(self):
            return self.getTypedRuleContext(TypeScriptParser.IdentifierOrKeyWordContext,0)


        def decorator(self):
            return self.getTypedRuleContext(TypeScriptParser.DecoratorContext,0)


        def accessibilityModifier(self):
            return self.getTypedRuleContext(TypeScriptParser.AccessibilityModifierContext,0)


        def QuestionMark(self):
            return self.getToken(TypeScriptParser.QuestionMark, 0)

        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def Assign(self):
            return self.getToken(TypeScriptParser.Assign, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_formalParameterArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterArg" ):
                listener.enterFormalParameterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterArg" ):
                listener.exitFormalParameterArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterArg" ):
                return visitor.visitFormalParameterArg(self)
            else:
                return visitor.visitChildren(self)




    def formalParameterArg(self):

        localctx = TypeScriptParser.FormalParameterArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_formalParameterArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.At:
                self.state = 1286
                self.decorator()


            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (TypeScriptParser.Private - 101)) | (1 << (TypeScriptParser.Public - 101)) | (1 << (TypeScriptParser.Protected - 101)))) != 0):
                self.state = 1289
                self.accessibilityModifier()


            self.state = 1292
            self.identifierOrKeyWord()
            self.state = 1294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.QuestionMark:
                self.state = 1293
                self.match(TypeScriptParser.QuestionMark)


            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Colon:
                self.state = 1296
                self.typeAnnotation()


            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Assign:
                self.state = 1299
                self.match(TypeScriptParser.Assign)
                self.state = 1300
                self.singleExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ellipsis(self):
            return self.getToken(TypeScriptParser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_lastFormalParameterArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameterArg" ):
                listener.enterLastFormalParameterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameterArg" ):
                listener.exitLastFormalParameterArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastFormalParameterArg" ):
                return visitor.visitLastFormalParameterArg(self)
            else:
                return visitor.visitChildren(self)




    def lastFormalParameterArg(self):

        localctx = TypeScriptParser.LastFormalParameterArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_lastFormalParameterArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.match(TypeScriptParser.Ellipsis)
            self.state = 1304
            self.match(TypeScriptParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceElements(self):
            return self.getTypedRuleContext(TypeScriptParser.SourceElementsContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionBody" ):
                return visitor.visitFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def functionBody(self):

        localctx = TypeScriptParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 1306
                self.sourceElements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SourceElementContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SourceElementContext,i)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_sourceElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceElements" ):
                listener.enterSourceElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceElements" ):
                listener.exitSourceElements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceElements" ):
                return visitor.visitSourceElements(self)
            else:
                return visitor.visitChildren(self)




    def sourceElements(self):

        localctx = TypeScriptParser.SourceElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_sourceElements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1309
                    self.sourceElement()

                else:
                    raise NoViableAltException(self)
                self.state = 1312 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBracket(self):
            return self.getToken(TypeScriptParser.OpenBracket, 0)

        def CloseBracket(self):
            return self.getToken(TypeScriptParser.CloseBracket, 0)

        def elementList(self):
            return self.getTypedRuleContext(TypeScriptParser.ElementListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = TypeScriptParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(TypeScriptParser.OpenBracket)
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.RegularExpressionLiteral) | (1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenParen) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.Ellipsis) | (1 << TypeScriptParser.PlusPlus) | (1 << TypeScriptParser.MinusMinus) | (1 << TypeScriptParser.Plus) | (1 << TypeScriptParser.Minus) | (1 << TypeScriptParser.BitNot) | (1 << TypeScriptParser.Not) | (1 << TypeScriptParser.LessThan) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.DecimalLiteral) | (1 << TypeScriptParser.HexIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral2) | (1 << TypeScriptParser.BinaryIntegerLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.Identifier - 64)) | (1 << (TypeScriptParser.StringLiteral - 64)) | (1 << (TypeScriptParser.BackTick - 64)))) != 0):
                self.state = 1315
                self.elementList()


            self.state = 1318
            self.match(TypeScriptParser.CloseBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.ArrayElementContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.ArrayElementContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_elementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementList" ):
                listener.enterElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementList" ):
                listener.exitElementList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementList" ):
                return visitor.visitElementList(self)
            else:
                return visitor.visitChildren(self)




    def elementList(self):

        localctx = TypeScriptParser.ElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_elementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self.arrayElement()
            self.state = 1329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TypeScriptParser.Comma:
                self.state = 1322 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1321
                    self.match(TypeScriptParser.Comma)
                    self.state = 1324 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TypeScriptParser.Comma):
                        break

                self.state = 1326
                self.arrayElement()
                self.state = 1331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def Ellipsis(self):
            return self.getToken(TypeScriptParser.Ellipsis, 0)

        def Comma(self):
            return self.getToken(TypeScriptParser.Comma, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_arrayElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayElement" ):
                listener.enterArrayElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayElement" ):
                listener.exitArrayElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayElement" ):
                return visitor.visitArrayElement(self)
            else:
                return visitor.visitChildren(self)




    def arrayElement(self):

        localctx = TypeScriptParser.ArrayElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_arrayElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Ellipsis:
                self.state = 1332
                self.match(TypeScriptParser.Ellipsis)


            self.state = 1337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1335
                self.singleExpression(0)
                pass

            elif la_ == 2:
                self.state = 1336
                self.match(TypeScriptParser.Identifier)
                pass


            self.state = 1340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1339
                self.match(TypeScriptParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def propertyAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.PropertyAssignmentContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.PropertyAssignmentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_objectLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectLiteral" ):
                return visitor.visitObjectLiteral(self)
            else:
                return visitor.visitChildren(self)




    def objectLiteral(self):

        localctx = TypeScriptParser.ObjectLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_objectLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(TypeScriptParser.OpenBrace)
            self.state = 1351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.Ellipsis) | (1 << TypeScriptParser.Multiply) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.DecimalLiteral) | (1 << TypeScriptParser.HexIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral2) | (1 << TypeScriptParser.BinaryIntegerLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.Identifier - 64)) | (1 << (TypeScriptParser.StringLiteral - 64)))) != 0):
                self.state = 1343
                self.propertyAssignment()
                self.state = 1348
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1344
                        self.match(TypeScriptParser.Comma)
                        self.state = 1345
                        self.propertyAssignment() 
                    self.state = 1350
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)



            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Comma:
                self.state = 1353
                self.match(TypeScriptParser.Comma)


            self.state = 1356
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TypeScriptParser.RULE_propertyAssignment

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PropertyExpressionAssignmentContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyName(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertyNameContext,0)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)

        def Colon(self):
            return self.getToken(TypeScriptParser.Colon, 0)
        def Assign(self):
            return self.getToken(TypeScriptParser.Assign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyExpressionAssignment" ):
                listener.enterPropertyExpressionAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyExpressionAssignment" ):
                listener.exitPropertyExpressionAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyExpressionAssignment" ):
                return visitor.visitPropertyExpressionAssignment(self)
            else:
                return visitor.visitChildren(self)


    class ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenBracket(self):
            return self.getToken(TypeScriptParser.OpenBracket, 0)
        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def CloseBracket(self):
            return self.getToken(TypeScriptParser.CloseBracket, 0)
        def Colon(self):
            return self.getToken(TypeScriptParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComputedPropertyExpressionAssignment" ):
                listener.enterComputedPropertyExpressionAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComputedPropertyExpressionAssignment" ):
                listener.exitComputedPropertyExpressionAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComputedPropertyExpressionAssignment" ):
                return visitor.visitComputedPropertyExpressionAssignment(self)
            else:
                return visitor.visitChildren(self)


    class PropertyShorthandContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifierOrKeyWord(self):
            return self.getTypedRuleContext(TypeScriptParser.IdentifierOrKeyWordContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyShorthand" ):
                listener.enterPropertyShorthand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyShorthand" ):
                listener.exitPropertyShorthand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyShorthand" ):
                return visitor.visitPropertyShorthand(self)
            else:
                return visitor.visitChildren(self)


    class PropertySetterContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setAccessor(self):
            return self.getTypedRuleContext(TypeScriptParser.SetAccessorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySetter" ):
                listener.enterPropertySetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySetter" ):
                listener.exitPropertySetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertySetter" ):
                return visitor.visitPropertySetter(self)
            else:
                return visitor.visitChildren(self)


    class PropertyGetterContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def getAccessor(self):
            return self.getTypedRuleContext(TypeScriptParser.GetAccessorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetter" ):
                listener.enterPropertyGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetter" ):
                listener.exitPropertyGetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyGetter" ):
                return visitor.visitPropertyGetter(self)
            else:
                return visitor.visitChildren(self)


    class RestParameterInObjectContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def restParameter(self):
            return self.getTypedRuleContext(TypeScriptParser.RestParameterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestParameterInObject" ):
                listener.enterRestParameterInObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestParameterInObject" ):
                listener.exitRestParameterInObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestParameterInObject" ):
                return visitor.visitRestParameterInObject(self)
            else:
                return visitor.visitChildren(self)


    class MethodPropertyContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def generatorMethod(self):
            return self.getTypedRuleContext(TypeScriptParser.GeneratorMethodContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodProperty" ):
                listener.enterMethodProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodProperty" ):
                listener.exitMethodProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodProperty" ):
                return visitor.visitMethodProperty(self)
            else:
                return visitor.visitChildren(self)



    def propertyAssignment(self):

        localctx = TypeScriptParser.PropertyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_propertyAssignment)
        self._la = 0 # Token type
        try:
            self.state = 1373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                localctx = TypeScriptParser.PropertyExpressionAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1358
                self.propertyName()
                self.state = 1359
                _la = self._input.LA(1)
                if not(_la==TypeScriptParser.Assign or _la==TypeScriptParser.Colon):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1360
                self.singleExpression(0)
                pass

            elif la_ == 2:
                localctx = TypeScriptParser.ComputedPropertyExpressionAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1362
                self.match(TypeScriptParser.OpenBracket)
                self.state = 1363
                self.singleExpression(0)
                self.state = 1364
                self.match(TypeScriptParser.CloseBracket)
                self.state = 1365
                self.match(TypeScriptParser.Colon)
                self.state = 1366
                self.singleExpression(0)
                pass

            elif la_ == 3:
                localctx = TypeScriptParser.PropertyGetterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1368
                self.getAccessor()
                pass

            elif la_ == 4:
                localctx = TypeScriptParser.PropertySetterContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1369
                self.setAccessor()
                pass

            elif la_ == 5:
                localctx = TypeScriptParser.MethodPropertyContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1370
                self.generatorMethod()
                pass

            elif la_ == 6:
                localctx = TypeScriptParser.PropertyShorthandContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1371
                self.identifierOrKeyWord()
                pass

            elif la_ == 7:
                localctx = TypeScriptParser.RestParameterInObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1372
                self.restParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetAccessorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getter(self):
            return self.getTypedRuleContext(TypeScriptParser.GetterContext,0)


        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def functionBody(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionBodyContext,0)


        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_getAccessor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetAccessor" ):
                listener.enterGetAccessor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetAccessor" ):
                listener.exitGetAccessor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetAccessor" ):
                return visitor.visitGetAccessor(self)
            else:
                return visitor.visitChildren(self)




    def getAccessor(self):

        localctx = TypeScriptParser.GetAccessorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_getAccessor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1375
            self.getter()
            self.state = 1376
            self.match(TypeScriptParser.OpenParen)
            self.state = 1377
            self.match(TypeScriptParser.CloseParen)
            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Colon:
                self.state = 1378
                self.typeAnnotation()


            self.state = 1381
            self.match(TypeScriptParser.OpenBrace)
            self.state = 1382
            self.functionBody()
            self.state = 1383
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetAccessorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setter(self):
            return self.getTypedRuleContext(TypeScriptParser.SetterContext,0)


        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def functionBody(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionBodyContext,0)


        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def bindingPattern(self):
            return self.getTypedRuleContext(TypeScriptParser.BindingPatternContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_setAccessor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAccessor" ):
                listener.enterSetAccessor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAccessor" ):
                listener.exitSetAccessor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetAccessor" ):
                return visitor.visitSetAccessor(self)
            else:
                return visitor.visitChildren(self)




    def setAccessor(self):

        localctx = TypeScriptParser.SetAccessorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_setAccessor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.setter()
            self.state = 1386
            self.match(TypeScriptParser.OpenParen)
            self.state = 1389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.Identifier]:
                self.state = 1387
                self.match(TypeScriptParser.Identifier)
                pass
            elif token in [TypeScriptParser.OpenBracket, TypeScriptParser.OpenBrace]:
                self.state = 1388
                self.bindingPattern()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Colon:
                self.state = 1391
                self.typeAnnotation()


            self.state = 1394
            self.match(TypeScriptParser.CloseParen)
            self.state = 1395
            self.match(TypeScriptParser.OpenBrace)
            self.state = 1396
            self.functionBody()
            self.state = 1397
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierName(self):
            return self.getTypedRuleContext(TypeScriptParser.IdentifierNameContext,0)


        def StringLiteral(self):
            return self.getToken(TypeScriptParser.StringLiteral, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(TypeScriptParser.NumericLiteralContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_propertyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyName" ):
                listener.enterPropertyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyName" ):
                listener.exitPropertyName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyName" ):
                return visitor.visitPropertyName(self)
            else:
                return visitor.visitChildren(self)




    def propertyName(self):

        localctx = TypeScriptParser.PropertyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_propertyName)
        try:
            self.state = 1402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.NullLiteral, TypeScriptParser.BooleanLiteral, TypeScriptParser.Break, TypeScriptParser.Do, TypeScriptParser.Instanceof, TypeScriptParser.Typeof, TypeScriptParser.Case, TypeScriptParser.Else, TypeScriptParser.New, TypeScriptParser.Var, TypeScriptParser.Catch, TypeScriptParser.Finally, TypeScriptParser.Return, TypeScriptParser.Void, TypeScriptParser.Continue, TypeScriptParser.For, TypeScriptParser.Switch, TypeScriptParser.While, TypeScriptParser.Debugger, TypeScriptParser.Function_, TypeScriptParser.This, TypeScriptParser.With, TypeScriptParser.Default, TypeScriptParser.If, TypeScriptParser.Throw, TypeScriptParser.Delete, TypeScriptParser.In, TypeScriptParser.Try, TypeScriptParser.From, TypeScriptParser.ReadOnly, TypeScriptParser.Async, TypeScriptParser.Class, TypeScriptParser.Enum, TypeScriptParser.Extends, TypeScriptParser.Super, TypeScriptParser.Const, TypeScriptParser.Export, TypeScriptParser.Import, TypeScriptParser.Implements, TypeScriptParser.Let, TypeScriptParser.Private, TypeScriptParser.Public, TypeScriptParser.Interface, TypeScriptParser.Package, TypeScriptParser.Protected, TypeScriptParser.Static, TypeScriptParser.Yield, TypeScriptParser.String, TypeScriptParser.TypeAlias, TypeScriptParser.Get, TypeScriptParser.Set, TypeScriptParser.Require, TypeScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1399
                self.identifierName()
                pass
            elif token in [TypeScriptParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1400
                self.match(TypeScriptParser.StringLiteral)
                pass
            elif token in [TypeScriptParser.DecimalLiteral, TypeScriptParser.HexIntegerLiteral, TypeScriptParser.OctalIntegerLiteral, TypeScriptParser.OctalIntegerLiteral2, TypeScriptParser.BinaryIntegerLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1401
                self.numericLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def argumentList(self):
            return self.getTypedRuleContext(TypeScriptParser.ArgumentListContext,0)


        def Comma(self):
            return self.getToken(TypeScriptParser.Comma, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = TypeScriptParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.match(TypeScriptParser.OpenParen)
            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.RegularExpressionLiteral) | (1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenParen) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.Ellipsis) | (1 << TypeScriptParser.PlusPlus) | (1 << TypeScriptParser.MinusMinus) | (1 << TypeScriptParser.Plus) | (1 << TypeScriptParser.Minus) | (1 << TypeScriptParser.BitNot) | (1 << TypeScriptParser.Not) | (1 << TypeScriptParser.LessThan) | (1 << TypeScriptParser.NullLiteral) | (1 << TypeScriptParser.BooleanLiteral) | (1 << TypeScriptParser.DecimalLiteral) | (1 << TypeScriptParser.HexIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral2) | (1 << TypeScriptParser.BinaryIntegerLiteral) | (1 << TypeScriptParser.Break) | (1 << TypeScriptParser.Do))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TypeScriptParser.Instanceof - 64)) | (1 << (TypeScriptParser.Typeof - 64)) | (1 << (TypeScriptParser.Case - 64)) | (1 << (TypeScriptParser.Else - 64)) | (1 << (TypeScriptParser.New - 64)) | (1 << (TypeScriptParser.Var - 64)) | (1 << (TypeScriptParser.Catch - 64)) | (1 << (TypeScriptParser.Finally - 64)) | (1 << (TypeScriptParser.Return - 64)) | (1 << (TypeScriptParser.Void - 64)) | (1 << (TypeScriptParser.Continue - 64)) | (1 << (TypeScriptParser.For - 64)) | (1 << (TypeScriptParser.Switch - 64)) | (1 << (TypeScriptParser.While - 64)) | (1 << (TypeScriptParser.Debugger - 64)) | (1 << (TypeScriptParser.Function_ - 64)) | (1 << (TypeScriptParser.This - 64)) | (1 << (TypeScriptParser.With - 64)) | (1 << (TypeScriptParser.Default - 64)) | (1 << (TypeScriptParser.If - 64)) | (1 << (TypeScriptParser.Throw - 64)) | (1 << (TypeScriptParser.Delete - 64)) | (1 << (TypeScriptParser.In - 64)) | (1 << (TypeScriptParser.Try - 64)) | (1 << (TypeScriptParser.From - 64)) | (1 << (TypeScriptParser.ReadOnly - 64)) | (1 << (TypeScriptParser.Async - 64)) | (1 << (TypeScriptParser.Class - 64)) | (1 << (TypeScriptParser.Enum - 64)) | (1 << (TypeScriptParser.Extends - 64)) | (1 << (TypeScriptParser.Super - 64)) | (1 << (TypeScriptParser.Const - 64)) | (1 << (TypeScriptParser.Export - 64)) | (1 << (TypeScriptParser.Import - 64)) | (1 << (TypeScriptParser.Implements - 64)) | (1 << (TypeScriptParser.Let - 64)) | (1 << (TypeScriptParser.Private - 64)) | (1 << (TypeScriptParser.Public - 64)) | (1 << (TypeScriptParser.Interface - 64)) | (1 << (TypeScriptParser.Package - 64)) | (1 << (TypeScriptParser.Protected - 64)) | (1 << (TypeScriptParser.Static - 64)) | (1 << (TypeScriptParser.Yield - 64)) | (1 << (TypeScriptParser.String - 64)) | (1 << (TypeScriptParser.TypeAlias - 64)) | (1 << (TypeScriptParser.Get - 64)) | (1 << (TypeScriptParser.Set - 64)) | (1 << (TypeScriptParser.Require - 64)) | (1 << (TypeScriptParser.Identifier - 64)) | (1 << (TypeScriptParser.StringLiteral - 64)) | (1 << (TypeScriptParser.BackTick - 64)))) != 0):
                self.state = 1405
                self.argumentList()
                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.Comma:
                    self.state = 1406
                    self.match(TypeScriptParser.Comma)




            self.state = 1411
            self.match(TypeScriptParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.ArgumentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = TypeScriptParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_argumentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            self.argument()
            self.state = 1418
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1414
                    self.match(TypeScriptParser.Comma)
                    self.state = 1415
                    self.argument() 
                self.state = 1420
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def Ellipsis(self):
            return self.getToken(TypeScriptParser.Ellipsis, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = TypeScriptParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Ellipsis:
                self.state = 1421
                self.match(TypeScriptParser.Ellipsis)


            self.state = 1426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 1424
                self.singleExpression(0)
                pass

            elif la_ == 2:
                self.state = 1425
                self.match(TypeScriptParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionSequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.Comma)
            else:
                return self.getToken(TypeScriptParser.Comma, i)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_expressionSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionSequence" ):
                listener.enterExpressionSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionSequence" ):
                listener.exitExpressionSequence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionSequence" ):
                return visitor.visitExpressionSequence(self)
            else:
                return visitor.visitChildren(self)




    def expressionSequence(self):

        localctx = TypeScriptParser.ExpressionSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_expressionSequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self.singleExpression(0)
            self.state = 1433
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,183,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1429
                    self.match(TypeScriptParser.Comma)
                    self.state = 1430
                    self.singleExpression(0) 
                self.state = 1435
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionExpressionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Function_(self):
            return self.getToken(TypeScriptParser.Function_, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def functionBody(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionBodyContext,0)


        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(TypeScriptParser.FormalParameterListContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_functionExpressionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionExpressionDeclaration" ):
                listener.enterFunctionExpressionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionExpressionDeclaration" ):
                listener.exitFunctionExpressionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionExpressionDeclaration" ):
                return visitor.visitFunctionExpressionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def functionExpressionDeclaration(self):

        localctx = TypeScriptParser.FunctionExpressionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_functionExpressionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.match(TypeScriptParser.Function_)
            self.state = 1438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Identifier:
                self.state = 1437
                self.match(TypeScriptParser.Identifier)


            self.state = 1440
            self.match(TypeScriptParser.OpenParen)
            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.Ellipsis))) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (TypeScriptParser.Private - 101)) | (1 << (TypeScriptParser.Public - 101)) | (1 << (TypeScriptParser.Protected - 101)) | (1 << (TypeScriptParser.TypeAlias - 101)) | (1 << (TypeScriptParser.Require - 101)) | (1 << (TypeScriptParser.At - 101)) | (1 << (TypeScriptParser.Identifier - 101)))) != 0):
                self.state = 1441
                self.formalParameterList()


            self.state = 1444
            self.match(TypeScriptParser.CloseParen)
            self.state = 1446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Colon:
                self.state = 1445
                self.typeAnnotation()


            self.state = 1448
            self.match(TypeScriptParser.OpenBrace)
            self.state = 1449
            self.functionBody()
            self.state = 1450
            self.match(TypeScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TypeScriptParser.RULE_singleExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TemplateStringExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)

        def templateStringLiteral(self):
            return self.getTypedRuleContext(TypeScriptParser.TemplateStringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStringExpression" ):
                listener.enterTemplateStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStringExpression" ):
                listener.exitTemplateStringExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateStringExpression" ):
                return visitor.visitTemplateStringExpression(self)
            else:
                return visitor.visitChildren(self)


    class TernaryExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def QuestionMark(self):
            return self.getToken(TypeScriptParser.QuestionMark, 0)
        def Colon(self):
            return self.getToken(TypeScriptParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryExpression" ):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryExpression" ):
                listener.exitTernaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTernaryExpression" ):
                return visitor.visitTernaryExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalAndExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def And(self):
            return self.getToken(TypeScriptParser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class GeneratorsExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def generatorBlock(self):
            return self.getTypedRuleContext(TypeScriptParser.GeneratorBlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneratorsExpression" ):
                listener.enterGeneratorsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneratorsExpression" ):
                listener.exitGeneratorsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneratorsExpression" ):
                return visitor.visitGeneratorsExpression(self)
            else:
                return visitor.visitChildren(self)


    class PreIncrementExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PlusPlus(self):
            return self.getToken(TypeScriptParser.PlusPlus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreIncrementExpression" ):
                listener.enterPreIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreIncrementExpression" ):
                listener.exitPreIncrementExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreIncrementExpression" ):
                return visitor.visitPreIncrementExpression(self)
            else:
                return visitor.visitChildren(self)


    class ObjectLiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def objectLiteral(self):
            return self.getTypedRuleContext(TypeScriptParser.ObjectLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteralExpression" ):
                listener.enterObjectLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteralExpression" ):
                listener.exitObjectLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectLiteralExpression" ):
                return visitor.visitObjectLiteralExpression(self)
            else:
                return visitor.visitChildren(self)


    class InExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def In(self):
            return self.getToken(TypeScriptParser.In, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInExpression" ):
                listener.enterInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInExpression" ):
                listener.exitInExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInExpression" ):
                return visitor.visitInExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def Or(self):
            return self.getToken(TypeScriptParser.Or, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class GenericTypesContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeArguments(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeArgumentsContext,0)

        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericTypes" ):
                listener.enterGenericTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericTypes" ):
                listener.exitGenericTypes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericTypes" ):
                return visitor.visitGenericTypes(self)
            else:
                return visitor.visitChildren(self)


    class NotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Not(self):
            return self.getToken(TypeScriptParser.Not, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpression" ):
                return visitor.visitNotExpression(self)
            else:
                return visitor.visitChildren(self)


    class PreDecreaseExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MinusMinus(self):
            return self.getToken(TypeScriptParser.MinusMinus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreDecreaseExpression" ):
                listener.enterPreDecreaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreDecreaseExpression" ):
                listener.exitPreDecreaseExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreDecreaseExpression" ):
                return visitor.visitPreDecreaseExpression(self)
            else:
                return visitor.visitChildren(self)


    class ArgumentsExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)

        def arguments(self):
            return self.getTypedRuleContext(TypeScriptParser.ArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentsExpression" ):
                listener.enterArgumentsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentsExpression" ):
                listener.exitArgumentsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentsExpression" ):
                return visitor.visitArgumentsExpression(self)
            else:
                return visitor.visitChildren(self)


    class ThisExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def This(self):
            return self.getToken(TypeScriptParser.This, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThisExpression" ):
                return visitor.visitThisExpression(self)
            else:
                return visitor.visitChildren(self)


    class FunctionExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionExpressionDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionExpressionDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionExpression" ):
                listener.enterFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionExpression" ):
                listener.exitFunctionExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionExpression" ):
                return visitor.visitFunctionExpression(self)
            else:
                return visitor.visitChildren(self)


    class UnaryMinusExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Minus(self):
            return self.getToken(TypeScriptParser.Minus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryMinusExpression" ):
                listener.enterUnaryMinusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryMinusExpression" ):
                listener.exitUnaryMinusExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryMinusExpression" ):
                return visitor.visitUnaryMinusExpression(self)
            else:
                return visitor.visitChildren(self)


    class AssignmentExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def Assign(self):
            return self.getToken(TypeScriptParser.Assign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentExpression" ):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)


    class PostDecreaseExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)

        def MinusMinus(self):
            return self.getToken(TypeScriptParser.MinusMinus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostDecreaseExpression" ):
                listener.enterPostDecreaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostDecreaseExpression" ):
                listener.exitPostDecreaseExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostDecreaseExpression" ):
                return visitor.visitPostDecreaseExpression(self)
            else:
                return visitor.visitChildren(self)


    class TypeofExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typeof(self):
            return self.getToken(TypeScriptParser.Typeof, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeofExpression" ):
                return visitor.visitTypeofExpression(self)
            else:
                return visitor.visitChildren(self)


    class InstanceofExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def Instanceof(self):
            return self.getToken(TypeScriptParser.Instanceof, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceofExpression" ):
                listener.enterInstanceofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceofExpression" ):
                listener.exitInstanceofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstanceofExpression" ):
                return visitor.visitInstanceofExpression(self)
            else:
                return visitor.visitChildren(self)


    class UnaryPlusExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Plus(self):
            return self.getToken(TypeScriptParser.Plus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPlusExpression" ):
                listener.enterUnaryPlusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPlusExpression" ):
                listener.exitUnaryPlusExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryPlusExpression" ):
                return visitor.visitUnaryPlusExpression(self)
            else:
                return visitor.visitChildren(self)


    class DeleteExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(TypeScriptParser.Delete, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteExpression" ):
                listener.enterDeleteExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteExpression" ):
                listener.exitDeleteExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteExpression" ):
                return visitor.visitDeleteExpression(self)
            else:
                return visitor.visitChildren(self)


    class GeneratorsFunctionExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def generatorFunctionDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.GeneratorFunctionDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneratorsFunctionExpression" ):
                listener.enterGeneratorsFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneratorsFunctionExpression" ):
                listener.exitGeneratorsFunctionExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneratorsFunctionExpression" ):
                return visitor.visitGeneratorsFunctionExpression(self)
            else:
                return visitor.visitChildren(self)


    class ArrowFunctionExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrowFunctionDeclaration(self):
            return self.getTypedRuleContext(TypeScriptParser.ArrowFunctionDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunctionExpression" ):
                listener.enterArrowFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunctionExpression" ):
                listener.exitArrowFunctionExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrowFunctionExpression" ):
                return visitor.visitArrowFunctionExpression(self)
            else:
                return visitor.visitChildren(self)


    class IteratorsExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def iteratorBlock(self):
            return self.getTypedRuleContext(TypeScriptParser.IteratorBlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorsExpression" ):
                listener.enterIteratorsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorsExpression" ):
                listener.exitIteratorsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIteratorsExpression" ):
                return visitor.visitIteratorsExpression(self)
            else:
                return visitor.visitChildren(self)


    class EqualityExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def Equals_(self):
            return self.getToken(TypeScriptParser.Equals_, 0)
        def NotEquals(self):
            return self.getToken(TypeScriptParser.NotEquals, 0)
        def IdentityEquals(self):
            return self.getToken(TypeScriptParser.IdentityEquals, 0)
        def IdentityNotEquals(self):
            return self.getToken(TypeScriptParser.IdentityNotEquals, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitXOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def BitXOr(self):
            return self.getToken(TypeScriptParser.BitXOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitXOrExpression" ):
                listener.enterBitXOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitXOrExpression" ):
                listener.exitBitXOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitXOrExpression" ):
                return visitor.visitBitXOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class CastAsExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)

        def As(self):
            return self.getToken(TypeScriptParser.As, 0)
        def asExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.AsExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastAsExpression" ):
                listener.enterCastAsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastAsExpression" ):
                listener.exitCastAsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastAsExpression" ):
                return visitor.visitCastAsExpression(self)
            else:
                return visitor.visitChildren(self)


    class SuperExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Super(self):
            return self.getToken(TypeScriptParser.Super, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperExpression" ):
                listener.enterSuperExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperExpression" ):
                listener.exitSuperExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperExpression" ):
                return visitor.visitSuperExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicativeExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def Multiply(self):
            return self.getToken(TypeScriptParser.Multiply, 0)
        def Divide(self):
            return self.getToken(TypeScriptParser.Divide, 0)
        def Modulus(self):
            return self.getToken(TypeScriptParser.Modulus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitShiftExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def LeftShiftArithmetic(self):
            return self.getToken(TypeScriptParser.LeftShiftArithmetic, 0)
        def RightShiftArithmetic(self):
            return self.getToken(TypeScriptParser.RightShiftArithmetic, 0)
        def RightShiftLogical(self):
            return self.getToken(TypeScriptParser.RightShiftLogical, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitShiftExpression" ):
                listener.enterBitShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitShiftExpression" ):
                listener.exitBitShiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitShiftExpression" ):
                return visitor.visitBitShiftExpression(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class AdditiveExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def Plus(self):
            return self.getToken(TypeScriptParser.Plus, 0)
        def Minus(self):
            return self.getToken(TypeScriptParser.Minus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)


    class RelationalExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def LessThan(self):
            return self.getToken(TypeScriptParser.LessThan, 0)
        def MoreThan(self):
            return self.getToken(TypeScriptParser.MoreThan, 0)
        def LessThanEquals(self):
            return self.getToken(TypeScriptParser.LessThanEquals, 0)
        def GreaterThanEquals(self):
            return self.getToken(TypeScriptParser.GreaterThanEquals, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)


    class PostIncrementExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)

        def PlusPlus(self):
            return self.getToken(TypeScriptParser.PlusPlus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostIncrementExpression" ):
                listener.enterPostIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostIncrementExpression" ):
                listener.exitPostIncrementExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostIncrementExpression" ):
                return visitor.visitPostIncrementExpression(self)
            else:
                return visitor.visitChildren(self)


    class YieldExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yieldStatement(self):
            return self.getTypedRuleContext(TypeScriptParser.YieldStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldExpression" ):
                listener.enterYieldExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldExpression" ):
                listener.exitYieldExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYieldExpression" ):
                return visitor.visitYieldExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitNotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BitNot(self):
            return self.getToken(TypeScriptParser.BitNot, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitNotExpression" ):
                listener.enterBitNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitNotExpression" ):
                listener.exitBitNotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitNotExpression" ):
                return visitor.visitBitNotExpression(self)
            else:
                return visitor.visitChildren(self)


    class NewExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(TypeScriptParser.New, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)

        def arguments(self):
            return self.getTypedRuleContext(TypeScriptParser.ArgumentsContext,0)

        def typeArguments(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExpression" ):
                return visitor.visitNewExpression(self)
            else:
                return visitor.visitChildren(self)


    class LiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(TypeScriptParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpression" ):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)


    class ArrayLiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrayLiteral(self):
            return self.getTypedRuleContext(TypeScriptParser.ArrayLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteralExpression" ):
                listener.enterArrayLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteralExpression" ):
                listener.exitArrayLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteralExpression" ):
                return visitor.visitArrayLiteralExpression(self)
            else:
                return visitor.visitChildren(self)


    class MemberDotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)

        def Dot(self):
            return self.getToken(TypeScriptParser.Dot, 0)
        def identifierName(self):
            return self.getTypedRuleContext(TypeScriptParser.IdentifierNameContext,0)

        def nestedTypeGeneric(self):
            return self.getTypedRuleContext(TypeScriptParser.NestedTypeGenericContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDotExpression" ):
                listener.enterMemberDotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDotExpression" ):
                listener.exitMemberDotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDotExpression" ):
                return visitor.visitMemberDotExpression(self)
            else:
                return visitor.visitChildren(self)


    class ClassExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Class(self):
            return self.getToken(TypeScriptParser.Class, 0)
        def classTail(self):
            return self.getTypedRuleContext(TypeScriptParser.ClassTailContext,0)

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExpression" ):
                listener.enterClassExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExpression" ):
                listener.exitClassExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExpression" ):
                return visitor.visitClassExpression(self)
            else:
                return visitor.visitChildren(self)


    class MemberIndexExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)

        def OpenBracket(self):
            return self.getToken(TypeScriptParser.OpenBracket, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(TypeScriptParser.ExpressionSequenceContext,0)

        def CloseBracket(self):
            return self.getToken(TypeScriptParser.CloseBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberIndexExpression" ):
                listener.enterMemberIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberIndexExpression" ):
                listener.exitMemberIndexExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberIndexExpression" ):
                return visitor.visitMemberIndexExpression(self)
            else:
                return visitor.visitChildren(self)


    class IdentifierExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifierName(self):
            return self.getTypedRuleContext(TypeScriptParser.IdentifierNameContext,0)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierExpression" ):
                listener.enterIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierExpression" ):
                listener.exitIdentifierExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierExpression" ):
                return visitor.visitIdentifierExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitAndExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def BitAnd(self):
            return self.getToken(TypeScriptParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndExpression" ):
                listener.enterBitAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndExpression" ):
                listener.exitBitAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitAndExpression" ):
                return visitor.visitBitAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def BitOr(self):
            return self.getToken(TypeScriptParser.BitOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrExpression" ):
                listener.enterBitOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrExpression" ):
                listener.exitBitOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOrExpression" ):
                return visitor.visitBitOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class AssignmentOperatorExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,i)

        def assignmentOperator(self):
            return self.getTypedRuleContext(TypeScriptParser.AssignmentOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperatorExpression" ):
                listener.enterAssignmentOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperatorExpression" ):
                listener.exitAssignmentOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperatorExpression" ):
                return visitor.visitAssignmentOperatorExpression(self)
            else:
                return visitor.visitChildren(self)


    class VoidExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TypeScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Void(self):
            return self.getToken(TypeScriptParser.Void, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVoidExpression" ):
                listener.enterVoidExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVoidExpression" ):
                listener.exitVoidExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVoidExpression" ):
                return visitor.visitVoidExpression(self)
            else:
                return visitor.visitChildren(self)



    def singleExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TypeScriptParser.SingleExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 254
        self.enterRecursionRule(localctx, 254, self.RULE_singleExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                localctx = TypeScriptParser.FunctionExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1453
                self.functionExpressionDeclaration()
                pass

            elif la_ == 2:
                localctx = TypeScriptParser.ArrowFunctionExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1454
                self.arrowFunctionDeclaration()
                pass

            elif la_ == 3:
                localctx = TypeScriptParser.ClassExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1455
                self.match(TypeScriptParser.Class)
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.Identifier:
                    self.state = 1456
                    self.match(TypeScriptParser.Identifier)


                self.state = 1459
                self.classTail()
                pass

            elif la_ == 4:
                localctx = TypeScriptParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1460
                self.match(TypeScriptParser.New)
                self.state = 1461
                self.singleExpression(0)
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TypeScriptParser.LessThan:
                    self.state = 1462
                    self.typeArguments()


                self.state = 1465
                self.arguments()
                pass

            elif la_ == 5:
                localctx = TypeScriptParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1467
                self.match(TypeScriptParser.New)
                self.state = 1468
                self.singleExpression(0)
                self.state = 1470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1469
                    self.typeArguments()


                pass

            elif la_ == 6:
                localctx = TypeScriptParser.DeleteExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1472
                self.match(TypeScriptParser.Delete)
                self.state = 1473
                self.singleExpression(38)
                pass

            elif la_ == 7:
                localctx = TypeScriptParser.VoidExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1474
                self.match(TypeScriptParser.Void)
                self.state = 1475
                self.singleExpression(37)
                pass

            elif la_ == 8:
                localctx = TypeScriptParser.TypeofExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1476
                self.match(TypeScriptParser.Typeof)
                self.state = 1477
                self.singleExpression(36)
                pass

            elif la_ == 9:
                localctx = TypeScriptParser.PreIncrementExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1478
                self.match(TypeScriptParser.PlusPlus)
                self.state = 1479
                self.singleExpression(35)
                pass

            elif la_ == 10:
                localctx = TypeScriptParser.PreDecreaseExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1480
                self.match(TypeScriptParser.MinusMinus)
                self.state = 1481
                self.singleExpression(34)
                pass

            elif la_ == 11:
                localctx = TypeScriptParser.UnaryPlusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1482
                self.match(TypeScriptParser.Plus)
                self.state = 1483
                self.singleExpression(33)
                pass

            elif la_ == 12:
                localctx = TypeScriptParser.UnaryMinusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1484
                self.match(TypeScriptParser.Minus)
                self.state = 1485
                self.singleExpression(32)
                pass

            elif la_ == 13:
                localctx = TypeScriptParser.BitNotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1486
                self.match(TypeScriptParser.BitNot)
                self.state = 1487
                self.singleExpression(31)
                pass

            elif la_ == 14:
                localctx = TypeScriptParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1488
                self.match(TypeScriptParser.Not)
                self.state = 1489
                self.singleExpression(30)
                pass

            elif la_ == 15:
                localctx = TypeScriptParser.IteratorsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1490
                self.iteratorBlock()
                pass

            elif la_ == 16:
                localctx = TypeScriptParser.GeneratorsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1491
                self.generatorBlock()
                pass

            elif la_ == 17:
                localctx = TypeScriptParser.GeneratorsFunctionExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1492
                self.generatorFunctionDeclaration()
                pass

            elif la_ == 18:
                localctx = TypeScriptParser.YieldExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1493
                self.yieldStatement()
                pass

            elif la_ == 19:
                localctx = TypeScriptParser.ThisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1494
                self.match(TypeScriptParser.This)
                pass

            elif la_ == 20:
                localctx = TypeScriptParser.IdentifierExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1495
                self.identifierName()
                self.state = 1497
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1496
                    self.singleExpression(0)


                pass

            elif la_ == 21:
                localctx = TypeScriptParser.SuperExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1499
                self.match(TypeScriptParser.Super)
                pass

            elif la_ == 22:
                localctx = TypeScriptParser.LiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1500
                self.literal()
                pass

            elif la_ == 23:
                localctx = TypeScriptParser.ArrayLiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1501
                self.arrayLiteral()
                pass

            elif la_ == 24:
                localctx = TypeScriptParser.ObjectLiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1502
                self.objectLiteral()
                pass

            elif la_ == 25:
                localctx = TypeScriptParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1503
                self.match(TypeScriptParser.OpenParen)
                self.state = 1504
                self.expressionSequence()
                self.state = 1505
                self.match(TypeScriptParser.CloseParen)
                pass

            elif la_ == 26:
                localctx = TypeScriptParser.GenericTypesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1507
                self.typeArguments()
                self.state = 1509
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1508
                    self.expressionSequence()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1588
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1586
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                    if la_ == 1:
                        localctx = TypeScriptParser.MultiplicativeExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1513
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 1514
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.Multiply) | (1 << TypeScriptParser.Divide) | (1 << TypeScriptParser.Modulus))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1515
                        self.singleExpression(30)
                        pass

                    elif la_ == 2:
                        localctx = TypeScriptParser.AdditiveExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1516
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 1517
                        _la = self._input.LA(1)
                        if not(_la==TypeScriptParser.Plus or _la==TypeScriptParser.Minus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1518
                        self.singleExpression(29)
                        pass

                    elif la_ == 3:
                        localctx = TypeScriptParser.BitShiftExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1519
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 1520
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.RightShiftArithmetic) | (1 << TypeScriptParser.LeftShiftArithmetic) | (1 << TypeScriptParser.RightShiftLogical))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1521
                        self.singleExpression(28)
                        pass

                    elif la_ == 4:
                        localctx = TypeScriptParser.RelationalExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1522
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1523
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.LessThan) | (1 << TypeScriptParser.MoreThan) | (1 << TypeScriptParser.LessThanEquals) | (1 << TypeScriptParser.GreaterThanEquals))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1524
                        self.singleExpression(27)
                        pass

                    elif la_ == 5:
                        localctx = TypeScriptParser.InstanceofExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1525
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1526
                        self.match(TypeScriptParser.Instanceof)
                        self.state = 1527
                        self.singleExpression(26)
                        pass

                    elif la_ == 6:
                        localctx = TypeScriptParser.InExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1528
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1529
                        self.match(TypeScriptParser.In)
                        self.state = 1530
                        self.singleExpression(25)
                        pass

                    elif la_ == 7:
                        localctx = TypeScriptParser.EqualityExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1531
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1532
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.Equals_) | (1 << TypeScriptParser.NotEquals) | (1 << TypeScriptParser.IdentityEquals) | (1 << TypeScriptParser.IdentityNotEquals))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1533
                        self.singleExpression(24)
                        pass

                    elif la_ == 8:
                        localctx = TypeScriptParser.BitAndExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1534
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1535
                        self.match(TypeScriptParser.BitAnd)
                        self.state = 1536
                        self.singleExpression(23)
                        pass

                    elif la_ == 9:
                        localctx = TypeScriptParser.BitXOrExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1537
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1538
                        self.match(TypeScriptParser.BitXOr)
                        self.state = 1539
                        self.singleExpression(22)
                        pass

                    elif la_ == 10:
                        localctx = TypeScriptParser.BitOrExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1540
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1541
                        self.match(TypeScriptParser.BitOr)
                        self.state = 1542
                        self.singleExpression(21)
                        pass

                    elif la_ == 11:
                        localctx = TypeScriptParser.LogicalAndExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1543
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1544
                        self.match(TypeScriptParser.And)
                        self.state = 1545
                        self.singleExpression(20)
                        pass

                    elif la_ == 12:
                        localctx = TypeScriptParser.LogicalOrExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1546
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1547
                        self.match(TypeScriptParser.Or)
                        self.state = 1548
                        self.singleExpression(19)
                        pass

                    elif la_ == 13:
                        localctx = TypeScriptParser.TernaryExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1549
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1550
                        self.match(TypeScriptParser.QuestionMark)
                        self.state = 1551
                        self.singleExpression(0)
                        self.state = 1552
                        self.match(TypeScriptParser.Colon)
                        self.state = 1553
                        self.singleExpression(18)
                        pass

                    elif la_ == 14:
                        localctx = TypeScriptParser.AssignmentExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1555
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1556
                        self.match(TypeScriptParser.Assign)
                        self.state = 1557
                        self.singleExpression(17)
                        pass

                    elif la_ == 15:
                        localctx = TypeScriptParser.AssignmentOperatorExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1558
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1559
                        self.assignmentOperator()
                        self.state = 1560
                        self.singleExpression(16)
                        pass

                    elif la_ == 16:
                        localctx = TypeScriptParser.MemberIndexExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1562
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 1563
                        self.match(TypeScriptParser.OpenBracket)
                        self.state = 1564
                        self.expressionSequence()
                        self.state = 1565
                        self.match(TypeScriptParser.CloseBracket)
                        pass

                    elif la_ == 17:
                        localctx = TypeScriptParser.MemberDotExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1567
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 1568
                        self.match(TypeScriptParser.Dot)
                        self.state = 1569
                        self.identifierName()
                        self.state = 1571
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                        if la_ == 1:
                            self.state = 1570
                            self.nestedTypeGeneric()


                        pass

                    elif la_ == 18:
                        localctx = TypeScriptParser.ArgumentsExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1573
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 1574
                        self.arguments()
                        pass

                    elif la_ == 19:
                        localctx = TypeScriptParser.PostIncrementExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1575
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 1576
                        if not this.notLineTerminator():
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "this.notLineTerminator()")
                        self.state = 1577
                        self.match(TypeScriptParser.PlusPlus)
                        pass

                    elif la_ == 20:
                        localctx = TypeScriptParser.PostDecreaseExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1578
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 1579
                        if not this.notLineTerminator():
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "this.notLineTerminator()")
                        self.state = 1580
                        self.match(TypeScriptParser.MinusMinus)
                        pass

                    elif la_ == 21:
                        localctx = TypeScriptParser.TemplateStringExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1581
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1582
                        self.templateStringLiteral()
                        pass

                    elif la_ == 22:
                        localctx = TypeScriptParser.CastAsExpressionContext(self, TypeScriptParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 1583
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1584
                        self.match(TypeScriptParser.As)
                        self.state = 1585
                        self.asExpression()
                        pass

             
                self.state = 1590
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predefinedType(self):
            return self.getTypedRuleContext(TypeScriptParser.PredefinedTypeContext,0)


        def OpenBracket(self):
            return self.getToken(TypeScriptParser.OpenBracket, 0)

        def CloseBracket(self):
            return self.getToken(TypeScriptParser.CloseBracket, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_asExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsExpression" ):
                listener.enterAsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsExpression" ):
                listener.exitAsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsExpression" ):
                return visitor.visitAsExpression(self)
            else:
                return visitor.visitChildren(self)




    def asExpression(self):

        localctx = TypeScriptParser.AsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_asExpression)
        try:
            self.state = 1597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1591
                self.predefinedType()
                self.state = 1594
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1592
                    self.match(TypeScriptParser.OpenBracket)
                    self.state = 1593
                    self.match(TypeScriptParser.CloseBracket)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1596
                self.singleExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowFunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrowFunctionParameters(self):
            return self.getTypedRuleContext(TypeScriptParser.ArrowFunctionParametersContext,0)


        def ARROW(self):
            return self.getToken(TypeScriptParser.ARROW, 0)

        def arrowFunctionBody(self):
            return self.getTypedRuleContext(TypeScriptParser.ArrowFunctionBodyContext,0)


        def Async(self):
            return self.getToken(TypeScriptParser.Async, 0)

        def typeAnnotation(self):
            return self.getTypedRuleContext(TypeScriptParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_arrowFunctionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunctionDeclaration" ):
                listener.enterArrowFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunctionDeclaration" ):
                listener.exitArrowFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrowFunctionDeclaration" ):
                return visitor.visitArrowFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def arrowFunctionDeclaration(self):

        localctx = TypeScriptParser.ArrowFunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_arrowFunctionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Async:
                self.state = 1599
                self.match(TypeScriptParser.Async)


            self.state = 1602
            self.arrowFunctionParameters()
            self.state = 1604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TypeScriptParser.Colon:
                self.state = 1603
                self.typeAnnotation()


            self.state = 1606
            self.match(TypeScriptParser.ARROW)
            self.state = 1607
            self.arrowFunctionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowFunctionParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def OpenParen(self):
            return self.getToken(TypeScriptParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(TypeScriptParser.CloseParen, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(TypeScriptParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_arrowFunctionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunctionParameters" ):
                listener.enterArrowFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunctionParameters" ):
                listener.exitArrowFunctionParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrowFunctionParameters" ):
                return visitor.visitArrowFunctionParameters(self)
            else:
                return visitor.visitChildren(self)




    def arrowFunctionParameters(self):

        localctx = TypeScriptParser.ArrowFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_arrowFunctionParameters)
        self._la = 0 # Token type
        try:
            self.state = 1615
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1609
                self.match(TypeScriptParser.Identifier)
                pass
            elif token in [TypeScriptParser.OpenParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1610
                self.match(TypeScriptParser.OpenParen)
                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.OpenBracket) | (1 << TypeScriptParser.OpenBrace) | (1 << TypeScriptParser.Ellipsis))) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (TypeScriptParser.Private - 101)) | (1 << (TypeScriptParser.Public - 101)) | (1 << (TypeScriptParser.Protected - 101)) | (1 << (TypeScriptParser.TypeAlias - 101)) | (1 << (TypeScriptParser.Require - 101)) | (1 << (TypeScriptParser.At - 101)) | (1 << (TypeScriptParser.Identifier - 101)))) != 0):
                    self.state = 1611
                    self.formalParameterList()


                self.state = 1614
                self.match(TypeScriptParser.CloseParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowFunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def OpenBrace(self):
            return self.getToken(TypeScriptParser.OpenBrace, 0)

        def functionBody(self):
            return self.getTypedRuleContext(TypeScriptParser.FunctionBodyContext,0)


        def CloseBrace(self):
            return self.getToken(TypeScriptParser.CloseBrace, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_arrowFunctionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunctionBody" ):
                listener.enterArrowFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunctionBody" ):
                listener.exitArrowFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrowFunctionBody" ):
                return visitor.visitArrowFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def arrowFunctionBody(self):

        localctx = TypeScriptParser.ArrowFunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_arrowFunctionBody)
        try:
            self.state = 1622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1617
                self.singleExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1618
                self.match(TypeScriptParser.OpenBrace)
                self.state = 1619
                self.functionBody()
                self.state = 1620
                self.match(TypeScriptParser.CloseBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiplyAssign(self):
            return self.getToken(TypeScriptParser.MultiplyAssign, 0)

        def DivideAssign(self):
            return self.getToken(TypeScriptParser.DivideAssign, 0)

        def ModulusAssign(self):
            return self.getToken(TypeScriptParser.ModulusAssign, 0)

        def PlusAssign(self):
            return self.getToken(TypeScriptParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(TypeScriptParser.MinusAssign, 0)

        def LeftShiftArithmeticAssign(self):
            return self.getToken(TypeScriptParser.LeftShiftArithmeticAssign, 0)

        def RightShiftArithmeticAssign(self):
            return self.getToken(TypeScriptParser.RightShiftArithmeticAssign, 0)

        def RightShiftLogicalAssign(self):
            return self.getToken(TypeScriptParser.RightShiftLogicalAssign, 0)

        def BitAndAssign(self):
            return self.getToken(TypeScriptParser.BitAndAssign, 0)

        def BitXorAssign(self):
            return self.getToken(TypeScriptParser.BitXorAssign, 0)

        def BitOrAssign(self):
            return self.getToken(TypeScriptParser.BitOrAssign, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = TypeScriptParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.MultiplyAssign) | (1 << TypeScriptParser.DivideAssign) | (1 << TypeScriptParser.ModulusAssign) | (1 << TypeScriptParser.PlusAssign) | (1 << TypeScriptParser.MinusAssign) | (1 << TypeScriptParser.LeftShiftArithmeticAssign) | (1 << TypeScriptParser.RightShiftArithmeticAssign) | (1 << TypeScriptParser.RightShiftLogicalAssign) | (1 << TypeScriptParser.BitAndAssign) | (1 << TypeScriptParser.BitXorAssign) | (1 << TypeScriptParser.BitOrAssign))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NullLiteral(self):
            return self.getToken(TypeScriptParser.NullLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(TypeScriptParser.BooleanLiteral, 0)

        def StringLiteral(self):
            return self.getToken(TypeScriptParser.StringLiteral, 0)

        def templateStringLiteral(self):
            return self.getTypedRuleContext(TypeScriptParser.TemplateStringLiteralContext,0)


        def RegularExpressionLiteral(self):
            return self.getToken(TypeScriptParser.RegularExpressionLiteral, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(TypeScriptParser.NumericLiteralContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = TypeScriptParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_literal)
        try:
            self.state = 1632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.NullLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1626
                self.match(TypeScriptParser.NullLiteral)
                pass
            elif token in [TypeScriptParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1627
                self.match(TypeScriptParser.BooleanLiteral)
                pass
            elif token in [TypeScriptParser.StringLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1628
                self.match(TypeScriptParser.StringLiteral)
                pass
            elif token in [TypeScriptParser.BackTick]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1629
                self.templateStringLiteral()
                pass
            elif token in [TypeScriptParser.RegularExpressionLiteral]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1630
                self.match(TypeScriptParser.RegularExpressionLiteral)
                pass
            elif token in [TypeScriptParser.DecimalLiteral, TypeScriptParser.HexIntegerLiteral, TypeScriptParser.OctalIntegerLiteral, TypeScriptParser.OctalIntegerLiteral2, TypeScriptParser.BinaryIntegerLiteral]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1631
                self.numericLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BackTick(self, i:int=None):
            if i is None:
                return self.getTokens(TypeScriptParser.BackTick)
            else:
                return self.getToken(TypeScriptParser.BackTick, i)

        def templateStringAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TypeScriptParser.TemplateStringAtomContext)
            else:
                return self.getTypedRuleContext(TypeScriptParser.TemplateStringAtomContext,i)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_templateStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStringLiteral" ):
                listener.enterTemplateStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStringLiteral" ):
                listener.exitTemplateStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateStringLiteral" ):
                return visitor.visitTemplateStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def templateStringLiteral(self):

        localctx = TypeScriptParser.TemplateStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_templateStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            self.match(TypeScriptParser.BackTick)
            self.state = 1638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TypeScriptParser.TemplateStringStartExpression or _la==TypeScriptParser.TemplateStringAtom:
                self.state = 1635
                self.templateStringAtom()
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1641
            self.match(TypeScriptParser.BackTick)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateStringAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TemplateStringAtom(self):
            return self.getToken(TypeScriptParser.TemplateStringAtom, 0)

        def TemplateStringStartExpression(self):
            return self.getToken(TypeScriptParser.TemplateStringStartExpression, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(TypeScriptParser.SingleExpressionContext,0)


        def TemplateCloseBrace(self):
            return self.getToken(TypeScriptParser.TemplateCloseBrace, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_templateStringAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStringAtom" ):
                listener.enterTemplateStringAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStringAtom" ):
                listener.exitTemplateStringAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateStringAtom" ):
                return visitor.visitTemplateStringAtom(self)
            else:
                return visitor.visitChildren(self)




    def templateStringAtom(self):

        localctx = TypeScriptParser.TemplateStringAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_templateStringAtom)
        try:
            self.state = 1648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.TemplateStringAtom]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1643
                self.match(TypeScriptParser.TemplateStringAtom)
                pass
            elif token in [TypeScriptParser.TemplateStringStartExpression]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1644
                self.match(TypeScriptParser.TemplateStringStartExpression)
                self.state = 1645
                self.singleExpression(0)
                self.state = 1646
                self.match(TypeScriptParser.TemplateCloseBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalLiteral(self):
            return self.getToken(TypeScriptParser.DecimalLiteral, 0)

        def HexIntegerLiteral(self):
            return self.getToken(TypeScriptParser.HexIntegerLiteral, 0)

        def OctalIntegerLiteral(self):
            return self.getToken(TypeScriptParser.OctalIntegerLiteral, 0)

        def OctalIntegerLiteral2(self):
            return self.getToken(TypeScriptParser.OctalIntegerLiteral2, 0)

        def BinaryIntegerLiteral(self):
            return self.getToken(TypeScriptParser.BinaryIntegerLiteral, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_numericLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numericLiteral(self):

        localctx = TypeScriptParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_numericLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TypeScriptParser.DecimalLiteral) | (1 << TypeScriptParser.HexIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral) | (1 << TypeScriptParser.OctalIntegerLiteral2) | (1 << TypeScriptParser.BinaryIntegerLiteral))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def reservedWord(self):
            return self.getTypedRuleContext(TypeScriptParser.ReservedWordContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_identifierName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierName" ):
                listener.enterIdentifierName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierName" ):
                listener.exitIdentifierName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierName" ):
                return visitor.visitIdentifierName(self)
            else:
                return visitor.visitChildren(self)




    def identifierName(self):

        localctx = TypeScriptParser.IdentifierNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_identifierName)
        try:
            self.state = 1654
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1652
                self.match(TypeScriptParser.Identifier)
                pass
            elif token in [TypeScriptParser.NullLiteral, TypeScriptParser.BooleanLiteral, TypeScriptParser.Break, TypeScriptParser.Do, TypeScriptParser.Instanceof, TypeScriptParser.Typeof, TypeScriptParser.Case, TypeScriptParser.Else, TypeScriptParser.New, TypeScriptParser.Var, TypeScriptParser.Catch, TypeScriptParser.Finally, TypeScriptParser.Return, TypeScriptParser.Void, TypeScriptParser.Continue, TypeScriptParser.For, TypeScriptParser.Switch, TypeScriptParser.While, TypeScriptParser.Debugger, TypeScriptParser.Function_, TypeScriptParser.This, TypeScriptParser.With, TypeScriptParser.Default, TypeScriptParser.If, TypeScriptParser.Throw, TypeScriptParser.Delete, TypeScriptParser.In, TypeScriptParser.Try, TypeScriptParser.From, TypeScriptParser.ReadOnly, TypeScriptParser.Async, TypeScriptParser.Class, TypeScriptParser.Enum, TypeScriptParser.Extends, TypeScriptParser.Super, TypeScriptParser.Const, TypeScriptParser.Export, TypeScriptParser.Import, TypeScriptParser.Implements, TypeScriptParser.Let, TypeScriptParser.Private, TypeScriptParser.Public, TypeScriptParser.Interface, TypeScriptParser.Package, TypeScriptParser.Protected, TypeScriptParser.Static, TypeScriptParser.Yield, TypeScriptParser.String, TypeScriptParser.TypeAlias, TypeScriptParser.Get, TypeScriptParser.Set, TypeScriptParser.Require]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1653
                self.reservedWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrKeyWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TypeScriptParser.Identifier, 0)

        def TypeAlias(self):
            return self.getToken(TypeScriptParser.TypeAlias, 0)

        def Require(self):
            return self.getToken(TypeScriptParser.Require, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_identifierOrKeyWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrKeyWord" ):
                listener.enterIdentifierOrKeyWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrKeyWord" ):
                listener.exitIdentifierOrKeyWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrKeyWord" ):
                return visitor.visitIdentifierOrKeyWord(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrKeyWord(self):

        localctx = TypeScriptParser.IdentifierOrKeyWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_identifierOrKeyWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1656
            _la = self._input.LA(1)
            if not(((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & ((1 << (TypeScriptParser.TypeAlias - 113)) | (1 << (TypeScriptParser.Require - 113)) | (1 << (TypeScriptParser.Identifier - 113)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(TypeScriptParser.KeywordContext,0)


        def NullLiteral(self):
            return self.getToken(TypeScriptParser.NullLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(TypeScriptParser.BooleanLiteral, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_reservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedWord" ):
                listener.enterReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedWord" ):
                listener.exitReservedWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedWord" ):
                return visitor.visitReservedWord(self)
            else:
                return visitor.visitChildren(self)




    def reservedWord(self):

        localctx = TypeScriptParser.ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_reservedWord)
        try:
            self.state = 1661
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TypeScriptParser.Break, TypeScriptParser.Do, TypeScriptParser.Instanceof, TypeScriptParser.Typeof, TypeScriptParser.Case, TypeScriptParser.Else, TypeScriptParser.New, TypeScriptParser.Var, TypeScriptParser.Catch, TypeScriptParser.Finally, TypeScriptParser.Return, TypeScriptParser.Void, TypeScriptParser.Continue, TypeScriptParser.For, TypeScriptParser.Switch, TypeScriptParser.While, TypeScriptParser.Debugger, TypeScriptParser.Function_, TypeScriptParser.This, TypeScriptParser.With, TypeScriptParser.Default, TypeScriptParser.If, TypeScriptParser.Throw, TypeScriptParser.Delete, TypeScriptParser.In, TypeScriptParser.Try, TypeScriptParser.From, TypeScriptParser.ReadOnly, TypeScriptParser.Async, TypeScriptParser.Class, TypeScriptParser.Enum, TypeScriptParser.Extends, TypeScriptParser.Super, TypeScriptParser.Const, TypeScriptParser.Export, TypeScriptParser.Import, TypeScriptParser.Implements, TypeScriptParser.Let, TypeScriptParser.Private, TypeScriptParser.Public, TypeScriptParser.Interface, TypeScriptParser.Package, TypeScriptParser.Protected, TypeScriptParser.Static, TypeScriptParser.Yield, TypeScriptParser.String, TypeScriptParser.TypeAlias, TypeScriptParser.Get, TypeScriptParser.Set, TypeScriptParser.Require]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1658
                self.keyword()
                pass
            elif token in [TypeScriptParser.NullLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1659
                self.match(TypeScriptParser.NullLiteral)
                pass
            elif token in [TypeScriptParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1660
                self.match(TypeScriptParser.BooleanLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(TypeScriptParser.Break, 0)

        def Do(self):
            return self.getToken(TypeScriptParser.Do, 0)

        def Instanceof(self):
            return self.getToken(TypeScriptParser.Instanceof, 0)

        def Typeof(self):
            return self.getToken(TypeScriptParser.Typeof, 0)

        def Case(self):
            return self.getToken(TypeScriptParser.Case, 0)

        def Else(self):
            return self.getToken(TypeScriptParser.Else, 0)

        def New(self):
            return self.getToken(TypeScriptParser.New, 0)

        def Var(self):
            return self.getToken(TypeScriptParser.Var, 0)

        def Catch(self):
            return self.getToken(TypeScriptParser.Catch, 0)

        def Finally(self):
            return self.getToken(TypeScriptParser.Finally, 0)

        def Return(self):
            return self.getToken(TypeScriptParser.Return, 0)

        def Void(self):
            return self.getToken(TypeScriptParser.Void, 0)

        def Continue(self):
            return self.getToken(TypeScriptParser.Continue, 0)

        def For(self):
            return self.getToken(TypeScriptParser.For, 0)

        def Switch(self):
            return self.getToken(TypeScriptParser.Switch, 0)

        def While(self):
            return self.getToken(TypeScriptParser.While, 0)

        def Debugger(self):
            return self.getToken(TypeScriptParser.Debugger, 0)

        def Function_(self):
            return self.getToken(TypeScriptParser.Function_, 0)

        def This(self):
            return self.getToken(TypeScriptParser.This, 0)

        def With(self):
            return self.getToken(TypeScriptParser.With, 0)

        def Default(self):
            return self.getToken(TypeScriptParser.Default, 0)

        def If(self):
            return self.getToken(TypeScriptParser.If, 0)

        def Throw(self):
            return self.getToken(TypeScriptParser.Throw, 0)

        def Delete(self):
            return self.getToken(TypeScriptParser.Delete, 0)

        def In(self):
            return self.getToken(TypeScriptParser.In, 0)

        def Try(self):
            return self.getToken(TypeScriptParser.Try, 0)

        def ReadOnly(self):
            return self.getToken(TypeScriptParser.ReadOnly, 0)

        def Async(self):
            return self.getToken(TypeScriptParser.Async, 0)

        def From(self):
            return self.getToken(TypeScriptParser.From, 0)

        def Class(self):
            return self.getToken(TypeScriptParser.Class, 0)

        def Enum(self):
            return self.getToken(TypeScriptParser.Enum, 0)

        def Extends(self):
            return self.getToken(TypeScriptParser.Extends, 0)

        def Super(self):
            return self.getToken(TypeScriptParser.Super, 0)

        def Const(self):
            return self.getToken(TypeScriptParser.Const, 0)

        def Export(self):
            return self.getToken(TypeScriptParser.Export, 0)

        def Import(self):
            return self.getToken(TypeScriptParser.Import, 0)

        def Implements(self):
            return self.getToken(TypeScriptParser.Implements, 0)

        def Let(self):
            return self.getToken(TypeScriptParser.Let, 0)

        def Private(self):
            return self.getToken(TypeScriptParser.Private, 0)

        def Public(self):
            return self.getToken(TypeScriptParser.Public, 0)

        def Interface(self):
            return self.getToken(TypeScriptParser.Interface, 0)

        def Package(self):
            return self.getToken(TypeScriptParser.Package, 0)

        def Protected(self):
            return self.getToken(TypeScriptParser.Protected, 0)

        def Static(self):
            return self.getToken(TypeScriptParser.Static, 0)

        def Yield(self):
            return self.getToken(TypeScriptParser.Yield, 0)

        def Get(self):
            return self.getToken(TypeScriptParser.Get, 0)

        def Set(self):
            return self.getToken(TypeScriptParser.Set, 0)

        def Require(self):
            return self.getToken(TypeScriptParser.Require, 0)

        def TypeAlias(self):
            return self.getToken(TypeScriptParser.TypeAlias, 0)

        def String(self):
            return self.getToken(TypeScriptParser.String, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = TypeScriptParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            _la = self._input.LA(1)
            if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (TypeScriptParser.Break - 62)) | (1 << (TypeScriptParser.Do - 62)) | (1 << (TypeScriptParser.Instanceof - 62)) | (1 << (TypeScriptParser.Typeof - 62)) | (1 << (TypeScriptParser.Case - 62)) | (1 << (TypeScriptParser.Else - 62)) | (1 << (TypeScriptParser.New - 62)) | (1 << (TypeScriptParser.Var - 62)) | (1 << (TypeScriptParser.Catch - 62)) | (1 << (TypeScriptParser.Finally - 62)) | (1 << (TypeScriptParser.Return - 62)) | (1 << (TypeScriptParser.Void - 62)) | (1 << (TypeScriptParser.Continue - 62)) | (1 << (TypeScriptParser.For - 62)) | (1 << (TypeScriptParser.Switch - 62)) | (1 << (TypeScriptParser.While - 62)) | (1 << (TypeScriptParser.Debugger - 62)) | (1 << (TypeScriptParser.Function_ - 62)) | (1 << (TypeScriptParser.This - 62)) | (1 << (TypeScriptParser.With - 62)) | (1 << (TypeScriptParser.Default - 62)) | (1 << (TypeScriptParser.If - 62)) | (1 << (TypeScriptParser.Throw - 62)) | (1 << (TypeScriptParser.Delete - 62)) | (1 << (TypeScriptParser.In - 62)) | (1 << (TypeScriptParser.Try - 62)) | (1 << (TypeScriptParser.From - 62)) | (1 << (TypeScriptParser.ReadOnly - 62)) | (1 << (TypeScriptParser.Async - 62)) | (1 << (TypeScriptParser.Class - 62)) | (1 << (TypeScriptParser.Enum - 62)) | (1 << (TypeScriptParser.Extends - 62)) | (1 << (TypeScriptParser.Super - 62)) | (1 << (TypeScriptParser.Const - 62)) | (1 << (TypeScriptParser.Export - 62)) | (1 << (TypeScriptParser.Import - 62)) | (1 << (TypeScriptParser.Implements - 62)) | (1 << (TypeScriptParser.Let - 62)) | (1 << (TypeScriptParser.Private - 62)) | (1 << (TypeScriptParser.Public - 62)) | (1 << (TypeScriptParser.Interface - 62)) | (1 << (TypeScriptParser.Package - 62)) | (1 << (TypeScriptParser.Protected - 62)) | (1 << (TypeScriptParser.Static - 62)) | (1 << (TypeScriptParser.Yield - 62)) | (1 << (TypeScriptParser.String - 62)) | (1 << (TypeScriptParser.TypeAlias - 62)) | (1 << (TypeScriptParser.Get - 62)) | (1 << (TypeScriptParser.Set - 62)) | (1 << (TypeScriptParser.Require - 62)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Get(self):
            return self.getToken(TypeScriptParser.Get, 0)

        def propertyName(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertyNameContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetter" ):
                return visitor.visitGetter(self)
            else:
                return visitor.visitChildren(self)




    def getter(self):

        localctx = TypeScriptParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_getter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1665
            self.match(TypeScriptParser.Get)
            self.state = 1666
            self.propertyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Set(self):
            return self.getToken(TypeScriptParser.Set, 0)

        def propertyName(self):
            return self.getTypedRuleContext(TypeScriptParser.PropertyNameContext,0)


        def getRuleIndex(self):
            return TypeScriptParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetter" ):
                return visitor.visitSetter(self)
            else:
                return visitor.visitChildren(self)




    def setter(self):

        localctx = TypeScriptParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_setter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1668
            self.match(TypeScriptParser.Set)
            self.state = 1669
            self.propertyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(TypeScriptParser.SemiColon, 0)

        def EOF(self):
            return self.getToken(TypeScriptParser.EOF, 0)

        def getRuleIndex(self):
            return TypeScriptParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEos" ):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)




    def eos(self):

        localctx = TypeScriptParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_eos)
        try:
            self.state = 1675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1671
                self.match(TypeScriptParser.SemiColon)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1672
                self.match(TypeScriptParser.EOF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1673
                if not this.lineTerminatorAhead():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.lineTerminatorAhead()")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1674
                if not this.closeBrace():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.closeBrace()")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[10] = self.unionOrIntersectionOrPrimaryType_sempred
        self._predicates[11] = self.primaryType_sempred
        self._predicates[22] = self.arrayType_sempred
        self._predicates[57] = self.decoratorMemberExpression_sempred
        self._predicates[73] = self.expressionStatement_sempred
        self._predicates[75] = self.iterationStatement_sempred
        self._predicates[77] = self.continueStatement_sempred
        self._predicates[78] = self.breakStatement_sempred
        self._predicates[79] = self.returnStatement_sempred
        self._predicates[80] = self.yieldStatement_sempred
        self._predicates[88] = self.throwStatement_sempred
        self._predicates[127] = self.singleExpression_sempred
        self._predicates[143] = self.eos_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def unionOrIntersectionOrPrimaryType_sempred(self, localctx:UnionOrIntersectionOrPrimaryTypeContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def primaryType_sempred(self, localctx:PrimaryTypeContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return notLineTerminator()
         

    def arrayType_sempred(self, localctx:ArrayTypeContext, predIndex:int):
            if predIndex == 4:
                return notLineTerminator()
         

    def decoratorMemberExpression_sempred(self, localctx:DecoratorMemberExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def expressionStatement_sempred(self, localctx:ExpressionStatementContext, predIndex:int):
            if predIndex == 6:
                return this.notOpenBraceAndNotFunction()
         

    def iterationStatement_sempred(self, localctx:IterationStatementContext, predIndex:int):
            if predIndex == 7:
                return this.p("of")
         

            if predIndex == 8:
                return this.p("of")
         

    def continueStatement_sempred(self, localctx:ContinueStatementContext, predIndex:int):
            if predIndex == 9:
                return this.notLineTerminator()
         

    def breakStatement_sempred(self, localctx:BreakStatementContext, predIndex:int):
            if predIndex == 10:
                return this.notLineTerminator()
         

    def returnStatement_sempred(self, localctx:ReturnStatementContext, predIndex:int):
            if predIndex == 11:
                return this.notLineTerminator()
         

    def yieldStatement_sempred(self, localctx:YieldStatementContext, predIndex:int):
            if predIndex == 12:
                return this.notLineTerminator()
         

    def throwStatement_sempred(self, localctx:ThrowStatementContext, predIndex:int):
            if predIndex == 13:
                return this.notLineTerminator()
         

    def singleExpression_sempred(self, localctx:SingleExpressionContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 32:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 33:
                return this.notLineTerminator()
         

            if predIndex == 34:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 35:
                return this.notLineTerminator()
         

            if predIndex == 36:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 37:
                return self.precpred(self._ctx, 1)
         

    def eos_sempred(self, localctx:EosContext, predIndex:int):
            if predIndex == 38:
                return this.lineTerminatorAhead()
         

            if predIndex == 39:
                return this.closeBrace()
         




